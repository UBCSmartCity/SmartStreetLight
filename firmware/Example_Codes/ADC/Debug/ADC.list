
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c4c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08006d60  08006d60  00007d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071b0  080071b0  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  080071b0  080071b0  000081b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071b8  080071b8  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071b8  080071b8  000081b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071bc  080071bc  000081bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080071c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200001d4  08007394  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08007394  00009378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c9f  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001520  00000000  00000000  0000de9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  0000f3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000434  00000000  00000000  0000f990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000421f  00000000  00000000  0000fdc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00001ca9  00000000  00000000  00013fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00015c8c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002a24  00000000  00000000  00015cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000041  00000000  00000000  000186f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d44 	.word	0x08006d44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006d44 	.word	0x08006d44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd8:	f000 fa98 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bdc:	f000 f82e 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be0:	f000 f8ba 	bl	8000d58 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000be4:	f000 f87a 	bl	8000cdc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8000be8:	4811      	ldr	r0, [pc, #68]	@ (8000c30 <main+0x5c>)
 8000bea:	f000 fbed 	bl	80013c8 <HAL_ADC_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	data = HAL_ADC_GetValue(&hadc1);
 8000bee:	4810      	ldr	r0, [pc, #64]	@ (8000c30 <main+0x5c>)
 8000bf0:	f000 fc98 	bl	8001524 <HAL_ADC_GetValue>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <main+0x60>)
 8000bfa:	601a      	str	r2, [r3, #0]
	if (data > 3500 ){
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <main+0x60>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000c04:	4293      	cmp	r3, r2
 8000c06:	ddf2      	ble.n	8000bee <main+0x1a>

	    HAL_GPIO_WritePin(GPIOC, LED13_Pin, 1);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0e:	480a      	ldr	r0, [pc, #40]	@ (8000c38 <main+0x64>)
 8000c10:	f001 f890 	bl	8001d34 <HAL_GPIO_WritePin>
		// Wait for 500 ms
		HAL_Delay(250);
 8000c14:	20fa      	movs	r0, #250	@ 0xfa
 8000c16:	f000 fadb 	bl	80011d0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, LED13_Pin, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c20:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <main+0x64>)
 8000c22:	f001 f887 	bl	8001d34 <HAL_GPIO_WritePin>

		HAL_Delay(250);
 8000c26:	20fa      	movs	r0, #250	@ 0xfa
 8000c28:	f000 fad2 	bl	80011d0 <HAL_Delay>
	data = HAL_ADC_GetValue(&hadc1);
 8000c2c:	e7df      	b.n	8000bee <main+0x1a>
 8000c2e:	bf00      	nop
 8000c30:	200001f0 	.word	0x200001f0
 8000c34:	20000220 	.word	0x20000220
 8000c38:	40011000 	.word	0x40011000

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	@ 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c46:	2228      	movs	r2, #40	@ 0x28
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fcaf 	bl	80035ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c70:	2301      	movs	r3, #1
 8000c72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c74:	2310      	movs	r3, #16
 8000c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 f86f 	bl	8001d64 <HAL_RCC_OscConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000c8c:	f000 f8b0 	bl	8000df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	230f      	movs	r3, #15
 8000c92:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fadc 	bl	8002268 <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000cb6:	f000 f89b 	bl	8000df0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 fc2b 	bl	8002520 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cd0:	f000 f88e 	bl	8000df0 <Error_Handler>
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3750      	adds	r7, #80	@ 0x50
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <MX_ADC1_Init+0x74>)
 8000cee:	4a19      	ldr	r2, [pc, #100]	@ (8000d54 <MX_ADC1_Init+0x78>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_ADC1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <MX_ADC1_Init+0x74>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_ADC1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_ADC1_Init+0x74>)
 8000d06:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000d0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d0c:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <MX_ADC1_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_ADC1_Init+0x74>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d18:	480d      	ldr	r0, [pc, #52]	@ (8000d50 <MX_ADC1_Init+0x74>)
 8000d1a:	f000 fa7d 	bl	8001218 <HAL_ADC_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d24:	f000 f864 	bl	8000df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <MX_ADC1_Init+0x74>)
 8000d3a:	f000 fbff 	bl	800153c <HAL_ADC_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d44:	f000 f854 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200001f0 	.word	0x200001f0
 8000d54:	40012400 	.word	0x40012400

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <MX_GPIO_Init+0x90>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a1d      	ldr	r2, [pc, #116]	@ (8000de8 <MX_GPIO_Init+0x90>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <MX_GPIO_Init+0x90>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <MX_GPIO_Init+0x90>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a17      	ldr	r2, [pc, #92]	@ (8000de8 <MX_GPIO_Init+0x90>)
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <MX_GPIO_Init+0x90>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <MX_GPIO_Init+0x90>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a11      	ldr	r2, [pc, #68]	@ (8000de8 <MX_GPIO_Init+0x90>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <MX_GPIO_Init+0x90>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED13_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dba:	480c      	ldr	r0, [pc, #48]	@ (8000dec <MX_GPIO_Init+0x94>)
 8000dbc:	f000 ffba 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 8000dc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4804      	ldr	r0, [pc, #16]	@ (8000dec <MX_GPIO_Init+0x94>)
 8000dda:	f000 fe27 	bl	8001a2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dde:	bf00      	nop
 8000de0:	3720      	adds	r7, #32
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40011000 	.word	0x40011000

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <Error_Handler+0x8>

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <HAL_MspInit+0x5c>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <HAL_MspInit+0x5c>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <HAL_MspInit+0x5c>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <HAL_MspInit+0x5c>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e58 <HAL_MspInit+0x5c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <HAL_MspInit+0x5c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <HAL_MspInit+0x60>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <HAL_MspInit+0x60>)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010000 	.word	0x40010000

08000e60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a14      	ldr	r2, [pc, #80]	@ (8000ecc <HAL_ADC_MspInit+0x6c>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d121      	bne.n	8000ec4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e80:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <HAL_ADC_MspInit+0x70>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a12      	ldr	r2, [pc, #72]	@ (8000ed0 <HAL_ADC_MspInit+0x70>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <HAL_ADC_MspInit+0x70>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <HAL_ADC_MspInit+0x70>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed0 <HAL_ADC_MspInit+0x70>)
 8000e9e:	f043 0308 	orr.w	r3, r3, #8
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <HAL_ADC_MspInit+0x70>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0308 	and.w	r3, r3, #8
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <HAL_ADC_MspInit+0x74>)
 8000ec0:	f000 fdb4 	bl	8001a2c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40012400 	.word	0x40012400
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010c00 	.word	0x40010c00

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <NMI_Handler+0x4>

08000ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <MemManage_Handler+0x4>

08000ef0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <UsageFault_Handler+0x4>

08000f00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f936 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return 1;
 8000f34:	2301      	movs	r3, #1
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr

08000f3e <_kill>:

int _kill(int pid, int sig)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f48:	f002 fb84 	bl	8003654 <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2216      	movs	r2, #22
 8000f50:	601a      	str	r2, [r3, #0]
  return -1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_exit>:

void _exit (int status)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f66:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffe7 	bl	8000f3e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <_exit+0x12>

08000f74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e00a      	b.n	8000f9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f86:	f3af 8000 	nop.w
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf0      	blt.n	8000f86 <_read+0x12>
  }

  return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e009      	b.n	8000fd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	60ba      	str	r2, [r7, #8]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf1      	blt.n	8000fc0 <_write+0x12>
  }
  return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_close>:

int _close(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800100c:	605a      	str	r2, [r3, #4]
  return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <_isatty>:

int _isatty(int file)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800102e:	b480      	push	{r7}
 8001030:	b085      	sub	sp, #20
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
	...

08001048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001050:	4a14      	ldr	r2, [pc, #80]	@ (80010a4 <_sbrk+0x5c>)
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <_sbrk+0x60>)
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800105c:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <_sbrk+0x64>)
 8001066:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <_sbrk+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	429a      	cmp	r2, r3
 8001076:	d207      	bcs.n	8001088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001078:	f002 faec 	bl	8003654 <__errno>
 800107c:	4603      	mov	r3, r0
 800107e:	220c      	movs	r2, #12
 8001080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	e009      	b.n	800109c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001088:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108e:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <_sbrk+0x64>)
 8001098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20005000 	.word	0x20005000
 80010a8:	00000400 	.word	0x00000400
 80010ac:	20000224 	.word	0x20000224
 80010b0:	20000378 	.word	0x20000378

080010b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c0:	f7ff fff8 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010c6:	490c      	ldr	r1, [pc, #48]	@ (80010f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010dc:	4c09      	ldr	r4, [pc, #36]	@ (8001104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f002 fab9 	bl	8003660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ee:	f7ff fd71 	bl	8000bd4 <main>
  bx lr
 80010f2:	4770      	bx	lr
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80010fc:	080071c0 	.word	0x080071c0
  ldr r2, =_sbss
 8001100:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001104:	20000378 	.word	0x20000378

08001108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC1_2_IRQHandler>
	...

0800110c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_Init+0x28>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	@ (8001134 <HAL_Init+0x28>)
 8001116:	f043 0310 	orr.w	r3, r3, #16
 800111a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 fc51 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	200f      	movs	r0, #15
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff fe68 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40022000 	.word	0x40022000

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fc5b 	bl	8001a12 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 fc31 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	20000008 	.word	0x20000008
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HAL_IncTick+0x1c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <HAL_IncTick+0x20>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a03      	ldr	r2, [pc, #12]	@ (80011b8 <HAL_IncTick+0x20>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000228 	.word	0x20000228

080011bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b02      	ldr	r3, [pc, #8]	@ (80011cc <HAL_GetTick+0x10>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	20000228 	.word	0x20000228

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff fff0 	bl	80011bc <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffe0 	bl	80011bc <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008

08001218 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e0be      	b.n	80013b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001244:	2b00      	cmp	r3, #0
 8001246:	d109      	bne.n	800125c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fe02 	bl	8000e60 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 fabf 	bl	80017e0 <ADC_ConversionStop_Disable>
 8001262:	4603      	mov	r3, r0
 8001264:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	2b00      	cmp	r3, #0
 8001270:	f040 8099 	bne.w	80013a6 <HAL_ADC_Init+0x18e>
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f040 8095 	bne.w	80013a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001280:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001284:	f023 0302 	bic.w	r3, r3, #2
 8001288:	f043 0202 	orr.w	r2, r3, #2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001298:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7b1b      	ldrb	r3, [r3, #12]
 800129e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012b0:	d003      	beq.n	80012ba <HAL_ADC_Init+0xa2>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d102      	bne.n	80012c0 <HAL_ADC_Init+0xa8>
 80012ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012be:	e000      	b.n	80012c2 <HAL_ADC_Init+0xaa>
 80012c0:	2300      	movs	r3, #0
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7d1b      	ldrb	r3, [r3, #20]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d119      	bne.n	8001304 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7b1b      	ldrb	r3, [r3, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d109      	bne.n	80012ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	3b01      	subs	r3, #1
 80012de:	035a      	lsls	r2, r3, #13
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	e00b      	b.n	8001304 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f0:	f043 0220 	orr.w	r2, r3, #32
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fc:	f043 0201 	orr.w	r2, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	430a      	orrs	r2, r1
 8001316:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <HAL_ADC_Init+0x1a8>)
 8001320:	4013      	ands	r3, r2
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	68b9      	ldr	r1, [r7, #8]
 8001328:	430b      	orrs	r3, r1
 800132a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001334:	d003      	beq.n	800133e <HAL_ADC_Init+0x126>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d104      	bne.n	8001348 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	3b01      	subs	r3, #1
 8001344:	051b      	lsls	r3, r3, #20
 8001346:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800134e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	430a      	orrs	r2, r1
 800135a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <HAL_ADC_Init+0x1ac>)
 8001364:	4013      	ands	r3, r2
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	429a      	cmp	r2, r3
 800136a:	d10b      	bne.n	8001384 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001376:	f023 0303 	bic.w	r3, r3, #3
 800137a:	f043 0201 	orr.w	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001382:	e018      	b.n	80013b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001388:	f023 0312 	bic.w	r3, r3, #18
 800138c:	f043 0210 	orr.w	r2, r3, #16
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001398:	f043 0201 	orr.w	r2, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013a4:	e007      	b.n	80013b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013aa:	f043 0210 	orr.w	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	ffe1f7fd 	.word	0xffe1f7fd
 80013c4:	ff1f0efe 	.word	0xff1f0efe

080013c8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d101      	bne.n	80013e2 <HAL_ADC_Start+0x1a>
 80013de:	2302      	movs	r3, #2
 80013e0:	e098      	b.n	8001514 <HAL_ADC_Start+0x14c>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f99e 	bl	800172c <ADC_Enable>
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 8087 	bne.w	800150a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a41      	ldr	r2, [pc, #260]	@ (800151c <HAL_ADC_Start+0x154>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d105      	bne.n	8001426 <HAL_ADC_Start+0x5e>
 800141a:	4b41      	ldr	r3, [pc, #260]	@ (8001520 <HAL_ADC_Start+0x158>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d115      	bne.n	8001452 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800142a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800143c:	2b00      	cmp	r3, #0
 800143e:	d026      	beq.n	800148e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001444:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001448:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001450:	e01d      	b.n	800148e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001456:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a2f      	ldr	r2, [pc, #188]	@ (8001520 <HAL_ADC_Start+0x158>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d004      	beq.n	8001472 <HAL_ADC_Start+0xaa>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a2b      	ldr	r2, [pc, #172]	@ (800151c <HAL_ADC_Start+0x154>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10d      	bne.n	800148e <HAL_ADC_Start+0xc6>
 8001472:	4b2b      	ldr	r3, [pc, #172]	@ (8001520 <HAL_ADC_Start+0x158>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001482:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001486:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001492:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149e:	f023 0206 	bic.w	r2, r3, #6
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014a6:	e002      	b.n	80014ae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f06f 0202 	mvn.w	r2, #2
 80014be:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80014ca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80014ce:	d113      	bne.n	80014f8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014d4:	4a11      	ldr	r2, [pc, #68]	@ (800151c <HAL_ADC_Start+0x154>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d105      	bne.n	80014e6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_ADC_Start+0x158>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d108      	bne.n	80014f8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	e00c      	b.n	8001512 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	e003      	b.n	8001512 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40012800 	.word	0x40012800
 8001520:	40012400 	.word	0x40012400

08001524 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_ADC_ConfigChannel+0x20>
 8001558:	2302      	movs	r3, #2
 800155a:	e0dc      	b.n	8001716 <HAL_ADC_ConfigChannel+0x1da>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b06      	cmp	r3, #6
 800156a:	d81c      	bhi.n	80015a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	3b05      	subs	r3, #5
 800157e:	221f      	movs	r2, #31
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	4019      	ands	r1, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3b05      	subs	r3, #5
 8001598:	fa00 f203 	lsl.w	r2, r0, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80015a4:	e03c      	b.n	8001620 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d81c      	bhi.n	80015e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	3b23      	subs	r3, #35	@ 0x23
 80015c0:	221f      	movs	r2, #31
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	4019      	ands	r1, r3
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	3b23      	subs	r3, #35	@ 0x23
 80015da:	fa00 f203 	lsl.w	r2, r0, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80015e6:	e01b      	b.n	8001620 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	3b41      	subs	r3, #65	@ 0x41
 80015fa:	221f      	movs	r2, #31
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	4019      	ands	r1, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3b41      	subs	r3, #65	@ 0x41
 8001614:	fa00 f203 	lsl.w	r2, r0, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b09      	cmp	r3, #9
 8001626:	d91c      	bls.n	8001662 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68d9      	ldr	r1, [r3, #12]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	3b1e      	subs	r3, #30
 800163a:	2207      	movs	r2, #7
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	4019      	ands	r1, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	6898      	ldr	r0, [r3, #8]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	3b1e      	subs	r3, #30
 8001654:	fa00 f203 	lsl.w	r2, r0, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	e019      	b.n	8001696 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6919      	ldr	r1, [r3, #16]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	2207      	movs	r2, #7
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	4019      	ands	r1, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	6898      	ldr	r0, [r3, #8]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	fa00 f203 	lsl.w	r2, r0, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b10      	cmp	r3, #16
 800169c:	d003      	beq.n	80016a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016a2:	2b11      	cmp	r3, #17
 80016a4:	d132      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001720 <HAL_ADC_ConfigChannel+0x1e4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d125      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d126      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80016cc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b10      	cmp	r3, #16
 80016d4:	d11a      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016d6:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <HAL_ADC_ConfigChannel+0x1e8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a13      	ldr	r2, [pc, #76]	@ (8001728 <HAL_ADC_ConfigChannel+0x1ec>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	0c9a      	lsrs	r2, r3, #18
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016ec:	e002      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f9      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x1b2>
 80016fa:	e007      	b.n	800170c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001700:	f043 0220 	orr.w	r2, r3, #32
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	40012400 	.word	0x40012400
 8001724:	20000000 	.word	0x20000000
 8001728:	431bde83 	.word	0x431bde83

0800172c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b01      	cmp	r3, #1
 8001748:	d040      	beq.n	80017cc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0201 	orr.w	r2, r2, #1
 8001758:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800175a:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <ADC_Enable+0xac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a1f      	ldr	r2, [pc, #124]	@ (80017dc <ADC_Enable+0xb0>)
 8001760:	fba2 2303 	umull	r2, r3, r2, r3
 8001764:	0c9b      	lsrs	r3, r3, #18
 8001766:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001768:	e002      	b.n	8001770 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	3b01      	subs	r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f9      	bne.n	800176a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001776:	f7ff fd21 	bl	80011bc <HAL_GetTick>
 800177a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800177c:	e01f      	b.n	80017be <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800177e:	f7ff fd1d 	bl	80011bc <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d918      	bls.n	80017be <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b01      	cmp	r3, #1
 8001798:	d011      	beq.n	80017be <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179e:	f043 0210 	orr.w	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e007      	b.n	80017ce <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d1d8      	bne.n	800177e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000000 	.word	0x20000000
 80017dc:	431bde83 	.word	0x431bde83

080017e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d12e      	bne.n	8001858 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0201 	bic.w	r2, r2, #1
 8001808:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800180a:	f7ff fcd7 	bl	80011bc <HAL_GetTick>
 800180e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001810:	e01b      	b.n	800184a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001812:	f7ff fcd3 	bl	80011bc <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d914      	bls.n	800184a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d10d      	bne.n	800184a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001832:	f043 0210 	orr.w	r2, r3, #16
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183e:	f043 0201 	orr.w	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e007      	b.n	800185a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b01      	cmp	r3, #1
 8001856:	d0dc      	beq.n	8001812 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db0a      	blt.n	80018f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	@ (8001914 <__NVIC_SetPriority+0x4c>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f0:	e00a      	b.n	8001908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4908      	ldr	r1, [pc, #32]	@ (8001918 <__NVIC_SetPriority+0x50>)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	3b04      	subs	r3, #4
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	440b      	add	r3, r1
 8001906:	761a      	strb	r2, [r3, #24]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	@ 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f1c3 0307 	rsb	r3, r3, #7
 8001936:	2b04      	cmp	r3, #4
 8001938:	bf28      	it	cs
 800193a:	2304      	movcs	r3, #4
 800193c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3304      	adds	r3, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	d902      	bls.n	800194c <NVIC_EncodePriority+0x30>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3b03      	subs	r3, #3
 800194a:	e000      	b.n	800194e <NVIC_EncodePriority+0x32>
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43d9      	mvns	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	4313      	orrs	r3, r2
         );
}
 8001976:	4618      	mov	r0, r3
 8001978:	3724      	adds	r7, #36	@ 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff90 	bl	80018c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff49 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff5e 	bl	80018ac <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff90 	bl	800191c <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5f 	bl	80018c8 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffb0 	bl	8001980 <SysTick_Config>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b08b      	sub	sp, #44	@ 0x2c
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3e:	e169      	b.n	8001d14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a40:	2201      	movs	r2, #1
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	f040 8158 	bne.w	8001d0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4a9a      	ldr	r2, [pc, #616]	@ (8001ccc <HAL_GPIO_Init+0x2a0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d05e      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a68:	4a98      	ldr	r2, [pc, #608]	@ (8001ccc <HAL_GPIO_Init+0x2a0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d875      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a6e:	4a98      	ldr	r2, [pc, #608]	@ (8001cd0 <HAL_GPIO_Init+0x2a4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d058      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a74:	4a96      	ldr	r2, [pc, #600]	@ (8001cd0 <HAL_GPIO_Init+0x2a4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d86f      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a7a:	4a96      	ldr	r2, [pc, #600]	@ (8001cd4 <HAL_GPIO_Init+0x2a8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d052      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a80:	4a94      	ldr	r2, [pc, #592]	@ (8001cd4 <HAL_GPIO_Init+0x2a8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d869      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a86:	4a94      	ldr	r2, [pc, #592]	@ (8001cd8 <HAL_GPIO_Init+0x2ac>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d04c      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a8c:	4a92      	ldr	r2, [pc, #584]	@ (8001cd8 <HAL_GPIO_Init+0x2ac>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d863      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a92:	4a92      	ldr	r2, [pc, #584]	@ (8001cdc <HAL_GPIO_Init+0x2b0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d046      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a98:	4a90      	ldr	r2, [pc, #576]	@ (8001cdc <HAL_GPIO_Init+0x2b0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d85d      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a9e:	2b12      	cmp	r3, #18
 8001aa0:	d82a      	bhi.n	8001af8 <HAL_GPIO_Init+0xcc>
 8001aa2:	2b12      	cmp	r3, #18
 8001aa4:	d859      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8001aac <HAL_GPIO_Init+0x80>)
 8001aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aac:	08001b27 	.word	0x08001b27
 8001ab0:	08001b01 	.word	0x08001b01
 8001ab4:	08001b13 	.word	0x08001b13
 8001ab8:	08001b55 	.word	0x08001b55
 8001abc:	08001b5b 	.word	0x08001b5b
 8001ac0:	08001b5b 	.word	0x08001b5b
 8001ac4:	08001b5b 	.word	0x08001b5b
 8001ac8:	08001b5b 	.word	0x08001b5b
 8001acc:	08001b5b 	.word	0x08001b5b
 8001ad0:	08001b5b 	.word	0x08001b5b
 8001ad4:	08001b5b 	.word	0x08001b5b
 8001ad8:	08001b5b 	.word	0x08001b5b
 8001adc:	08001b5b 	.word	0x08001b5b
 8001ae0:	08001b5b 	.word	0x08001b5b
 8001ae4:	08001b5b 	.word	0x08001b5b
 8001ae8:	08001b5b 	.word	0x08001b5b
 8001aec:	08001b5b 	.word	0x08001b5b
 8001af0:	08001b09 	.word	0x08001b09
 8001af4:	08001b1d 	.word	0x08001b1d
 8001af8:	4a79      	ldr	r2, [pc, #484]	@ (8001ce0 <HAL_GPIO_Init+0x2b4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d013      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001afe:	e02c      	b.n	8001b5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	623b      	str	r3, [r7, #32]
          break;
 8001b06:	e029      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	623b      	str	r3, [r7, #32]
          break;
 8001b10:	e024      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	3308      	adds	r3, #8
 8001b18:	623b      	str	r3, [r7, #32]
          break;
 8001b1a:	e01f      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	330c      	adds	r3, #12
 8001b22:	623b      	str	r3, [r7, #32]
          break;
 8001b24:	e01a      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	623b      	str	r3, [r7, #32]
          break;
 8001b32:	e013      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	611a      	str	r2, [r3, #16]
          break;
 8001b46:	e009      	b.n	8001b5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b48:	2308      	movs	r3, #8
 8001b4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	615a      	str	r2, [r3, #20]
          break;
 8001b52:	e003      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b54:	2300      	movs	r3, #0
 8001b56:	623b      	str	r3, [r7, #32]
          break;
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          break;
 8001b5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2bff      	cmp	r3, #255	@ 0xff
 8001b60:	d801      	bhi.n	8001b66 <HAL_GPIO_Init+0x13a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	e001      	b.n	8001b6a <HAL_GPIO_Init+0x13e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2bff      	cmp	r3, #255	@ 0xff
 8001b70:	d802      	bhi.n	8001b78 <HAL_GPIO_Init+0x14c>
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	e002      	b.n	8001b7e <HAL_GPIO_Init+0x152>
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	3b08      	subs	r3, #8
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	210f      	movs	r1, #15
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	6a39      	ldr	r1, [r7, #32]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 80b1 	beq.w	8001d0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bac:	4b4d      	ldr	r3, [pc, #308]	@ (8001ce4 <HAL_GPIO_Init+0x2b8>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ce4 <HAL_GPIO_Init+0x2b8>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce4 <HAL_GPIO_Init+0x2b8>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bc4:	4a48      	ldr	r2, [pc, #288]	@ (8001ce8 <HAL_GPIO_Init+0x2bc>)
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a40      	ldr	r2, [pc, #256]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <HAL_GPIO_Init+0x1ec>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a3f      	ldr	r2, [pc, #252]	@ (8001cf0 <HAL_GPIO_Init+0x2c4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d00d      	beq.n	8001c14 <HAL_GPIO_Init+0x1e8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a3e      	ldr	r2, [pc, #248]	@ (8001cf4 <HAL_GPIO_Init+0x2c8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d007      	beq.n	8001c10 <HAL_GPIO_Init+0x1e4>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a3d      	ldr	r2, [pc, #244]	@ (8001cf8 <HAL_GPIO_Init+0x2cc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d101      	bne.n	8001c0c <HAL_GPIO_Init+0x1e0>
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e006      	b.n	8001c1a <HAL_GPIO_Init+0x1ee>
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	e004      	b.n	8001c1a <HAL_GPIO_Init+0x1ee>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e002      	b.n	8001c1a <HAL_GPIO_Init+0x1ee>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <HAL_GPIO_Init+0x1ee>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c1c:	f002 0203 	and.w	r2, r2, #3
 8001c20:	0092      	lsls	r2, r2, #2
 8001c22:	4093      	lsls	r3, r2
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c2a:	492f      	ldr	r1, [pc, #188]	@ (8001ce8 <HAL_GPIO_Init+0x2bc>)
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d006      	beq.n	8001c52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c44:	4b2d      	ldr	r3, [pc, #180]	@ (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	492c      	ldr	r1, [pc, #176]	@ (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c52:	4b2a      	ldr	r3, [pc, #168]	@ (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4928      	ldr	r1, [pc, #160]	@ (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d006      	beq.n	8001c7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c6c:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	4922      	ldr	r1, [pc, #136]	@ (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60cb      	str	r3, [r1, #12]
 8001c78:	e006      	b.n	8001c88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c7a:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	491e      	ldr	r1, [pc, #120]	@ (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c94:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	4918      	ldr	r1, [pc, #96]	@ (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ca2:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	4914      	ldr	r1, [pc, #80]	@ (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d021      	beq.n	8001d00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	490e      	ldr	r1, [pc, #56]	@ (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]
 8001cc8:	e021      	b.n	8001d0e <HAL_GPIO_Init+0x2e2>
 8001cca:	bf00      	nop
 8001ccc:	10320000 	.word	0x10320000
 8001cd0:	10310000 	.word	0x10310000
 8001cd4:	10220000 	.word	0x10220000
 8001cd8:	10210000 	.word	0x10210000
 8001cdc:	10120000 	.word	0x10120000
 8001ce0:	10110000 	.word	0x10110000
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	40010800 	.word	0x40010800
 8001cf0:	40010c00 	.word	0x40010c00
 8001cf4:	40011000 	.word	0x40011000
 8001cf8:	40011400 	.word	0x40011400
 8001cfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <HAL_GPIO_Init+0x304>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	4909      	ldr	r1, [pc, #36]	@ (8001d30 <HAL_GPIO_Init+0x304>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	3301      	adds	r3, #1
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f47f ae8e 	bne.w	8001a40 <HAL_GPIO_Init+0x14>
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	372c      	adds	r7, #44	@ 0x2c
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	40010400 	.word	0x40010400

08001d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
 8001d40:	4613      	mov	r3, r2
 8001d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d44:	787b      	ldrb	r3, [r7, #1]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d50:	e003      	b.n	8001d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d52:	887b      	ldrh	r3, [r7, #2]
 8001d54:	041a      	lsls	r2, r3, #16
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	611a      	str	r2, [r3, #16]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e272      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8087 	beq.w	8001e92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d84:	4b92      	ldr	r3, [pc, #584]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d00c      	beq.n	8001daa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d90:	4b8f      	ldr	r3, [pc, #572]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d112      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x5e>
 8001d9c:	4b8c      	ldr	r3, [pc, #560]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001da8:	d10b      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001daa:	4b89      	ldr	r3, [pc, #548]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d06c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x12c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d168      	bne.n	8001e90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e24c      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x76>
 8001dcc:	4b80      	ldr	r3, [pc, #512]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a7f      	ldr	r2, [pc, #508]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	e02e      	b.n	8001e38 <HAL_RCC_OscConfig+0xd4>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x98>
 8001de2:	4b7b      	ldr	r3, [pc, #492]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7a      	ldr	r2, [pc, #488]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b78      	ldr	r3, [pc, #480]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a77      	ldr	r2, [pc, #476]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e01d      	b.n	8001e38 <HAL_RCC_OscConfig+0xd4>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0xbc>
 8001e06:	4b72      	ldr	r3, [pc, #456]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a71      	ldr	r2, [pc, #452]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4b6f      	ldr	r3, [pc, #444]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a6e      	ldr	r2, [pc, #440]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e00b      	b.n	8001e38 <HAL_RCC_OscConfig+0xd4>
 8001e20:	4b6b      	ldr	r3, [pc, #428]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a6a      	ldr	r2, [pc, #424]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b68      	ldr	r3, [pc, #416]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a67      	ldr	r2, [pc, #412]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d013      	beq.n	8001e68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff f9bc 	bl	80011bc <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff f9b8 	bl	80011bc <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	@ 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e200      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	4b5d      	ldr	r3, [pc, #372]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0xe4>
 8001e66:	e014      	b.n	8001e92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff f9a8 	bl	80011bc <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff f9a4 	bl	80011bc <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	@ 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e1ec      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	4b53      	ldr	r3, [pc, #332]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x10c>
 8001e8e:	e000      	b.n	8001e92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d063      	beq.n	8001f66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eaa:	4b49      	ldr	r3, [pc, #292]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d11c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x18c>
 8001eb6:	4b46      	ldr	r3, [pc, #280]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d116      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec2:	4b43      	ldr	r3, [pc, #268]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <HAL_RCC_OscConfig+0x176>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e1c0      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eda:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4939      	ldr	r1, [pc, #228]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eee:	e03a      	b.n	8001f66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d020      	beq.n	8001f3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef8:	4b36      	ldr	r3, [pc, #216]	@ (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7ff f95d 	bl	80011bc <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f06:	f7ff f959 	bl	80011bc <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e1a1      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4927      	ldr	r1, [pc, #156]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	600b      	str	r3, [r1, #0]
 8001f38:	e015      	b.n	8001f66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3a:	4b26      	ldr	r3, [pc, #152]	@ (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff f93c 	bl	80011bc <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f48:	f7ff f938 	bl	80011bc <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e180      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d03a      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d019      	beq.n	8001fae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7a:	4b17      	ldr	r3, [pc, #92]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f80:	f7ff f91c 	bl	80011bc <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f88:	f7ff f918 	bl	80011bc <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e160      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f000 fa9c 	bl	80024e4 <RCC_Delay>
 8001fac:	e01c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fae:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb4:	f7ff f902 	bl	80011bc <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fba:	e00f      	b.n	8001fdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fbc:	f7ff f8fe 	bl	80011bc <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d908      	bls.n	8001fdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e146      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	42420000 	.word	0x42420000
 8001fd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fdc:	4b92      	ldr	r3, [pc, #584]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1e9      	bne.n	8001fbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80a6 	beq.w	8002142 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffa:	4b8b      	ldr	r3, [pc, #556]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10d      	bne.n	8002022 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b88      	ldr	r3, [pc, #544]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a87      	ldr	r2, [pc, #540]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b85      	ldr	r3, [pc, #532]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201e:	2301      	movs	r3, #1
 8002020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002022:	4b82      	ldr	r3, [pc, #520]	@ (800222c <HAL_RCC_OscConfig+0x4c8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d118      	bne.n	8002060 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202e:	4b7f      	ldr	r3, [pc, #508]	@ (800222c <HAL_RCC_OscConfig+0x4c8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a7e      	ldr	r2, [pc, #504]	@ (800222c <HAL_RCC_OscConfig+0x4c8>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203a:	f7ff f8bf 	bl	80011bc <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002042:	f7ff f8bb 	bl	80011bc <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b64      	cmp	r3, #100	@ 0x64
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e103      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	4b75      	ldr	r3, [pc, #468]	@ (800222c <HAL_RCC_OscConfig+0x4c8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d106      	bne.n	8002076 <HAL_RCC_OscConfig+0x312>
 8002068:	4b6f      	ldr	r3, [pc, #444]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4a6e      	ldr	r2, [pc, #440]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	e02d      	b.n	80020d2 <HAL_RCC_OscConfig+0x36e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x334>
 800207e:	4b6a      	ldr	r3, [pc, #424]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4a69      	ldr	r2, [pc, #420]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6213      	str	r3, [r2, #32]
 800208a:	4b67      	ldr	r3, [pc, #412]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4a66      	ldr	r2, [pc, #408]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	6213      	str	r3, [r2, #32]
 8002096:	e01c      	b.n	80020d2 <HAL_RCC_OscConfig+0x36e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d10c      	bne.n	80020ba <HAL_RCC_OscConfig+0x356>
 80020a0:	4b61      	ldr	r3, [pc, #388]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a60      	ldr	r2, [pc, #384]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6213      	str	r3, [r2, #32]
 80020ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6213      	str	r3, [r2, #32]
 80020b8:	e00b      	b.n	80020d2 <HAL_RCC_OscConfig+0x36e>
 80020ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4a5a      	ldr	r2, [pc, #360]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6213      	str	r3, [r2, #32]
 80020c6:	4b58      	ldr	r3, [pc, #352]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4a57      	ldr	r2, [pc, #348]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	f023 0304 	bic.w	r3, r3, #4
 80020d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d015      	beq.n	8002106 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7ff f86f 	bl	80011bc <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7ff f86b 	bl	80011bc <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e0b1      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ee      	beq.n	80020e2 <HAL_RCC_OscConfig+0x37e>
 8002104:	e014      	b.n	8002130 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002106:	f7ff f859 	bl	80011bc <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7ff f855 	bl	80011bc <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e09b      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	4b40      	ldr	r3, [pc, #256]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ee      	bne.n	800210e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002130:	7dfb      	ldrb	r3, [r7, #23]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b3c      	ldr	r3, [pc, #240]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a3b      	ldr	r2, [pc, #236]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002140:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8087 	beq.w	800225a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800214c:	4b36      	ldr	r3, [pc, #216]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d061      	beq.n	800221c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d146      	bne.n	80021ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b33      	ldr	r3, [pc, #204]	@ (8002230 <HAL_RCC_OscConfig+0x4cc>)
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff f829 	bl	80011bc <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff f825 	bl	80011bc <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e06d      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002180:	4b29      	ldr	r3, [pc, #164]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f0      	bne.n	800216e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002194:	d108      	bne.n	80021a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002196:	4b24      	ldr	r3, [pc, #144]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4921      	ldr	r1, [pc, #132]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a19      	ldr	r1, [r3, #32]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b8:	430b      	orrs	r3, r1
 80021ba:	491b      	ldr	r1, [pc, #108]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <HAL_RCC_OscConfig+0x4cc>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7fe fff9 	bl	80011bc <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ce:	f7fe fff5 	bl	80011bc <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e03d      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e0:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x46a>
 80021ec:	e035      	b.n	800225a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <HAL_RCC_OscConfig+0x4cc>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe ffe2 	bl	80011bc <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fc:	f7fe ffde 	bl	80011bc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e026      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x498>
 800221a:	e01e      	b.n	800225a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e019      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
 8002228:	40021000 	.word	0x40021000
 800222c:	40007000 	.word	0x40007000
 8002230:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_RCC_OscConfig+0x500>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	429a      	cmp	r2, r3
 8002246:	d106      	bne.n	8002256 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000

08002268 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0d0      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800227c:	4b6a      	ldr	r3, [pc, #424]	@ (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d910      	bls.n	80022ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b67      	ldr	r3, [pc, #412]	@ (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 0207 	bic.w	r2, r3, #7
 8002292:	4965      	ldr	r1, [pc, #404]	@ (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b63      	ldr	r3, [pc, #396]	@ (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0b8      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d020      	beq.n	80022fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c4:	4b59      	ldr	r3, [pc, #356]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a58      	ldr	r2, [pc, #352]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022dc:	4b53      	ldr	r3, [pc, #332]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a52      	ldr	r2, [pc, #328]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e8:	4b50      	ldr	r3, [pc, #320]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	494d      	ldr	r1, [pc, #308]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d040      	beq.n	8002388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	4b47      	ldr	r3, [pc, #284]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d115      	bne.n	8002346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e07f      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d107      	bne.n	8002336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002326:	4b41      	ldr	r3, [pc, #260]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e073      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002336:	4b3d      	ldr	r3, [pc, #244]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e06b      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002346:	4b39      	ldr	r3, [pc, #228]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f023 0203 	bic.w	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4936      	ldr	r1, [pc, #216]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002358:	f7fe ff30 	bl	80011bc <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	e00a      	b.n	8002376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002360:	f7fe ff2c 	bl	80011bc <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e053      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	4b2d      	ldr	r3, [pc, #180]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 020c 	and.w	r2, r3, #12
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	429a      	cmp	r2, r3
 8002386:	d1eb      	bne.n	8002360 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002388:	4b27      	ldr	r3, [pc, #156]	@ (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d210      	bcs.n	80023b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b24      	ldr	r3, [pc, #144]	@ (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0207 	bic.w	r2, r3, #7
 800239e:	4922      	ldr	r1, [pc, #136]	@ (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e032      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c4:	4b19      	ldr	r3, [pc, #100]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4916      	ldr	r1, [pc, #88]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023e2:	4b12      	ldr	r3, [pc, #72]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	490e      	ldr	r1, [pc, #56]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023f6:	f000 f821 	bl	800243c <HAL_RCC_GetSysClockFreq>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	490a      	ldr	r1, [pc, #40]	@ (8002430 <HAL_RCC_ClockConfig+0x1c8>)
 8002408:	5ccb      	ldrb	r3, [r1, r3]
 800240a:	fa22 f303 	lsr.w	r3, r2, r3
 800240e:	4a09      	ldr	r2, [pc, #36]	@ (8002434 <HAL_RCC_ClockConfig+0x1cc>)
 8002410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002412:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <HAL_RCC_ClockConfig+0x1d0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fe8e 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40022000 	.word	0x40022000
 800242c:	40021000 	.word	0x40021000
 8002430:	08006d60 	.word	0x08006d60
 8002434:	20000000 	.word	0x20000000
 8002438:	20000004 	.word	0x20000004

0800243c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	2300      	movs	r3, #0
 8002450:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002456:	4b1e      	ldr	r3, [pc, #120]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b04      	cmp	r3, #4
 8002464:	d002      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x30>
 8002466:	2b08      	cmp	r3, #8
 8002468:	d003      	beq.n	8002472 <HAL_RCC_GetSysClockFreq+0x36>
 800246a:	e027      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800246c:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800246e:	613b      	str	r3, [r7, #16]
      break;
 8002470:	e027      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	0c9b      	lsrs	r3, r3, #18
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	4a17      	ldr	r2, [pc, #92]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800247c:	5cd3      	ldrb	r3, [r2, r3]
 800247e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d010      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800248a:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	0c5b      	lsrs	r3, r3, #17
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	4a11      	ldr	r2, [pc, #68]	@ (80024dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a0d      	ldr	r2, [pc, #52]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800249e:	fb03 f202 	mul.w	r2, r3, r2
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	e004      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a0c      	ldr	r2, [pc, #48]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	613b      	str	r3, [r7, #16]
      break;
 80024ba:	e002      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80024be:	613b      	str	r3, [r7, #16]
      break;
 80024c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c2:	693b      	ldr	r3, [r7, #16]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	007a1200 	.word	0x007a1200
 80024d8:	08006d70 	.word	0x08006d70
 80024dc:	08006d80 	.word	0x08006d80
 80024e0:	003d0900 	.word	0x003d0900

080024e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <RCC_Delay+0x34>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <RCC_Delay+0x38>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0a5b      	lsrs	r3, r3, #9
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002500:	bf00      	nop
  }
  while (Delay --);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1e5a      	subs	r2, r3, #1
 8002506:	60fa      	str	r2, [r7, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f9      	bne.n	8002500 <RCC_Delay+0x1c>
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	20000000 	.word	0x20000000
 800251c:	10624dd3 	.word	0x10624dd3

08002520 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d07d      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800253c:	2300      	movs	r3, #0
 800253e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002540:	4b4f      	ldr	r3, [pc, #316]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10d      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254c:	4b4c      	ldr	r3, [pc, #304]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	4a4b      	ldr	r2, [pc, #300]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002556:	61d3      	str	r3, [r2, #28]
 8002558:	4b49      	ldr	r3, [pc, #292]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002564:	2301      	movs	r3, #1
 8002566:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	4b46      	ldr	r3, [pc, #280]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d118      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002574:	4b43      	ldr	r3, [pc, #268]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a42      	ldr	r2, [pc, #264]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800257a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800257e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002580:	f7fe fe1c 	bl	80011bc <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002586:	e008      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002588:	f7fe fe18 	bl	80011bc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	@ 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e06d      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259a:	4b3a      	ldr	r3, [pc, #232]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025a6:	4b36      	ldr	r3, [pc, #216]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d02e      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d027      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025da:	4a29      	ldr	r2, [pc, #164]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d014      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7fe fde7 	bl	80011bc <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7fe fde3 	bl	80011bc <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e036      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002608:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ee      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002614:	4b1a      	ldr	r3, [pc, #104]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4917      	ldr	r1, [pc, #92]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002622:	4313      	orrs	r3, r2
 8002624:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002626:	7dfb      	ldrb	r3, [r7, #23]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d105      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262c:	4b14      	ldr	r3, [pc, #80]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4a13      	ldr	r2, [pc, #76]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002636:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002644:	4b0e      	ldr	r3, [pc, #56]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	490b      	ldr	r1, [pc, #44]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002662:	4b07      	ldr	r3, [pc, #28]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	4904      	ldr	r1, [pc, #16]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
 8002688:	42420440 	.word	0x42420440

0800268c <__cvt>:
 800268c:	2b00      	cmp	r3, #0
 800268e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002692:	461d      	mov	r5, r3
 8002694:	bfbb      	ittet	lt
 8002696:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800269a:	461d      	movlt	r5, r3
 800269c:	2300      	movge	r3, #0
 800269e:	232d      	movlt	r3, #45	@ 0x2d
 80026a0:	b088      	sub	sp, #32
 80026a2:	4614      	mov	r4, r2
 80026a4:	bfb8      	it	lt
 80026a6:	4614      	movlt	r4, r2
 80026a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80026aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80026ac:	7013      	strb	r3, [r2, #0]
 80026ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80026b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80026b4:	f023 0820 	bic.w	r8, r3, #32
 80026b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80026bc:	d005      	beq.n	80026ca <__cvt+0x3e>
 80026be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80026c2:	d100      	bne.n	80026c6 <__cvt+0x3a>
 80026c4:	3601      	adds	r6, #1
 80026c6:	2302      	movs	r3, #2
 80026c8:	e000      	b.n	80026cc <__cvt+0x40>
 80026ca:	2303      	movs	r3, #3
 80026cc:	aa07      	add	r2, sp, #28
 80026ce:	9204      	str	r2, [sp, #16]
 80026d0:	aa06      	add	r2, sp, #24
 80026d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80026d6:	e9cd 3600 	strd	r3, r6, [sp]
 80026da:	4622      	mov	r2, r4
 80026dc:	462b      	mov	r3, r5
 80026de:	f001 f883 	bl	80037e8 <_dtoa_r>
 80026e2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80026e6:	4607      	mov	r7, r0
 80026e8:	d119      	bne.n	800271e <__cvt+0x92>
 80026ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80026ec:	07db      	lsls	r3, r3, #31
 80026ee:	d50e      	bpl.n	800270e <__cvt+0x82>
 80026f0:	eb00 0906 	add.w	r9, r0, r6
 80026f4:	2200      	movs	r2, #0
 80026f6:	2300      	movs	r3, #0
 80026f8:	4620      	mov	r0, r4
 80026fa:	4629      	mov	r1, r5
 80026fc:	f7fe f954 	bl	80009a8 <__aeabi_dcmpeq>
 8002700:	b108      	cbz	r0, 8002706 <__cvt+0x7a>
 8002702:	f8cd 901c 	str.w	r9, [sp, #28]
 8002706:	2230      	movs	r2, #48	@ 0x30
 8002708:	9b07      	ldr	r3, [sp, #28]
 800270a:	454b      	cmp	r3, r9
 800270c:	d31e      	bcc.n	800274c <__cvt+0xc0>
 800270e:	4638      	mov	r0, r7
 8002710:	9b07      	ldr	r3, [sp, #28]
 8002712:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002714:	1bdb      	subs	r3, r3, r7
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	b008      	add	sp, #32
 800271a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800271e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002722:	eb00 0906 	add.w	r9, r0, r6
 8002726:	d1e5      	bne.n	80026f4 <__cvt+0x68>
 8002728:	7803      	ldrb	r3, [r0, #0]
 800272a:	2b30      	cmp	r3, #48	@ 0x30
 800272c:	d10a      	bne.n	8002744 <__cvt+0xb8>
 800272e:	2200      	movs	r2, #0
 8002730:	2300      	movs	r3, #0
 8002732:	4620      	mov	r0, r4
 8002734:	4629      	mov	r1, r5
 8002736:	f7fe f937 	bl	80009a8 <__aeabi_dcmpeq>
 800273a:	b918      	cbnz	r0, 8002744 <__cvt+0xb8>
 800273c:	f1c6 0601 	rsb	r6, r6, #1
 8002740:	f8ca 6000 	str.w	r6, [sl]
 8002744:	f8da 3000 	ldr.w	r3, [sl]
 8002748:	4499      	add	r9, r3
 800274a:	e7d3      	b.n	80026f4 <__cvt+0x68>
 800274c:	1c59      	adds	r1, r3, #1
 800274e:	9107      	str	r1, [sp, #28]
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	e7d9      	b.n	8002708 <__cvt+0x7c>

08002754 <__exponent>:
 8002754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002756:	2900      	cmp	r1, #0
 8002758:	bfb6      	itet	lt
 800275a:	232d      	movlt	r3, #45	@ 0x2d
 800275c:	232b      	movge	r3, #43	@ 0x2b
 800275e:	4249      	neglt	r1, r1
 8002760:	2909      	cmp	r1, #9
 8002762:	7002      	strb	r2, [r0, #0]
 8002764:	7043      	strb	r3, [r0, #1]
 8002766:	dd29      	ble.n	80027bc <__exponent+0x68>
 8002768:	f10d 0307 	add.w	r3, sp, #7
 800276c:	461d      	mov	r5, r3
 800276e:	270a      	movs	r7, #10
 8002770:	fbb1 f6f7 	udiv	r6, r1, r7
 8002774:	461a      	mov	r2, r3
 8002776:	fb07 1416 	mls	r4, r7, r6, r1
 800277a:	3430      	adds	r4, #48	@ 0x30
 800277c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002780:	460c      	mov	r4, r1
 8002782:	2c63      	cmp	r4, #99	@ 0x63
 8002784:	4631      	mov	r1, r6
 8002786:	f103 33ff 	add.w	r3, r3, #4294967295
 800278a:	dcf1      	bgt.n	8002770 <__exponent+0x1c>
 800278c:	3130      	adds	r1, #48	@ 0x30
 800278e:	1e94      	subs	r4, r2, #2
 8002790:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002794:	4623      	mov	r3, r4
 8002796:	1c41      	adds	r1, r0, #1
 8002798:	42ab      	cmp	r3, r5
 800279a:	d30a      	bcc.n	80027b2 <__exponent+0x5e>
 800279c:	f10d 0309 	add.w	r3, sp, #9
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	42ac      	cmp	r4, r5
 80027a4:	bf88      	it	hi
 80027a6:	2300      	movhi	r3, #0
 80027a8:	3302      	adds	r3, #2
 80027aa:	4403      	add	r3, r0
 80027ac:	1a18      	subs	r0, r3, r0
 80027ae:	b003      	add	sp, #12
 80027b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80027b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80027ba:	e7ed      	b.n	8002798 <__exponent+0x44>
 80027bc:	2330      	movs	r3, #48	@ 0x30
 80027be:	3130      	adds	r1, #48	@ 0x30
 80027c0:	7083      	strb	r3, [r0, #2]
 80027c2:	70c1      	strb	r1, [r0, #3]
 80027c4:	1d03      	adds	r3, r0, #4
 80027c6:	e7f1      	b.n	80027ac <__exponent+0x58>

080027c8 <_printf_float>:
 80027c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027cc:	b091      	sub	sp, #68	@ 0x44
 80027ce:	460c      	mov	r4, r1
 80027d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80027d4:	4616      	mov	r6, r2
 80027d6:	461f      	mov	r7, r3
 80027d8:	4605      	mov	r5, r0
 80027da:	f000 fef1 	bl	80035c0 <_localeconv_r>
 80027de:	6803      	ldr	r3, [r0, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	9308      	str	r3, [sp, #32]
 80027e4:	f7fd fcb4 	bl	8000150 <strlen>
 80027e8:	2300      	movs	r3, #0
 80027ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80027ec:	f8d8 3000 	ldr.w	r3, [r8]
 80027f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80027f2:	3307      	adds	r3, #7
 80027f4:	f023 0307 	bic.w	r3, r3, #7
 80027f8:	f103 0208 	add.w	r2, r3, #8
 80027fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002800:	f8d4 b000 	ldr.w	fp, [r4]
 8002804:	f8c8 2000 	str.w	r2, [r8]
 8002808:	e9d3 8900 	ldrd	r8, r9, [r3]
 800280c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002812:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002816:	f04f 32ff 	mov.w	r2, #4294967295
 800281a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800281e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002822:	4b9c      	ldr	r3, [pc, #624]	@ (8002a94 <_printf_float+0x2cc>)
 8002824:	f7fe f8f2 	bl	8000a0c <__aeabi_dcmpun>
 8002828:	bb70      	cbnz	r0, 8002888 <_printf_float+0xc0>
 800282a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800282e:	f04f 32ff 	mov.w	r2, #4294967295
 8002832:	4b98      	ldr	r3, [pc, #608]	@ (8002a94 <_printf_float+0x2cc>)
 8002834:	f7fe f8cc 	bl	80009d0 <__aeabi_dcmple>
 8002838:	bb30      	cbnz	r0, 8002888 <_printf_float+0xc0>
 800283a:	2200      	movs	r2, #0
 800283c:	2300      	movs	r3, #0
 800283e:	4640      	mov	r0, r8
 8002840:	4649      	mov	r1, r9
 8002842:	f7fe f8bb 	bl	80009bc <__aeabi_dcmplt>
 8002846:	b110      	cbz	r0, 800284e <_printf_float+0x86>
 8002848:	232d      	movs	r3, #45	@ 0x2d
 800284a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800284e:	4a92      	ldr	r2, [pc, #584]	@ (8002a98 <_printf_float+0x2d0>)
 8002850:	4b92      	ldr	r3, [pc, #584]	@ (8002a9c <_printf_float+0x2d4>)
 8002852:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002856:	bf94      	ite	ls
 8002858:	4690      	movls	r8, r2
 800285a:	4698      	movhi	r8, r3
 800285c:	2303      	movs	r3, #3
 800285e:	f04f 0900 	mov.w	r9, #0
 8002862:	6123      	str	r3, [r4, #16]
 8002864:	f02b 0304 	bic.w	r3, fp, #4
 8002868:	6023      	str	r3, [r4, #0]
 800286a:	4633      	mov	r3, r6
 800286c:	4621      	mov	r1, r4
 800286e:	4628      	mov	r0, r5
 8002870:	9700      	str	r7, [sp, #0]
 8002872:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002874:	f000 f9d4 	bl	8002c20 <_printf_common>
 8002878:	3001      	adds	r0, #1
 800287a:	f040 8090 	bne.w	800299e <_printf_float+0x1d6>
 800287e:	f04f 30ff 	mov.w	r0, #4294967295
 8002882:	b011      	add	sp, #68	@ 0x44
 8002884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002888:	4642      	mov	r2, r8
 800288a:	464b      	mov	r3, r9
 800288c:	4640      	mov	r0, r8
 800288e:	4649      	mov	r1, r9
 8002890:	f7fe f8bc 	bl	8000a0c <__aeabi_dcmpun>
 8002894:	b148      	cbz	r0, 80028aa <_printf_float+0xe2>
 8002896:	464b      	mov	r3, r9
 8002898:	2b00      	cmp	r3, #0
 800289a:	bfb8      	it	lt
 800289c:	232d      	movlt	r3, #45	@ 0x2d
 800289e:	4a80      	ldr	r2, [pc, #512]	@ (8002aa0 <_printf_float+0x2d8>)
 80028a0:	bfb8      	it	lt
 80028a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80028a6:	4b7f      	ldr	r3, [pc, #508]	@ (8002aa4 <_printf_float+0x2dc>)
 80028a8:	e7d3      	b.n	8002852 <_printf_float+0x8a>
 80028aa:	6863      	ldr	r3, [r4, #4]
 80028ac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	d13f      	bne.n	8002934 <_printf_float+0x16c>
 80028b4:	2306      	movs	r3, #6
 80028b6:	6063      	str	r3, [r4, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80028be:	6023      	str	r3, [r4, #0]
 80028c0:	9206      	str	r2, [sp, #24]
 80028c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80028c4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80028c8:	aa0d      	add	r2, sp, #52	@ 0x34
 80028ca:	9203      	str	r2, [sp, #12]
 80028cc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80028d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80028d4:	6863      	ldr	r3, [r4, #4]
 80028d6:	4642      	mov	r2, r8
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	4628      	mov	r0, r5
 80028dc:	464b      	mov	r3, r9
 80028de:	910a      	str	r1, [sp, #40]	@ 0x28
 80028e0:	f7ff fed4 	bl	800268c <__cvt>
 80028e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80028e6:	4680      	mov	r8, r0
 80028e8:	2947      	cmp	r1, #71	@ 0x47
 80028ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80028ec:	d128      	bne.n	8002940 <_printf_float+0x178>
 80028ee:	1cc8      	adds	r0, r1, #3
 80028f0:	db02      	blt.n	80028f8 <_printf_float+0x130>
 80028f2:	6863      	ldr	r3, [r4, #4]
 80028f4:	4299      	cmp	r1, r3
 80028f6:	dd40      	ble.n	800297a <_printf_float+0x1b2>
 80028f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80028fc:	fa5f fa8a 	uxtb.w	sl, sl
 8002900:	4652      	mov	r2, sl
 8002902:	3901      	subs	r1, #1
 8002904:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002908:	910d      	str	r1, [sp, #52]	@ 0x34
 800290a:	f7ff ff23 	bl	8002754 <__exponent>
 800290e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002910:	4681      	mov	r9, r0
 8002912:	1813      	adds	r3, r2, r0
 8002914:	2a01      	cmp	r2, #1
 8002916:	6123      	str	r3, [r4, #16]
 8002918:	dc02      	bgt.n	8002920 <_printf_float+0x158>
 800291a:	6822      	ldr	r2, [r4, #0]
 800291c:	07d2      	lsls	r2, r2, #31
 800291e:	d501      	bpl.n	8002924 <_printf_float+0x15c>
 8002920:	3301      	adds	r3, #1
 8002922:	6123      	str	r3, [r4, #16]
 8002924:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002928:	2b00      	cmp	r3, #0
 800292a:	d09e      	beq.n	800286a <_printf_float+0xa2>
 800292c:	232d      	movs	r3, #45	@ 0x2d
 800292e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002932:	e79a      	b.n	800286a <_printf_float+0xa2>
 8002934:	2947      	cmp	r1, #71	@ 0x47
 8002936:	d1bf      	bne.n	80028b8 <_printf_float+0xf0>
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1bd      	bne.n	80028b8 <_printf_float+0xf0>
 800293c:	2301      	movs	r3, #1
 800293e:	e7ba      	b.n	80028b6 <_printf_float+0xee>
 8002940:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002944:	d9dc      	bls.n	8002900 <_printf_float+0x138>
 8002946:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800294a:	d118      	bne.n	800297e <_printf_float+0x1b6>
 800294c:	2900      	cmp	r1, #0
 800294e:	6863      	ldr	r3, [r4, #4]
 8002950:	dd0b      	ble.n	800296a <_printf_float+0x1a2>
 8002952:	6121      	str	r1, [r4, #16]
 8002954:	b913      	cbnz	r3, 800295c <_printf_float+0x194>
 8002956:	6822      	ldr	r2, [r4, #0]
 8002958:	07d0      	lsls	r0, r2, #31
 800295a:	d502      	bpl.n	8002962 <_printf_float+0x19a>
 800295c:	3301      	adds	r3, #1
 800295e:	440b      	add	r3, r1
 8002960:	6123      	str	r3, [r4, #16]
 8002962:	f04f 0900 	mov.w	r9, #0
 8002966:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002968:	e7dc      	b.n	8002924 <_printf_float+0x15c>
 800296a:	b913      	cbnz	r3, 8002972 <_printf_float+0x1aa>
 800296c:	6822      	ldr	r2, [r4, #0]
 800296e:	07d2      	lsls	r2, r2, #31
 8002970:	d501      	bpl.n	8002976 <_printf_float+0x1ae>
 8002972:	3302      	adds	r3, #2
 8002974:	e7f4      	b.n	8002960 <_printf_float+0x198>
 8002976:	2301      	movs	r3, #1
 8002978:	e7f2      	b.n	8002960 <_printf_float+0x198>
 800297a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800297e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002980:	4299      	cmp	r1, r3
 8002982:	db05      	blt.n	8002990 <_printf_float+0x1c8>
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	6121      	str	r1, [r4, #16]
 8002988:	07d8      	lsls	r0, r3, #31
 800298a:	d5ea      	bpl.n	8002962 <_printf_float+0x19a>
 800298c:	1c4b      	adds	r3, r1, #1
 800298e:	e7e7      	b.n	8002960 <_printf_float+0x198>
 8002990:	2900      	cmp	r1, #0
 8002992:	bfcc      	ite	gt
 8002994:	2201      	movgt	r2, #1
 8002996:	f1c1 0202 	rsble	r2, r1, #2
 800299a:	4413      	add	r3, r2
 800299c:	e7e0      	b.n	8002960 <_printf_float+0x198>
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	055a      	lsls	r2, r3, #21
 80029a2:	d407      	bmi.n	80029b4 <_printf_float+0x1ec>
 80029a4:	6923      	ldr	r3, [r4, #16]
 80029a6:	4642      	mov	r2, r8
 80029a8:	4631      	mov	r1, r6
 80029aa:	4628      	mov	r0, r5
 80029ac:	47b8      	blx	r7
 80029ae:	3001      	adds	r0, #1
 80029b0:	d12b      	bne.n	8002a0a <_printf_float+0x242>
 80029b2:	e764      	b.n	800287e <_printf_float+0xb6>
 80029b4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80029b8:	f240 80dc 	bls.w	8002b74 <_printf_float+0x3ac>
 80029bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80029c0:	2200      	movs	r2, #0
 80029c2:	2300      	movs	r3, #0
 80029c4:	f7fd fff0 	bl	80009a8 <__aeabi_dcmpeq>
 80029c8:	2800      	cmp	r0, #0
 80029ca:	d033      	beq.n	8002a34 <_printf_float+0x26c>
 80029cc:	2301      	movs	r3, #1
 80029ce:	4631      	mov	r1, r6
 80029d0:	4628      	mov	r0, r5
 80029d2:	4a35      	ldr	r2, [pc, #212]	@ (8002aa8 <_printf_float+0x2e0>)
 80029d4:	47b8      	blx	r7
 80029d6:	3001      	adds	r0, #1
 80029d8:	f43f af51 	beq.w	800287e <_printf_float+0xb6>
 80029dc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80029e0:	4543      	cmp	r3, r8
 80029e2:	db02      	blt.n	80029ea <_printf_float+0x222>
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	07d8      	lsls	r0, r3, #31
 80029e8:	d50f      	bpl.n	8002a0a <_printf_float+0x242>
 80029ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80029ee:	4631      	mov	r1, r6
 80029f0:	4628      	mov	r0, r5
 80029f2:	47b8      	blx	r7
 80029f4:	3001      	adds	r0, #1
 80029f6:	f43f af42 	beq.w	800287e <_printf_float+0xb6>
 80029fa:	f04f 0900 	mov.w	r9, #0
 80029fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8002a02:	f104 0a1a 	add.w	sl, r4, #26
 8002a06:	45c8      	cmp	r8, r9
 8002a08:	dc09      	bgt.n	8002a1e <_printf_float+0x256>
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	079b      	lsls	r3, r3, #30
 8002a0e:	f100 8102 	bmi.w	8002c16 <_printf_float+0x44e>
 8002a12:	68e0      	ldr	r0, [r4, #12]
 8002a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002a16:	4298      	cmp	r0, r3
 8002a18:	bfb8      	it	lt
 8002a1a:	4618      	movlt	r0, r3
 8002a1c:	e731      	b.n	8002882 <_printf_float+0xba>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	4652      	mov	r2, sl
 8002a22:	4631      	mov	r1, r6
 8002a24:	4628      	mov	r0, r5
 8002a26:	47b8      	blx	r7
 8002a28:	3001      	adds	r0, #1
 8002a2a:	f43f af28 	beq.w	800287e <_printf_float+0xb6>
 8002a2e:	f109 0901 	add.w	r9, r9, #1
 8002a32:	e7e8      	b.n	8002a06 <_printf_float+0x23e>
 8002a34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	dc38      	bgt.n	8002aac <_printf_float+0x2e4>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	4631      	mov	r1, r6
 8002a3e:	4628      	mov	r0, r5
 8002a40:	4a19      	ldr	r2, [pc, #100]	@ (8002aa8 <_printf_float+0x2e0>)
 8002a42:	47b8      	blx	r7
 8002a44:	3001      	adds	r0, #1
 8002a46:	f43f af1a 	beq.w	800287e <_printf_float+0xb6>
 8002a4a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8002a4e:	ea59 0303 	orrs.w	r3, r9, r3
 8002a52:	d102      	bne.n	8002a5a <_printf_float+0x292>
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	07d9      	lsls	r1, r3, #31
 8002a58:	d5d7      	bpl.n	8002a0a <_printf_float+0x242>
 8002a5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002a5e:	4631      	mov	r1, r6
 8002a60:	4628      	mov	r0, r5
 8002a62:	47b8      	blx	r7
 8002a64:	3001      	adds	r0, #1
 8002a66:	f43f af0a 	beq.w	800287e <_printf_float+0xb6>
 8002a6a:	f04f 0a00 	mov.w	sl, #0
 8002a6e:	f104 0b1a 	add.w	fp, r4, #26
 8002a72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002a74:	425b      	negs	r3, r3
 8002a76:	4553      	cmp	r3, sl
 8002a78:	dc01      	bgt.n	8002a7e <_printf_float+0x2b6>
 8002a7a:	464b      	mov	r3, r9
 8002a7c:	e793      	b.n	80029a6 <_printf_float+0x1de>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	465a      	mov	r2, fp
 8002a82:	4631      	mov	r1, r6
 8002a84:	4628      	mov	r0, r5
 8002a86:	47b8      	blx	r7
 8002a88:	3001      	adds	r0, #1
 8002a8a:	f43f aef8 	beq.w	800287e <_printf_float+0xb6>
 8002a8e:	f10a 0a01 	add.w	sl, sl, #1
 8002a92:	e7ee      	b.n	8002a72 <_printf_float+0x2aa>
 8002a94:	7fefffff 	.word	0x7fefffff
 8002a98:	08006d82 	.word	0x08006d82
 8002a9c:	08006d86 	.word	0x08006d86
 8002aa0:	08006d8a 	.word	0x08006d8a
 8002aa4:	08006d8e 	.word	0x08006d8e
 8002aa8:	08006d92 	.word	0x08006d92
 8002aac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002aae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002ab2:	4553      	cmp	r3, sl
 8002ab4:	bfa8      	it	ge
 8002ab6:	4653      	movge	r3, sl
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	4699      	mov	r9, r3
 8002abc:	dc36      	bgt.n	8002b2c <_printf_float+0x364>
 8002abe:	f04f 0b00 	mov.w	fp, #0
 8002ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ac6:	f104 021a 	add.w	r2, r4, #26
 8002aca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002acc:	930a      	str	r3, [sp, #40]	@ 0x28
 8002ace:	eba3 0309 	sub.w	r3, r3, r9
 8002ad2:	455b      	cmp	r3, fp
 8002ad4:	dc31      	bgt.n	8002b3a <_printf_float+0x372>
 8002ad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ad8:	459a      	cmp	sl, r3
 8002ada:	dc3a      	bgt.n	8002b52 <_printf_float+0x38a>
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	07da      	lsls	r2, r3, #31
 8002ae0:	d437      	bmi.n	8002b52 <_printf_float+0x38a>
 8002ae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ae4:	ebaa 0903 	sub.w	r9, sl, r3
 8002ae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002aea:	ebaa 0303 	sub.w	r3, sl, r3
 8002aee:	4599      	cmp	r9, r3
 8002af0:	bfa8      	it	ge
 8002af2:	4699      	movge	r9, r3
 8002af4:	f1b9 0f00 	cmp.w	r9, #0
 8002af8:	dc33      	bgt.n	8002b62 <_printf_float+0x39a>
 8002afa:	f04f 0800 	mov.w	r8, #0
 8002afe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002b02:	f104 0b1a 	add.w	fp, r4, #26
 8002b06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002b08:	ebaa 0303 	sub.w	r3, sl, r3
 8002b0c:	eba3 0309 	sub.w	r3, r3, r9
 8002b10:	4543      	cmp	r3, r8
 8002b12:	f77f af7a 	ble.w	8002a0a <_printf_float+0x242>
 8002b16:	2301      	movs	r3, #1
 8002b18:	465a      	mov	r2, fp
 8002b1a:	4631      	mov	r1, r6
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	47b8      	blx	r7
 8002b20:	3001      	adds	r0, #1
 8002b22:	f43f aeac 	beq.w	800287e <_printf_float+0xb6>
 8002b26:	f108 0801 	add.w	r8, r8, #1
 8002b2a:	e7ec      	b.n	8002b06 <_printf_float+0x33e>
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	4631      	mov	r1, r6
 8002b30:	4628      	mov	r0, r5
 8002b32:	47b8      	blx	r7
 8002b34:	3001      	adds	r0, #1
 8002b36:	d1c2      	bne.n	8002abe <_printf_float+0x2f6>
 8002b38:	e6a1      	b.n	800287e <_printf_float+0xb6>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	4631      	mov	r1, r6
 8002b3e:	4628      	mov	r0, r5
 8002b40:	920a      	str	r2, [sp, #40]	@ 0x28
 8002b42:	47b8      	blx	r7
 8002b44:	3001      	adds	r0, #1
 8002b46:	f43f ae9a 	beq.w	800287e <_printf_float+0xb6>
 8002b4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002b4c:	f10b 0b01 	add.w	fp, fp, #1
 8002b50:	e7bb      	b.n	8002aca <_printf_float+0x302>
 8002b52:	4631      	mov	r1, r6
 8002b54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002b58:	4628      	mov	r0, r5
 8002b5a:	47b8      	blx	r7
 8002b5c:	3001      	adds	r0, #1
 8002b5e:	d1c0      	bne.n	8002ae2 <_printf_float+0x31a>
 8002b60:	e68d      	b.n	800287e <_printf_float+0xb6>
 8002b62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002b64:	464b      	mov	r3, r9
 8002b66:	4631      	mov	r1, r6
 8002b68:	4628      	mov	r0, r5
 8002b6a:	4442      	add	r2, r8
 8002b6c:	47b8      	blx	r7
 8002b6e:	3001      	adds	r0, #1
 8002b70:	d1c3      	bne.n	8002afa <_printf_float+0x332>
 8002b72:	e684      	b.n	800287e <_printf_float+0xb6>
 8002b74:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002b78:	f1ba 0f01 	cmp.w	sl, #1
 8002b7c:	dc01      	bgt.n	8002b82 <_printf_float+0x3ba>
 8002b7e:	07db      	lsls	r3, r3, #31
 8002b80:	d536      	bpl.n	8002bf0 <_printf_float+0x428>
 8002b82:	2301      	movs	r3, #1
 8002b84:	4642      	mov	r2, r8
 8002b86:	4631      	mov	r1, r6
 8002b88:	4628      	mov	r0, r5
 8002b8a:	47b8      	blx	r7
 8002b8c:	3001      	adds	r0, #1
 8002b8e:	f43f ae76 	beq.w	800287e <_printf_float+0xb6>
 8002b92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002b96:	4631      	mov	r1, r6
 8002b98:	4628      	mov	r0, r5
 8002b9a:	47b8      	blx	r7
 8002b9c:	3001      	adds	r0, #1
 8002b9e:	f43f ae6e 	beq.w	800287e <_printf_float+0xb6>
 8002ba2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002bae:	f7fd fefb 	bl	80009a8 <__aeabi_dcmpeq>
 8002bb2:	b9c0      	cbnz	r0, 8002be6 <_printf_float+0x41e>
 8002bb4:	4653      	mov	r3, sl
 8002bb6:	f108 0201 	add.w	r2, r8, #1
 8002bba:	4631      	mov	r1, r6
 8002bbc:	4628      	mov	r0, r5
 8002bbe:	47b8      	blx	r7
 8002bc0:	3001      	adds	r0, #1
 8002bc2:	d10c      	bne.n	8002bde <_printf_float+0x416>
 8002bc4:	e65b      	b.n	800287e <_printf_float+0xb6>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	465a      	mov	r2, fp
 8002bca:	4631      	mov	r1, r6
 8002bcc:	4628      	mov	r0, r5
 8002bce:	47b8      	blx	r7
 8002bd0:	3001      	adds	r0, #1
 8002bd2:	f43f ae54 	beq.w	800287e <_printf_float+0xb6>
 8002bd6:	f108 0801 	add.w	r8, r8, #1
 8002bda:	45d0      	cmp	r8, sl
 8002bdc:	dbf3      	blt.n	8002bc6 <_printf_float+0x3fe>
 8002bde:	464b      	mov	r3, r9
 8002be0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002be4:	e6e0      	b.n	80029a8 <_printf_float+0x1e0>
 8002be6:	f04f 0800 	mov.w	r8, #0
 8002bea:	f104 0b1a 	add.w	fp, r4, #26
 8002bee:	e7f4      	b.n	8002bda <_printf_float+0x412>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	4642      	mov	r2, r8
 8002bf4:	e7e1      	b.n	8002bba <_printf_float+0x3f2>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	464a      	mov	r2, r9
 8002bfa:	4631      	mov	r1, r6
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	47b8      	blx	r7
 8002c00:	3001      	adds	r0, #1
 8002c02:	f43f ae3c 	beq.w	800287e <_printf_float+0xb6>
 8002c06:	f108 0801 	add.w	r8, r8, #1
 8002c0a:	68e3      	ldr	r3, [r4, #12]
 8002c0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8002c0e:	1a5b      	subs	r3, r3, r1
 8002c10:	4543      	cmp	r3, r8
 8002c12:	dcf0      	bgt.n	8002bf6 <_printf_float+0x42e>
 8002c14:	e6fd      	b.n	8002a12 <_printf_float+0x24a>
 8002c16:	f04f 0800 	mov.w	r8, #0
 8002c1a:	f104 0919 	add.w	r9, r4, #25
 8002c1e:	e7f4      	b.n	8002c0a <_printf_float+0x442>

08002c20 <_printf_common>:
 8002c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c24:	4616      	mov	r6, r2
 8002c26:	4698      	mov	r8, r3
 8002c28:	688a      	ldr	r2, [r1, #8]
 8002c2a:	690b      	ldr	r3, [r1, #16]
 8002c2c:	4607      	mov	r7, r0
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	bfb8      	it	lt
 8002c32:	4613      	movlt	r3, r2
 8002c34:	6033      	str	r3, [r6, #0]
 8002c36:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c40:	b10a      	cbz	r2, 8002c46 <_printf_common+0x26>
 8002c42:	3301      	adds	r3, #1
 8002c44:	6033      	str	r3, [r6, #0]
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	0699      	lsls	r1, r3, #26
 8002c4a:	bf42      	ittt	mi
 8002c4c:	6833      	ldrmi	r3, [r6, #0]
 8002c4e:	3302      	addmi	r3, #2
 8002c50:	6033      	strmi	r3, [r6, #0]
 8002c52:	6825      	ldr	r5, [r4, #0]
 8002c54:	f015 0506 	ands.w	r5, r5, #6
 8002c58:	d106      	bne.n	8002c68 <_printf_common+0x48>
 8002c5a:	f104 0a19 	add.w	sl, r4, #25
 8002c5e:	68e3      	ldr	r3, [r4, #12]
 8002c60:	6832      	ldr	r2, [r6, #0]
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	42ab      	cmp	r3, r5
 8002c66:	dc2b      	bgt.n	8002cc0 <_printf_common+0xa0>
 8002c68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c6c:	6822      	ldr	r2, [r4, #0]
 8002c6e:	3b00      	subs	r3, #0
 8002c70:	bf18      	it	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	0692      	lsls	r2, r2, #26
 8002c76:	d430      	bmi.n	8002cda <_printf_common+0xba>
 8002c78:	4641      	mov	r1, r8
 8002c7a:	4638      	mov	r0, r7
 8002c7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002c80:	47c8      	blx	r9
 8002c82:	3001      	adds	r0, #1
 8002c84:	d023      	beq.n	8002cce <_printf_common+0xae>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	6922      	ldr	r2, [r4, #16]
 8002c8a:	f003 0306 	and.w	r3, r3, #6
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	bf14      	ite	ne
 8002c92:	2500      	movne	r5, #0
 8002c94:	6833      	ldreq	r3, [r6, #0]
 8002c96:	f04f 0600 	mov.w	r6, #0
 8002c9a:	bf08      	it	eq
 8002c9c:	68e5      	ldreq	r5, [r4, #12]
 8002c9e:	f104 041a 	add.w	r4, r4, #26
 8002ca2:	bf08      	it	eq
 8002ca4:	1aed      	subeq	r5, r5, r3
 8002ca6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002caa:	bf08      	it	eq
 8002cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	bfc4      	itt	gt
 8002cb4:	1a9b      	subgt	r3, r3, r2
 8002cb6:	18ed      	addgt	r5, r5, r3
 8002cb8:	42b5      	cmp	r5, r6
 8002cba:	d11a      	bne.n	8002cf2 <_printf_common+0xd2>
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	e008      	b.n	8002cd2 <_printf_common+0xb2>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	4652      	mov	r2, sl
 8002cc4:	4641      	mov	r1, r8
 8002cc6:	4638      	mov	r0, r7
 8002cc8:	47c8      	blx	r9
 8002cca:	3001      	adds	r0, #1
 8002ccc:	d103      	bne.n	8002cd6 <_printf_common+0xb6>
 8002cce:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cd6:	3501      	adds	r5, #1
 8002cd8:	e7c1      	b.n	8002c5e <_printf_common+0x3e>
 8002cda:	2030      	movs	r0, #48	@ 0x30
 8002cdc:	18e1      	adds	r1, r4, r3
 8002cde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ce8:	4422      	add	r2, r4
 8002cea:	3302      	adds	r3, #2
 8002cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002cf0:	e7c2      	b.n	8002c78 <_printf_common+0x58>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	4622      	mov	r2, r4
 8002cf6:	4641      	mov	r1, r8
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	47c8      	blx	r9
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d0e6      	beq.n	8002cce <_printf_common+0xae>
 8002d00:	3601      	adds	r6, #1
 8002d02:	e7d9      	b.n	8002cb8 <_printf_common+0x98>

08002d04 <_printf_i>:
 8002d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d08:	7e0f      	ldrb	r7, [r1, #24]
 8002d0a:	4691      	mov	r9, r2
 8002d0c:	2f78      	cmp	r7, #120	@ 0x78
 8002d0e:	4680      	mov	r8, r0
 8002d10:	460c      	mov	r4, r1
 8002d12:	469a      	mov	sl, r3
 8002d14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002d1a:	d807      	bhi.n	8002d2c <_printf_i+0x28>
 8002d1c:	2f62      	cmp	r7, #98	@ 0x62
 8002d1e:	d80a      	bhi.n	8002d36 <_printf_i+0x32>
 8002d20:	2f00      	cmp	r7, #0
 8002d22:	f000 80d3 	beq.w	8002ecc <_printf_i+0x1c8>
 8002d26:	2f58      	cmp	r7, #88	@ 0x58
 8002d28:	f000 80ba 	beq.w	8002ea0 <_printf_i+0x19c>
 8002d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002d34:	e03a      	b.n	8002dac <_printf_i+0xa8>
 8002d36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002d3a:	2b15      	cmp	r3, #21
 8002d3c:	d8f6      	bhi.n	8002d2c <_printf_i+0x28>
 8002d3e:	a101      	add	r1, pc, #4	@ (adr r1, 8002d44 <_printf_i+0x40>)
 8002d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d44:	08002d9d 	.word	0x08002d9d
 8002d48:	08002db1 	.word	0x08002db1
 8002d4c:	08002d2d 	.word	0x08002d2d
 8002d50:	08002d2d 	.word	0x08002d2d
 8002d54:	08002d2d 	.word	0x08002d2d
 8002d58:	08002d2d 	.word	0x08002d2d
 8002d5c:	08002db1 	.word	0x08002db1
 8002d60:	08002d2d 	.word	0x08002d2d
 8002d64:	08002d2d 	.word	0x08002d2d
 8002d68:	08002d2d 	.word	0x08002d2d
 8002d6c:	08002d2d 	.word	0x08002d2d
 8002d70:	08002eb3 	.word	0x08002eb3
 8002d74:	08002ddb 	.word	0x08002ddb
 8002d78:	08002e6d 	.word	0x08002e6d
 8002d7c:	08002d2d 	.word	0x08002d2d
 8002d80:	08002d2d 	.word	0x08002d2d
 8002d84:	08002ed5 	.word	0x08002ed5
 8002d88:	08002d2d 	.word	0x08002d2d
 8002d8c:	08002ddb 	.word	0x08002ddb
 8002d90:	08002d2d 	.word	0x08002d2d
 8002d94:	08002d2d 	.word	0x08002d2d
 8002d98:	08002e75 	.word	0x08002e75
 8002d9c:	6833      	ldr	r3, [r6, #0]
 8002d9e:	1d1a      	adds	r2, r3, #4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6032      	str	r2, [r6, #0]
 8002da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002da8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002dac:	2301      	movs	r3, #1
 8002dae:	e09e      	b.n	8002eee <_printf_i+0x1ea>
 8002db0:	6833      	ldr	r3, [r6, #0]
 8002db2:	6820      	ldr	r0, [r4, #0]
 8002db4:	1d19      	adds	r1, r3, #4
 8002db6:	6031      	str	r1, [r6, #0]
 8002db8:	0606      	lsls	r6, r0, #24
 8002dba:	d501      	bpl.n	8002dc0 <_printf_i+0xbc>
 8002dbc:	681d      	ldr	r5, [r3, #0]
 8002dbe:	e003      	b.n	8002dc8 <_printf_i+0xc4>
 8002dc0:	0645      	lsls	r5, r0, #25
 8002dc2:	d5fb      	bpl.n	8002dbc <_printf_i+0xb8>
 8002dc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002dc8:	2d00      	cmp	r5, #0
 8002dca:	da03      	bge.n	8002dd4 <_printf_i+0xd0>
 8002dcc:	232d      	movs	r3, #45	@ 0x2d
 8002dce:	426d      	negs	r5, r5
 8002dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002dd4:	230a      	movs	r3, #10
 8002dd6:	4859      	ldr	r0, [pc, #356]	@ (8002f3c <_printf_i+0x238>)
 8002dd8:	e011      	b.n	8002dfe <_printf_i+0xfa>
 8002dda:	6821      	ldr	r1, [r4, #0]
 8002ddc:	6833      	ldr	r3, [r6, #0]
 8002dde:	0608      	lsls	r0, r1, #24
 8002de0:	f853 5b04 	ldr.w	r5, [r3], #4
 8002de4:	d402      	bmi.n	8002dec <_printf_i+0xe8>
 8002de6:	0649      	lsls	r1, r1, #25
 8002de8:	bf48      	it	mi
 8002dea:	b2ad      	uxthmi	r5, r5
 8002dec:	2f6f      	cmp	r7, #111	@ 0x6f
 8002dee:	6033      	str	r3, [r6, #0]
 8002df0:	bf14      	ite	ne
 8002df2:	230a      	movne	r3, #10
 8002df4:	2308      	moveq	r3, #8
 8002df6:	4851      	ldr	r0, [pc, #324]	@ (8002f3c <_printf_i+0x238>)
 8002df8:	2100      	movs	r1, #0
 8002dfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002dfe:	6866      	ldr	r6, [r4, #4]
 8002e00:	2e00      	cmp	r6, #0
 8002e02:	bfa8      	it	ge
 8002e04:	6821      	ldrge	r1, [r4, #0]
 8002e06:	60a6      	str	r6, [r4, #8]
 8002e08:	bfa4      	itt	ge
 8002e0a:	f021 0104 	bicge.w	r1, r1, #4
 8002e0e:	6021      	strge	r1, [r4, #0]
 8002e10:	b90d      	cbnz	r5, 8002e16 <_printf_i+0x112>
 8002e12:	2e00      	cmp	r6, #0
 8002e14:	d04b      	beq.n	8002eae <_printf_i+0x1aa>
 8002e16:	4616      	mov	r6, r2
 8002e18:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e1c:	fb03 5711 	mls	r7, r3, r1, r5
 8002e20:	5dc7      	ldrb	r7, [r0, r7]
 8002e22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e26:	462f      	mov	r7, r5
 8002e28:	42bb      	cmp	r3, r7
 8002e2a:	460d      	mov	r5, r1
 8002e2c:	d9f4      	bls.n	8002e18 <_printf_i+0x114>
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d10b      	bne.n	8002e4a <_printf_i+0x146>
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	07df      	lsls	r7, r3, #31
 8002e36:	d508      	bpl.n	8002e4a <_printf_i+0x146>
 8002e38:	6923      	ldr	r3, [r4, #16]
 8002e3a:	6861      	ldr	r1, [r4, #4]
 8002e3c:	4299      	cmp	r1, r3
 8002e3e:	bfde      	ittt	le
 8002e40:	2330      	movle	r3, #48	@ 0x30
 8002e42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e4a:	1b92      	subs	r2, r2, r6
 8002e4c:	6122      	str	r2, [r4, #16]
 8002e4e:	464b      	mov	r3, r9
 8002e50:	4621      	mov	r1, r4
 8002e52:	4640      	mov	r0, r8
 8002e54:	f8cd a000 	str.w	sl, [sp]
 8002e58:	aa03      	add	r2, sp, #12
 8002e5a:	f7ff fee1 	bl	8002c20 <_printf_common>
 8002e5e:	3001      	adds	r0, #1
 8002e60:	d14a      	bne.n	8002ef8 <_printf_i+0x1f4>
 8002e62:	f04f 30ff 	mov.w	r0, #4294967295
 8002e66:	b004      	add	sp, #16
 8002e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	f043 0320 	orr.w	r3, r3, #32
 8002e72:	6023      	str	r3, [r4, #0]
 8002e74:	2778      	movs	r7, #120	@ 0x78
 8002e76:	4832      	ldr	r0, [pc, #200]	@ (8002f40 <_printf_i+0x23c>)
 8002e78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	6831      	ldr	r1, [r6, #0]
 8002e80:	061f      	lsls	r7, r3, #24
 8002e82:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e86:	d402      	bmi.n	8002e8e <_printf_i+0x18a>
 8002e88:	065f      	lsls	r7, r3, #25
 8002e8a:	bf48      	it	mi
 8002e8c:	b2ad      	uxthmi	r5, r5
 8002e8e:	6031      	str	r1, [r6, #0]
 8002e90:	07d9      	lsls	r1, r3, #31
 8002e92:	bf44      	itt	mi
 8002e94:	f043 0320 	orrmi.w	r3, r3, #32
 8002e98:	6023      	strmi	r3, [r4, #0]
 8002e9a:	b11d      	cbz	r5, 8002ea4 <_printf_i+0x1a0>
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	e7ab      	b.n	8002df8 <_printf_i+0xf4>
 8002ea0:	4826      	ldr	r0, [pc, #152]	@ (8002f3c <_printf_i+0x238>)
 8002ea2:	e7e9      	b.n	8002e78 <_printf_i+0x174>
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	f023 0320 	bic.w	r3, r3, #32
 8002eaa:	6023      	str	r3, [r4, #0]
 8002eac:	e7f6      	b.n	8002e9c <_printf_i+0x198>
 8002eae:	4616      	mov	r6, r2
 8002eb0:	e7bd      	b.n	8002e2e <_printf_i+0x12a>
 8002eb2:	6833      	ldr	r3, [r6, #0]
 8002eb4:	6825      	ldr	r5, [r4, #0]
 8002eb6:	1d18      	adds	r0, r3, #4
 8002eb8:	6961      	ldr	r1, [r4, #20]
 8002eba:	6030      	str	r0, [r6, #0]
 8002ebc:	062e      	lsls	r6, r5, #24
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	d501      	bpl.n	8002ec6 <_printf_i+0x1c2>
 8002ec2:	6019      	str	r1, [r3, #0]
 8002ec4:	e002      	b.n	8002ecc <_printf_i+0x1c8>
 8002ec6:	0668      	lsls	r0, r5, #25
 8002ec8:	d5fb      	bpl.n	8002ec2 <_printf_i+0x1be>
 8002eca:	8019      	strh	r1, [r3, #0]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	4616      	mov	r6, r2
 8002ed0:	6123      	str	r3, [r4, #16]
 8002ed2:	e7bc      	b.n	8002e4e <_printf_i+0x14a>
 8002ed4:	6833      	ldr	r3, [r6, #0]
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	1d1a      	adds	r2, r3, #4
 8002eda:	6032      	str	r2, [r6, #0]
 8002edc:	681e      	ldr	r6, [r3, #0]
 8002ede:	6862      	ldr	r2, [r4, #4]
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	f000 fbe4 	bl	80036ae <memchr>
 8002ee6:	b108      	cbz	r0, 8002eec <_printf_i+0x1e8>
 8002ee8:	1b80      	subs	r0, r0, r6
 8002eea:	6060      	str	r0, [r4, #4]
 8002eec:	6863      	ldr	r3, [r4, #4]
 8002eee:	6123      	str	r3, [r4, #16]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ef6:	e7aa      	b.n	8002e4e <_printf_i+0x14a>
 8002ef8:	4632      	mov	r2, r6
 8002efa:	4649      	mov	r1, r9
 8002efc:	4640      	mov	r0, r8
 8002efe:	6923      	ldr	r3, [r4, #16]
 8002f00:	47d0      	blx	sl
 8002f02:	3001      	adds	r0, #1
 8002f04:	d0ad      	beq.n	8002e62 <_printf_i+0x15e>
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	079b      	lsls	r3, r3, #30
 8002f0a:	d413      	bmi.n	8002f34 <_printf_i+0x230>
 8002f0c:	68e0      	ldr	r0, [r4, #12]
 8002f0e:	9b03      	ldr	r3, [sp, #12]
 8002f10:	4298      	cmp	r0, r3
 8002f12:	bfb8      	it	lt
 8002f14:	4618      	movlt	r0, r3
 8002f16:	e7a6      	b.n	8002e66 <_printf_i+0x162>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	4632      	mov	r2, r6
 8002f1c:	4649      	mov	r1, r9
 8002f1e:	4640      	mov	r0, r8
 8002f20:	47d0      	blx	sl
 8002f22:	3001      	adds	r0, #1
 8002f24:	d09d      	beq.n	8002e62 <_printf_i+0x15e>
 8002f26:	3501      	adds	r5, #1
 8002f28:	68e3      	ldr	r3, [r4, #12]
 8002f2a:	9903      	ldr	r1, [sp, #12]
 8002f2c:	1a5b      	subs	r3, r3, r1
 8002f2e:	42ab      	cmp	r3, r5
 8002f30:	dcf2      	bgt.n	8002f18 <_printf_i+0x214>
 8002f32:	e7eb      	b.n	8002f0c <_printf_i+0x208>
 8002f34:	2500      	movs	r5, #0
 8002f36:	f104 0619 	add.w	r6, r4, #25
 8002f3a:	e7f5      	b.n	8002f28 <_printf_i+0x224>
 8002f3c:	08006d94 	.word	0x08006d94
 8002f40:	08006da5 	.word	0x08006da5

08002f44 <_scanf_float>:
 8002f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f48:	b087      	sub	sp, #28
 8002f4a:	9303      	str	r3, [sp, #12]
 8002f4c:	688b      	ldr	r3, [r1, #8]
 8002f4e:	4617      	mov	r7, r2
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8002f56:	bf82      	ittt	hi
 8002f58:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8002f5c:	eb03 0b05 	addhi.w	fp, r3, r5
 8002f60:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8002f64:	460a      	mov	r2, r1
 8002f66:	f04f 0500 	mov.w	r5, #0
 8002f6a:	bf88      	it	hi
 8002f6c:	608b      	strhi	r3, [r1, #8]
 8002f6e:	680b      	ldr	r3, [r1, #0]
 8002f70:	4680      	mov	r8, r0
 8002f72:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8002f76:	f842 3b1c 	str.w	r3, [r2], #28
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	bf98      	it	ls
 8002f7e:	f04f 0b00 	movls.w	fp, #0
 8002f82:	4616      	mov	r6, r2
 8002f84:	46aa      	mov	sl, r5
 8002f86:	46a9      	mov	r9, r5
 8002f88:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002f8c:	9201      	str	r2, [sp, #4]
 8002f8e:	9502      	str	r5, [sp, #8]
 8002f90:	68a2      	ldr	r2, [r4, #8]
 8002f92:	b152      	cbz	r2, 8002faa <_scanf_float+0x66>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b4e      	cmp	r3, #78	@ 0x4e
 8002f9a:	d865      	bhi.n	8003068 <_scanf_float+0x124>
 8002f9c:	2b40      	cmp	r3, #64	@ 0x40
 8002f9e:	d83d      	bhi.n	800301c <_scanf_float+0xd8>
 8002fa0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8002fa4:	b2c8      	uxtb	r0, r1
 8002fa6:	280e      	cmp	r0, #14
 8002fa8:	d93b      	bls.n	8003022 <_scanf_float+0xde>
 8002faa:	f1b9 0f00 	cmp.w	r9, #0
 8002fae:	d003      	beq.n	8002fb8 <_scanf_float+0x74>
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fb6:	6023      	str	r3, [r4, #0]
 8002fb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002fbc:	f1ba 0f01 	cmp.w	sl, #1
 8002fc0:	f200 8118 	bhi.w	80031f4 <_scanf_float+0x2b0>
 8002fc4:	9b01      	ldr	r3, [sp, #4]
 8002fc6:	429e      	cmp	r6, r3
 8002fc8:	f200 8109 	bhi.w	80031de <_scanf_float+0x29a>
 8002fcc:	2001      	movs	r0, #1
 8002fce:	b007      	add	sp, #28
 8002fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fd4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8002fd8:	2a0d      	cmp	r2, #13
 8002fda:	d8e6      	bhi.n	8002faa <_scanf_float+0x66>
 8002fdc:	a101      	add	r1, pc, #4	@ (adr r1, 8002fe4 <_scanf_float+0xa0>)
 8002fde:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002fe2:	bf00      	nop
 8002fe4:	0800312b 	.word	0x0800312b
 8002fe8:	08002fab 	.word	0x08002fab
 8002fec:	08002fab 	.word	0x08002fab
 8002ff0:	08002fab 	.word	0x08002fab
 8002ff4:	0800318b 	.word	0x0800318b
 8002ff8:	08003163 	.word	0x08003163
 8002ffc:	08002fab 	.word	0x08002fab
 8003000:	08002fab 	.word	0x08002fab
 8003004:	08003139 	.word	0x08003139
 8003008:	08002fab 	.word	0x08002fab
 800300c:	08002fab 	.word	0x08002fab
 8003010:	08002fab 	.word	0x08002fab
 8003014:	08002fab 	.word	0x08002fab
 8003018:	080030f1 	.word	0x080030f1
 800301c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003020:	e7da      	b.n	8002fd8 <_scanf_float+0x94>
 8003022:	290e      	cmp	r1, #14
 8003024:	d8c1      	bhi.n	8002faa <_scanf_float+0x66>
 8003026:	a001      	add	r0, pc, #4	@ (adr r0, 800302c <_scanf_float+0xe8>)
 8003028:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800302c:	080030e1 	.word	0x080030e1
 8003030:	08002fab 	.word	0x08002fab
 8003034:	080030e1 	.word	0x080030e1
 8003038:	08003177 	.word	0x08003177
 800303c:	08002fab 	.word	0x08002fab
 8003040:	08003089 	.word	0x08003089
 8003044:	080030c7 	.word	0x080030c7
 8003048:	080030c7 	.word	0x080030c7
 800304c:	080030c7 	.word	0x080030c7
 8003050:	080030c7 	.word	0x080030c7
 8003054:	080030c7 	.word	0x080030c7
 8003058:	080030c7 	.word	0x080030c7
 800305c:	080030c7 	.word	0x080030c7
 8003060:	080030c7 	.word	0x080030c7
 8003064:	080030c7 	.word	0x080030c7
 8003068:	2b6e      	cmp	r3, #110	@ 0x6e
 800306a:	d809      	bhi.n	8003080 <_scanf_float+0x13c>
 800306c:	2b60      	cmp	r3, #96	@ 0x60
 800306e:	d8b1      	bhi.n	8002fd4 <_scanf_float+0x90>
 8003070:	2b54      	cmp	r3, #84	@ 0x54
 8003072:	d07b      	beq.n	800316c <_scanf_float+0x228>
 8003074:	2b59      	cmp	r3, #89	@ 0x59
 8003076:	d198      	bne.n	8002faa <_scanf_float+0x66>
 8003078:	2d07      	cmp	r5, #7
 800307a:	d196      	bne.n	8002faa <_scanf_float+0x66>
 800307c:	2508      	movs	r5, #8
 800307e:	e02c      	b.n	80030da <_scanf_float+0x196>
 8003080:	2b74      	cmp	r3, #116	@ 0x74
 8003082:	d073      	beq.n	800316c <_scanf_float+0x228>
 8003084:	2b79      	cmp	r3, #121	@ 0x79
 8003086:	e7f6      	b.n	8003076 <_scanf_float+0x132>
 8003088:	6821      	ldr	r1, [r4, #0]
 800308a:	05c8      	lsls	r0, r1, #23
 800308c:	d51b      	bpl.n	80030c6 <_scanf_float+0x182>
 800308e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003092:	6021      	str	r1, [r4, #0]
 8003094:	f109 0901 	add.w	r9, r9, #1
 8003098:	f1bb 0f00 	cmp.w	fp, #0
 800309c:	d003      	beq.n	80030a6 <_scanf_float+0x162>
 800309e:	3201      	adds	r2, #1
 80030a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80030a4:	60a2      	str	r2, [r4, #8]
 80030a6:	68a3      	ldr	r3, [r4, #8]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	60a3      	str	r3, [r4, #8]
 80030ac:	6923      	ldr	r3, [r4, #16]
 80030ae:	3301      	adds	r3, #1
 80030b0:	6123      	str	r3, [r4, #16]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	f340 8087 	ble.w	80031cc <_scanf_float+0x288>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	e764      	b.n	8002f90 <_scanf_float+0x4c>
 80030c6:	eb1a 0105 	adds.w	r1, sl, r5
 80030ca:	f47f af6e 	bne.w	8002faa <_scanf_float+0x66>
 80030ce:	460d      	mov	r5, r1
 80030d0:	468a      	mov	sl, r1
 80030d2:	6822      	ldr	r2, [r4, #0]
 80030d4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80030d8:	6022      	str	r2, [r4, #0]
 80030da:	f806 3b01 	strb.w	r3, [r6], #1
 80030de:	e7e2      	b.n	80030a6 <_scanf_float+0x162>
 80030e0:	6822      	ldr	r2, [r4, #0]
 80030e2:	0610      	lsls	r0, r2, #24
 80030e4:	f57f af61 	bpl.w	8002faa <_scanf_float+0x66>
 80030e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030ec:	6022      	str	r2, [r4, #0]
 80030ee:	e7f4      	b.n	80030da <_scanf_float+0x196>
 80030f0:	f1ba 0f00 	cmp.w	sl, #0
 80030f4:	d10e      	bne.n	8003114 <_scanf_float+0x1d0>
 80030f6:	f1b9 0f00 	cmp.w	r9, #0
 80030fa:	d10e      	bne.n	800311a <_scanf_float+0x1d6>
 80030fc:	6822      	ldr	r2, [r4, #0]
 80030fe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003102:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003106:	d108      	bne.n	800311a <_scanf_float+0x1d6>
 8003108:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800310c:	f04f 0a01 	mov.w	sl, #1
 8003110:	6022      	str	r2, [r4, #0]
 8003112:	e7e2      	b.n	80030da <_scanf_float+0x196>
 8003114:	f1ba 0f02 	cmp.w	sl, #2
 8003118:	d055      	beq.n	80031c6 <_scanf_float+0x282>
 800311a:	2d01      	cmp	r5, #1
 800311c:	d002      	beq.n	8003124 <_scanf_float+0x1e0>
 800311e:	2d04      	cmp	r5, #4
 8003120:	f47f af43 	bne.w	8002faa <_scanf_float+0x66>
 8003124:	3501      	adds	r5, #1
 8003126:	b2ed      	uxtb	r5, r5
 8003128:	e7d7      	b.n	80030da <_scanf_float+0x196>
 800312a:	f1ba 0f01 	cmp.w	sl, #1
 800312e:	f47f af3c 	bne.w	8002faa <_scanf_float+0x66>
 8003132:	f04f 0a02 	mov.w	sl, #2
 8003136:	e7d0      	b.n	80030da <_scanf_float+0x196>
 8003138:	b97d      	cbnz	r5, 800315a <_scanf_float+0x216>
 800313a:	f1b9 0f00 	cmp.w	r9, #0
 800313e:	f47f af37 	bne.w	8002fb0 <_scanf_float+0x6c>
 8003142:	6822      	ldr	r2, [r4, #0]
 8003144:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003148:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800314c:	f040 8103 	bne.w	8003356 <_scanf_float+0x412>
 8003150:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003154:	2501      	movs	r5, #1
 8003156:	6022      	str	r2, [r4, #0]
 8003158:	e7bf      	b.n	80030da <_scanf_float+0x196>
 800315a:	2d03      	cmp	r5, #3
 800315c:	d0e2      	beq.n	8003124 <_scanf_float+0x1e0>
 800315e:	2d05      	cmp	r5, #5
 8003160:	e7de      	b.n	8003120 <_scanf_float+0x1dc>
 8003162:	2d02      	cmp	r5, #2
 8003164:	f47f af21 	bne.w	8002faa <_scanf_float+0x66>
 8003168:	2503      	movs	r5, #3
 800316a:	e7b6      	b.n	80030da <_scanf_float+0x196>
 800316c:	2d06      	cmp	r5, #6
 800316e:	f47f af1c 	bne.w	8002faa <_scanf_float+0x66>
 8003172:	2507      	movs	r5, #7
 8003174:	e7b1      	b.n	80030da <_scanf_float+0x196>
 8003176:	6822      	ldr	r2, [r4, #0]
 8003178:	0591      	lsls	r1, r2, #22
 800317a:	f57f af16 	bpl.w	8002faa <_scanf_float+0x66>
 800317e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003182:	6022      	str	r2, [r4, #0]
 8003184:	f8cd 9008 	str.w	r9, [sp, #8]
 8003188:	e7a7      	b.n	80030da <_scanf_float+0x196>
 800318a:	6822      	ldr	r2, [r4, #0]
 800318c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003190:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003194:	d006      	beq.n	80031a4 <_scanf_float+0x260>
 8003196:	0550      	lsls	r0, r2, #21
 8003198:	f57f af07 	bpl.w	8002faa <_scanf_float+0x66>
 800319c:	f1b9 0f00 	cmp.w	r9, #0
 80031a0:	f000 80d9 	beq.w	8003356 <_scanf_float+0x412>
 80031a4:	0591      	lsls	r1, r2, #22
 80031a6:	bf58      	it	pl
 80031a8:	9902      	ldrpl	r1, [sp, #8]
 80031aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80031ae:	bf58      	it	pl
 80031b0:	eba9 0101 	subpl.w	r1, r9, r1
 80031b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80031b8:	f04f 0900 	mov.w	r9, #0
 80031bc:	bf58      	it	pl
 80031be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80031c2:	6022      	str	r2, [r4, #0]
 80031c4:	e789      	b.n	80030da <_scanf_float+0x196>
 80031c6:	f04f 0a03 	mov.w	sl, #3
 80031ca:	e786      	b.n	80030da <_scanf_float+0x196>
 80031cc:	4639      	mov	r1, r7
 80031ce:	4640      	mov	r0, r8
 80031d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80031d4:	4798      	blx	r3
 80031d6:	2800      	cmp	r0, #0
 80031d8:	f43f aeda 	beq.w	8002f90 <_scanf_float+0x4c>
 80031dc:	e6e5      	b.n	8002faa <_scanf_float+0x66>
 80031de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80031e2:	463a      	mov	r2, r7
 80031e4:	4640      	mov	r0, r8
 80031e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80031ea:	4798      	blx	r3
 80031ec:	6923      	ldr	r3, [r4, #16]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	6123      	str	r3, [r4, #16]
 80031f2:	e6e7      	b.n	8002fc4 <_scanf_float+0x80>
 80031f4:	1e6b      	subs	r3, r5, #1
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	d824      	bhi.n	8003244 <_scanf_float+0x300>
 80031fa:	2d02      	cmp	r5, #2
 80031fc:	d836      	bhi.n	800326c <_scanf_float+0x328>
 80031fe:	9b01      	ldr	r3, [sp, #4]
 8003200:	429e      	cmp	r6, r3
 8003202:	f67f aee3 	bls.w	8002fcc <_scanf_float+0x88>
 8003206:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800320a:	463a      	mov	r2, r7
 800320c:	4640      	mov	r0, r8
 800320e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003212:	4798      	blx	r3
 8003214:	6923      	ldr	r3, [r4, #16]
 8003216:	3b01      	subs	r3, #1
 8003218:	6123      	str	r3, [r4, #16]
 800321a:	e7f0      	b.n	80031fe <_scanf_float+0x2ba>
 800321c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003220:	463a      	mov	r2, r7
 8003222:	4640      	mov	r0, r8
 8003224:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003228:	4798      	blx	r3
 800322a:	6923      	ldr	r3, [r4, #16]
 800322c:	3b01      	subs	r3, #1
 800322e:	6123      	str	r3, [r4, #16]
 8003230:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003234:	fa5f fa8a 	uxtb.w	sl, sl
 8003238:	f1ba 0f02 	cmp.w	sl, #2
 800323c:	d1ee      	bne.n	800321c <_scanf_float+0x2d8>
 800323e:	3d03      	subs	r5, #3
 8003240:	b2ed      	uxtb	r5, r5
 8003242:	1b76      	subs	r6, r6, r5
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	05da      	lsls	r2, r3, #23
 8003248:	d530      	bpl.n	80032ac <_scanf_float+0x368>
 800324a:	055b      	lsls	r3, r3, #21
 800324c:	d511      	bpl.n	8003272 <_scanf_float+0x32e>
 800324e:	9b01      	ldr	r3, [sp, #4]
 8003250:	429e      	cmp	r6, r3
 8003252:	f67f aebb 	bls.w	8002fcc <_scanf_float+0x88>
 8003256:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800325a:	463a      	mov	r2, r7
 800325c:	4640      	mov	r0, r8
 800325e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003262:	4798      	blx	r3
 8003264:	6923      	ldr	r3, [r4, #16]
 8003266:	3b01      	subs	r3, #1
 8003268:	6123      	str	r3, [r4, #16]
 800326a:	e7f0      	b.n	800324e <_scanf_float+0x30a>
 800326c:	46aa      	mov	sl, r5
 800326e:	46b3      	mov	fp, r6
 8003270:	e7de      	b.n	8003230 <_scanf_float+0x2ec>
 8003272:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003276:	6923      	ldr	r3, [r4, #16]
 8003278:	2965      	cmp	r1, #101	@ 0x65
 800327a:	f103 33ff 	add.w	r3, r3, #4294967295
 800327e:	f106 35ff 	add.w	r5, r6, #4294967295
 8003282:	6123      	str	r3, [r4, #16]
 8003284:	d00c      	beq.n	80032a0 <_scanf_float+0x35c>
 8003286:	2945      	cmp	r1, #69	@ 0x45
 8003288:	d00a      	beq.n	80032a0 <_scanf_float+0x35c>
 800328a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800328e:	463a      	mov	r2, r7
 8003290:	4640      	mov	r0, r8
 8003292:	4798      	blx	r3
 8003294:	6923      	ldr	r3, [r4, #16]
 8003296:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800329a:	3b01      	subs	r3, #1
 800329c:	1eb5      	subs	r5, r6, #2
 800329e:	6123      	str	r3, [r4, #16]
 80032a0:	463a      	mov	r2, r7
 80032a2:	4640      	mov	r0, r8
 80032a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80032a8:	4798      	blx	r3
 80032aa:	462e      	mov	r6, r5
 80032ac:	6822      	ldr	r2, [r4, #0]
 80032ae:	f012 0210 	ands.w	r2, r2, #16
 80032b2:	d001      	beq.n	80032b8 <_scanf_float+0x374>
 80032b4:	2000      	movs	r0, #0
 80032b6:	e68a      	b.n	8002fce <_scanf_float+0x8a>
 80032b8:	7032      	strb	r2, [r6, #0]
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c4:	d11c      	bne.n	8003300 <_scanf_float+0x3bc>
 80032c6:	9b02      	ldr	r3, [sp, #8]
 80032c8:	454b      	cmp	r3, r9
 80032ca:	eba3 0209 	sub.w	r2, r3, r9
 80032ce:	d123      	bne.n	8003318 <_scanf_float+0x3d4>
 80032d0:	2200      	movs	r2, #0
 80032d2:	4640      	mov	r0, r8
 80032d4:	9901      	ldr	r1, [sp, #4]
 80032d6:	f002 fbef 	bl	8005ab8 <_strtod_r>
 80032da:	9b03      	ldr	r3, [sp, #12]
 80032dc:	6825      	ldr	r5, [r4, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f015 0f02 	tst.w	r5, #2
 80032e4:	4606      	mov	r6, r0
 80032e6:	460f      	mov	r7, r1
 80032e8:	f103 0204 	add.w	r2, r3, #4
 80032ec:	d01f      	beq.n	800332e <_scanf_float+0x3ea>
 80032ee:	9903      	ldr	r1, [sp, #12]
 80032f0:	600a      	str	r2, [r1, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	e9c3 6700 	strd	r6, r7, [r3]
 80032f8:	68e3      	ldr	r3, [r4, #12]
 80032fa:	3301      	adds	r3, #1
 80032fc:	60e3      	str	r3, [r4, #12]
 80032fe:	e7d9      	b.n	80032b4 <_scanf_float+0x370>
 8003300:	9b04      	ldr	r3, [sp, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0e4      	beq.n	80032d0 <_scanf_float+0x38c>
 8003306:	9905      	ldr	r1, [sp, #20]
 8003308:	230a      	movs	r3, #10
 800330a:	4640      	mov	r0, r8
 800330c:	3101      	adds	r1, #1
 800330e:	f002 fc53 	bl	8005bb8 <_strtol_r>
 8003312:	9b04      	ldr	r3, [sp, #16]
 8003314:	9e05      	ldr	r6, [sp, #20]
 8003316:	1ac2      	subs	r2, r0, r3
 8003318:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800331c:	429e      	cmp	r6, r3
 800331e:	bf28      	it	cs
 8003320:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003324:	4630      	mov	r0, r6
 8003326:	490d      	ldr	r1, [pc, #52]	@ (800335c <_scanf_float+0x418>)
 8003328:	f000 f8de 	bl	80034e8 <siprintf>
 800332c:	e7d0      	b.n	80032d0 <_scanf_float+0x38c>
 800332e:	076d      	lsls	r5, r5, #29
 8003330:	d4dd      	bmi.n	80032ee <_scanf_float+0x3aa>
 8003332:	9d03      	ldr	r5, [sp, #12]
 8003334:	602a      	str	r2, [r5, #0]
 8003336:	681d      	ldr	r5, [r3, #0]
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	f7fd fb66 	bl	8000a0c <__aeabi_dcmpun>
 8003340:	b120      	cbz	r0, 800334c <_scanf_float+0x408>
 8003342:	4807      	ldr	r0, [pc, #28]	@ (8003360 <_scanf_float+0x41c>)
 8003344:	f000 f9c2 	bl	80036cc <nanf>
 8003348:	6028      	str	r0, [r5, #0]
 800334a:	e7d5      	b.n	80032f8 <_scanf_float+0x3b4>
 800334c:	4630      	mov	r0, r6
 800334e:	4639      	mov	r1, r7
 8003350:	f7fd fbba 	bl	8000ac8 <__aeabi_d2f>
 8003354:	e7f8      	b.n	8003348 <_scanf_float+0x404>
 8003356:	f04f 0900 	mov.w	r9, #0
 800335a:	e62d      	b.n	8002fb8 <_scanf_float+0x74>
 800335c:	08006db6 	.word	0x08006db6
 8003360:	0800714d 	.word	0x0800714d

08003364 <std>:
 8003364:	2300      	movs	r3, #0
 8003366:	b510      	push	{r4, lr}
 8003368:	4604      	mov	r4, r0
 800336a:	e9c0 3300 	strd	r3, r3, [r0]
 800336e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003372:	6083      	str	r3, [r0, #8]
 8003374:	8181      	strh	r1, [r0, #12]
 8003376:	6643      	str	r3, [r0, #100]	@ 0x64
 8003378:	81c2      	strh	r2, [r0, #14]
 800337a:	6183      	str	r3, [r0, #24]
 800337c:	4619      	mov	r1, r3
 800337e:	2208      	movs	r2, #8
 8003380:	305c      	adds	r0, #92	@ 0x5c
 8003382:	f000 f914 	bl	80035ae <memset>
 8003386:	4b0d      	ldr	r3, [pc, #52]	@ (80033bc <std+0x58>)
 8003388:	6224      	str	r4, [r4, #32]
 800338a:	6263      	str	r3, [r4, #36]	@ 0x24
 800338c:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <std+0x5c>)
 800338e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003390:	4b0c      	ldr	r3, [pc, #48]	@ (80033c4 <std+0x60>)
 8003392:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003394:	4b0c      	ldr	r3, [pc, #48]	@ (80033c8 <std+0x64>)
 8003396:	6323      	str	r3, [r4, #48]	@ 0x30
 8003398:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <std+0x68>)
 800339a:	429c      	cmp	r4, r3
 800339c:	d006      	beq.n	80033ac <std+0x48>
 800339e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80033a2:	4294      	cmp	r4, r2
 80033a4:	d002      	beq.n	80033ac <std+0x48>
 80033a6:	33d0      	adds	r3, #208	@ 0xd0
 80033a8:	429c      	cmp	r4, r3
 80033aa:	d105      	bne.n	80033b8 <std+0x54>
 80033ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80033b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033b4:	f000 b978 	b.w	80036a8 <__retarget_lock_init_recursive>
 80033b8:	bd10      	pop	{r4, pc}
 80033ba:	bf00      	nop
 80033bc:	08003529 	.word	0x08003529
 80033c0:	0800354b 	.word	0x0800354b
 80033c4:	08003583 	.word	0x08003583
 80033c8:	080035a7 	.word	0x080035a7
 80033cc:	2000022c 	.word	0x2000022c

080033d0 <stdio_exit_handler>:
 80033d0:	4a02      	ldr	r2, [pc, #8]	@ (80033dc <stdio_exit_handler+0xc>)
 80033d2:	4903      	ldr	r1, [pc, #12]	@ (80033e0 <stdio_exit_handler+0x10>)
 80033d4:	4803      	ldr	r0, [pc, #12]	@ (80033e4 <stdio_exit_handler+0x14>)
 80033d6:	f000 b869 	b.w	80034ac <_fwalk_sglue>
 80033da:	bf00      	nop
 80033dc:	2000000c 	.word	0x2000000c
 80033e0:	08005f6d 	.word	0x08005f6d
 80033e4:	2000001c 	.word	0x2000001c

080033e8 <cleanup_stdio>:
 80033e8:	6841      	ldr	r1, [r0, #4]
 80033ea:	4b0c      	ldr	r3, [pc, #48]	@ (800341c <cleanup_stdio+0x34>)
 80033ec:	b510      	push	{r4, lr}
 80033ee:	4299      	cmp	r1, r3
 80033f0:	4604      	mov	r4, r0
 80033f2:	d001      	beq.n	80033f8 <cleanup_stdio+0x10>
 80033f4:	f002 fdba 	bl	8005f6c <_fflush_r>
 80033f8:	68a1      	ldr	r1, [r4, #8]
 80033fa:	4b09      	ldr	r3, [pc, #36]	@ (8003420 <cleanup_stdio+0x38>)
 80033fc:	4299      	cmp	r1, r3
 80033fe:	d002      	beq.n	8003406 <cleanup_stdio+0x1e>
 8003400:	4620      	mov	r0, r4
 8003402:	f002 fdb3 	bl	8005f6c <_fflush_r>
 8003406:	68e1      	ldr	r1, [r4, #12]
 8003408:	4b06      	ldr	r3, [pc, #24]	@ (8003424 <cleanup_stdio+0x3c>)
 800340a:	4299      	cmp	r1, r3
 800340c:	d004      	beq.n	8003418 <cleanup_stdio+0x30>
 800340e:	4620      	mov	r0, r4
 8003410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003414:	f002 bdaa 	b.w	8005f6c <_fflush_r>
 8003418:	bd10      	pop	{r4, pc}
 800341a:	bf00      	nop
 800341c:	2000022c 	.word	0x2000022c
 8003420:	20000294 	.word	0x20000294
 8003424:	200002fc 	.word	0x200002fc

08003428 <global_stdio_init.part.0>:
 8003428:	b510      	push	{r4, lr}
 800342a:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <global_stdio_init.part.0+0x30>)
 800342c:	4c0b      	ldr	r4, [pc, #44]	@ (800345c <global_stdio_init.part.0+0x34>)
 800342e:	4a0c      	ldr	r2, [pc, #48]	@ (8003460 <global_stdio_init.part.0+0x38>)
 8003430:	4620      	mov	r0, r4
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	2104      	movs	r1, #4
 8003436:	2200      	movs	r2, #0
 8003438:	f7ff ff94 	bl	8003364 <std>
 800343c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003440:	2201      	movs	r2, #1
 8003442:	2109      	movs	r1, #9
 8003444:	f7ff ff8e 	bl	8003364 <std>
 8003448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800344c:	2202      	movs	r2, #2
 800344e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003452:	2112      	movs	r1, #18
 8003454:	f7ff bf86 	b.w	8003364 <std>
 8003458:	20000364 	.word	0x20000364
 800345c:	2000022c 	.word	0x2000022c
 8003460:	080033d1 	.word	0x080033d1

08003464 <__sfp_lock_acquire>:
 8003464:	4801      	ldr	r0, [pc, #4]	@ (800346c <__sfp_lock_acquire+0x8>)
 8003466:	f000 b920 	b.w	80036aa <__retarget_lock_acquire_recursive>
 800346a:	bf00      	nop
 800346c:	2000036d 	.word	0x2000036d

08003470 <__sfp_lock_release>:
 8003470:	4801      	ldr	r0, [pc, #4]	@ (8003478 <__sfp_lock_release+0x8>)
 8003472:	f000 b91b 	b.w	80036ac <__retarget_lock_release_recursive>
 8003476:	bf00      	nop
 8003478:	2000036d 	.word	0x2000036d

0800347c <__sinit>:
 800347c:	b510      	push	{r4, lr}
 800347e:	4604      	mov	r4, r0
 8003480:	f7ff fff0 	bl	8003464 <__sfp_lock_acquire>
 8003484:	6a23      	ldr	r3, [r4, #32]
 8003486:	b11b      	cbz	r3, 8003490 <__sinit+0x14>
 8003488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800348c:	f7ff bff0 	b.w	8003470 <__sfp_lock_release>
 8003490:	4b04      	ldr	r3, [pc, #16]	@ (80034a4 <__sinit+0x28>)
 8003492:	6223      	str	r3, [r4, #32]
 8003494:	4b04      	ldr	r3, [pc, #16]	@ (80034a8 <__sinit+0x2c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f5      	bne.n	8003488 <__sinit+0xc>
 800349c:	f7ff ffc4 	bl	8003428 <global_stdio_init.part.0>
 80034a0:	e7f2      	b.n	8003488 <__sinit+0xc>
 80034a2:	bf00      	nop
 80034a4:	080033e9 	.word	0x080033e9
 80034a8:	20000364 	.word	0x20000364

080034ac <_fwalk_sglue>:
 80034ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034b0:	4607      	mov	r7, r0
 80034b2:	4688      	mov	r8, r1
 80034b4:	4614      	mov	r4, r2
 80034b6:	2600      	movs	r6, #0
 80034b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034bc:	f1b9 0901 	subs.w	r9, r9, #1
 80034c0:	d505      	bpl.n	80034ce <_fwalk_sglue+0x22>
 80034c2:	6824      	ldr	r4, [r4, #0]
 80034c4:	2c00      	cmp	r4, #0
 80034c6:	d1f7      	bne.n	80034b8 <_fwalk_sglue+0xc>
 80034c8:	4630      	mov	r0, r6
 80034ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034ce:	89ab      	ldrh	r3, [r5, #12]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d907      	bls.n	80034e4 <_fwalk_sglue+0x38>
 80034d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034d8:	3301      	adds	r3, #1
 80034da:	d003      	beq.n	80034e4 <_fwalk_sglue+0x38>
 80034dc:	4629      	mov	r1, r5
 80034de:	4638      	mov	r0, r7
 80034e0:	47c0      	blx	r8
 80034e2:	4306      	orrs	r6, r0
 80034e4:	3568      	adds	r5, #104	@ 0x68
 80034e6:	e7e9      	b.n	80034bc <_fwalk_sglue+0x10>

080034e8 <siprintf>:
 80034e8:	b40e      	push	{r1, r2, r3}
 80034ea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80034ee:	b500      	push	{lr}
 80034f0:	b09c      	sub	sp, #112	@ 0x70
 80034f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80034f4:	9002      	str	r0, [sp, #8]
 80034f6:	9006      	str	r0, [sp, #24]
 80034f8:	9107      	str	r1, [sp, #28]
 80034fa:	9104      	str	r1, [sp, #16]
 80034fc:	4808      	ldr	r0, [pc, #32]	@ (8003520 <siprintf+0x38>)
 80034fe:	4909      	ldr	r1, [pc, #36]	@ (8003524 <siprintf+0x3c>)
 8003500:	f853 2b04 	ldr.w	r2, [r3], #4
 8003504:	9105      	str	r1, [sp, #20]
 8003506:	6800      	ldr	r0, [r0, #0]
 8003508:	a902      	add	r1, sp, #8
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	f002 fbb2 	bl	8005c74 <_svfiprintf_r>
 8003510:	2200      	movs	r2, #0
 8003512:	9b02      	ldr	r3, [sp, #8]
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	b01c      	add	sp, #112	@ 0x70
 8003518:	f85d eb04 	ldr.w	lr, [sp], #4
 800351c:	b003      	add	sp, #12
 800351e:	4770      	bx	lr
 8003520:	20000018 	.word	0x20000018
 8003524:	ffff0208 	.word	0xffff0208

08003528 <__sread>:
 8003528:	b510      	push	{r4, lr}
 800352a:	460c      	mov	r4, r1
 800352c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003530:	f000 f86c 	bl	800360c <_read_r>
 8003534:	2800      	cmp	r0, #0
 8003536:	bfab      	itete	ge
 8003538:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800353a:	89a3      	ldrhlt	r3, [r4, #12]
 800353c:	181b      	addge	r3, r3, r0
 800353e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003542:	bfac      	ite	ge
 8003544:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003546:	81a3      	strhlt	r3, [r4, #12]
 8003548:	bd10      	pop	{r4, pc}

0800354a <__swrite>:
 800354a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800354e:	461f      	mov	r7, r3
 8003550:	898b      	ldrh	r3, [r1, #12]
 8003552:	4605      	mov	r5, r0
 8003554:	05db      	lsls	r3, r3, #23
 8003556:	460c      	mov	r4, r1
 8003558:	4616      	mov	r6, r2
 800355a:	d505      	bpl.n	8003568 <__swrite+0x1e>
 800355c:	2302      	movs	r3, #2
 800355e:	2200      	movs	r2, #0
 8003560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003564:	f000 f840 	bl	80035e8 <_lseek_r>
 8003568:	89a3      	ldrh	r3, [r4, #12]
 800356a:	4632      	mov	r2, r6
 800356c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003570:	81a3      	strh	r3, [r4, #12]
 8003572:	4628      	mov	r0, r5
 8003574:	463b      	mov	r3, r7
 8003576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800357a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800357e:	f000 b857 	b.w	8003630 <_write_r>

08003582 <__sseek>:
 8003582:	b510      	push	{r4, lr}
 8003584:	460c      	mov	r4, r1
 8003586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800358a:	f000 f82d 	bl	80035e8 <_lseek_r>
 800358e:	1c43      	adds	r3, r0, #1
 8003590:	89a3      	ldrh	r3, [r4, #12]
 8003592:	bf15      	itete	ne
 8003594:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003596:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800359a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800359e:	81a3      	strheq	r3, [r4, #12]
 80035a0:	bf18      	it	ne
 80035a2:	81a3      	strhne	r3, [r4, #12]
 80035a4:	bd10      	pop	{r4, pc}

080035a6 <__sclose>:
 80035a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035aa:	f000 b80d 	b.w	80035c8 <_close_r>

080035ae <memset>:
 80035ae:	4603      	mov	r3, r0
 80035b0:	4402      	add	r2, r0
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d100      	bne.n	80035b8 <memset+0xa>
 80035b6:	4770      	bx	lr
 80035b8:	f803 1b01 	strb.w	r1, [r3], #1
 80035bc:	e7f9      	b.n	80035b2 <memset+0x4>
	...

080035c0 <_localeconv_r>:
 80035c0:	4800      	ldr	r0, [pc, #0]	@ (80035c4 <_localeconv_r+0x4>)
 80035c2:	4770      	bx	lr
 80035c4:	20000158 	.word	0x20000158

080035c8 <_close_r>:
 80035c8:	b538      	push	{r3, r4, r5, lr}
 80035ca:	2300      	movs	r3, #0
 80035cc:	4d05      	ldr	r5, [pc, #20]	@ (80035e4 <_close_r+0x1c>)
 80035ce:	4604      	mov	r4, r0
 80035d0:	4608      	mov	r0, r1
 80035d2:	602b      	str	r3, [r5, #0]
 80035d4:	f7fd fd07 	bl	8000fe6 <_close>
 80035d8:	1c43      	adds	r3, r0, #1
 80035da:	d102      	bne.n	80035e2 <_close_r+0x1a>
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	b103      	cbz	r3, 80035e2 <_close_r+0x1a>
 80035e0:	6023      	str	r3, [r4, #0]
 80035e2:	bd38      	pop	{r3, r4, r5, pc}
 80035e4:	20000368 	.word	0x20000368

080035e8 <_lseek_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	4604      	mov	r4, r0
 80035ec:	4608      	mov	r0, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	2200      	movs	r2, #0
 80035f2:	4d05      	ldr	r5, [pc, #20]	@ (8003608 <_lseek_r+0x20>)
 80035f4:	602a      	str	r2, [r5, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	f7fd fd19 	bl	800102e <_lseek>
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	d102      	bne.n	8003606 <_lseek_r+0x1e>
 8003600:	682b      	ldr	r3, [r5, #0]
 8003602:	b103      	cbz	r3, 8003606 <_lseek_r+0x1e>
 8003604:	6023      	str	r3, [r4, #0]
 8003606:	bd38      	pop	{r3, r4, r5, pc}
 8003608:	20000368 	.word	0x20000368

0800360c <_read_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	4604      	mov	r4, r0
 8003610:	4608      	mov	r0, r1
 8003612:	4611      	mov	r1, r2
 8003614:	2200      	movs	r2, #0
 8003616:	4d05      	ldr	r5, [pc, #20]	@ (800362c <_read_r+0x20>)
 8003618:	602a      	str	r2, [r5, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	f7fd fcaa 	bl	8000f74 <_read>
 8003620:	1c43      	adds	r3, r0, #1
 8003622:	d102      	bne.n	800362a <_read_r+0x1e>
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	b103      	cbz	r3, 800362a <_read_r+0x1e>
 8003628:	6023      	str	r3, [r4, #0]
 800362a:	bd38      	pop	{r3, r4, r5, pc}
 800362c:	20000368 	.word	0x20000368

08003630 <_write_r>:
 8003630:	b538      	push	{r3, r4, r5, lr}
 8003632:	4604      	mov	r4, r0
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	2200      	movs	r2, #0
 800363a:	4d05      	ldr	r5, [pc, #20]	@ (8003650 <_write_r+0x20>)
 800363c:	602a      	str	r2, [r5, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	f7fd fcb5 	bl	8000fae <_write>
 8003644:	1c43      	adds	r3, r0, #1
 8003646:	d102      	bne.n	800364e <_write_r+0x1e>
 8003648:	682b      	ldr	r3, [r5, #0]
 800364a:	b103      	cbz	r3, 800364e <_write_r+0x1e>
 800364c:	6023      	str	r3, [r4, #0]
 800364e:	bd38      	pop	{r3, r4, r5, pc}
 8003650:	20000368 	.word	0x20000368

08003654 <__errno>:
 8003654:	4b01      	ldr	r3, [pc, #4]	@ (800365c <__errno+0x8>)
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000018 	.word	0x20000018

08003660 <__libc_init_array>:
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	2600      	movs	r6, #0
 8003664:	4d0c      	ldr	r5, [pc, #48]	@ (8003698 <__libc_init_array+0x38>)
 8003666:	4c0d      	ldr	r4, [pc, #52]	@ (800369c <__libc_init_array+0x3c>)
 8003668:	1b64      	subs	r4, r4, r5
 800366a:	10a4      	asrs	r4, r4, #2
 800366c:	42a6      	cmp	r6, r4
 800366e:	d109      	bne.n	8003684 <__libc_init_array+0x24>
 8003670:	f003 fb68 	bl	8006d44 <_init>
 8003674:	2600      	movs	r6, #0
 8003676:	4d0a      	ldr	r5, [pc, #40]	@ (80036a0 <__libc_init_array+0x40>)
 8003678:	4c0a      	ldr	r4, [pc, #40]	@ (80036a4 <__libc_init_array+0x44>)
 800367a:	1b64      	subs	r4, r4, r5
 800367c:	10a4      	asrs	r4, r4, #2
 800367e:	42a6      	cmp	r6, r4
 8003680:	d105      	bne.n	800368e <__libc_init_array+0x2e>
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	f855 3b04 	ldr.w	r3, [r5], #4
 8003688:	4798      	blx	r3
 800368a:	3601      	adds	r6, #1
 800368c:	e7ee      	b.n	800366c <__libc_init_array+0xc>
 800368e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003692:	4798      	blx	r3
 8003694:	3601      	adds	r6, #1
 8003696:	e7f2      	b.n	800367e <__libc_init_array+0x1e>
 8003698:	080071b8 	.word	0x080071b8
 800369c:	080071b8 	.word	0x080071b8
 80036a0:	080071b8 	.word	0x080071b8
 80036a4:	080071bc 	.word	0x080071bc

080036a8 <__retarget_lock_init_recursive>:
 80036a8:	4770      	bx	lr

080036aa <__retarget_lock_acquire_recursive>:
 80036aa:	4770      	bx	lr

080036ac <__retarget_lock_release_recursive>:
 80036ac:	4770      	bx	lr

080036ae <memchr>:
 80036ae:	4603      	mov	r3, r0
 80036b0:	b510      	push	{r4, lr}
 80036b2:	b2c9      	uxtb	r1, r1
 80036b4:	4402      	add	r2, r0
 80036b6:	4293      	cmp	r3, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	d101      	bne.n	80036c0 <memchr+0x12>
 80036bc:	2000      	movs	r0, #0
 80036be:	e003      	b.n	80036c8 <memchr+0x1a>
 80036c0:	7804      	ldrb	r4, [r0, #0]
 80036c2:	3301      	adds	r3, #1
 80036c4:	428c      	cmp	r4, r1
 80036c6:	d1f6      	bne.n	80036b6 <memchr+0x8>
 80036c8:	bd10      	pop	{r4, pc}
	...

080036cc <nanf>:
 80036cc:	4800      	ldr	r0, [pc, #0]	@ (80036d0 <nanf+0x4>)
 80036ce:	4770      	bx	lr
 80036d0:	7fc00000 	.word	0x7fc00000

080036d4 <quorem>:
 80036d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d8:	6903      	ldr	r3, [r0, #16]
 80036da:	690c      	ldr	r4, [r1, #16]
 80036dc:	4607      	mov	r7, r0
 80036de:	42a3      	cmp	r3, r4
 80036e0:	db7e      	blt.n	80037e0 <quorem+0x10c>
 80036e2:	3c01      	subs	r4, #1
 80036e4:	00a3      	lsls	r3, r4, #2
 80036e6:	f100 0514 	add.w	r5, r0, #20
 80036ea:	f101 0814 	add.w	r8, r1, #20
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80036fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80036fe:	3301      	adds	r3, #1
 8003700:	429a      	cmp	r2, r3
 8003702:	fbb2 f6f3 	udiv	r6, r2, r3
 8003706:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800370a:	d32e      	bcc.n	800376a <quorem+0x96>
 800370c:	f04f 0a00 	mov.w	sl, #0
 8003710:	46c4      	mov	ip, r8
 8003712:	46ae      	mov	lr, r5
 8003714:	46d3      	mov	fp, sl
 8003716:	f85c 3b04 	ldr.w	r3, [ip], #4
 800371a:	b298      	uxth	r0, r3
 800371c:	fb06 a000 	mla	r0, r6, r0, sl
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	0c02      	lsrs	r2, r0, #16
 8003724:	fb06 2303 	mla	r3, r6, r3, r2
 8003728:	f8de 2000 	ldr.w	r2, [lr]
 800372c:	b280      	uxth	r0, r0
 800372e:	b292      	uxth	r2, r2
 8003730:	1a12      	subs	r2, r2, r0
 8003732:	445a      	add	r2, fp
 8003734:	f8de 0000 	ldr.w	r0, [lr]
 8003738:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800373c:	b29b      	uxth	r3, r3
 800373e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003742:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003746:	b292      	uxth	r2, r2
 8003748:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800374c:	45e1      	cmp	r9, ip
 800374e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003752:	f84e 2b04 	str.w	r2, [lr], #4
 8003756:	d2de      	bcs.n	8003716 <quorem+0x42>
 8003758:	9b00      	ldr	r3, [sp, #0]
 800375a:	58eb      	ldr	r3, [r5, r3]
 800375c:	b92b      	cbnz	r3, 800376a <quorem+0x96>
 800375e:	9b01      	ldr	r3, [sp, #4]
 8003760:	3b04      	subs	r3, #4
 8003762:	429d      	cmp	r5, r3
 8003764:	461a      	mov	r2, r3
 8003766:	d32f      	bcc.n	80037c8 <quorem+0xf4>
 8003768:	613c      	str	r4, [r7, #16]
 800376a:	4638      	mov	r0, r7
 800376c:	f001 f9c4 	bl	8004af8 <__mcmp>
 8003770:	2800      	cmp	r0, #0
 8003772:	db25      	blt.n	80037c0 <quorem+0xec>
 8003774:	4629      	mov	r1, r5
 8003776:	2000      	movs	r0, #0
 8003778:	f858 2b04 	ldr.w	r2, [r8], #4
 800377c:	f8d1 c000 	ldr.w	ip, [r1]
 8003780:	fa1f fe82 	uxth.w	lr, r2
 8003784:	fa1f f38c 	uxth.w	r3, ip
 8003788:	eba3 030e 	sub.w	r3, r3, lr
 800378c:	4403      	add	r3, r0
 800378e:	0c12      	lsrs	r2, r2, #16
 8003790:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003794:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003798:	b29b      	uxth	r3, r3
 800379a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800379e:	45c1      	cmp	r9, r8
 80037a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80037a4:	f841 3b04 	str.w	r3, [r1], #4
 80037a8:	d2e6      	bcs.n	8003778 <quorem+0xa4>
 80037aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80037ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80037b2:	b922      	cbnz	r2, 80037be <quorem+0xea>
 80037b4:	3b04      	subs	r3, #4
 80037b6:	429d      	cmp	r5, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	d30b      	bcc.n	80037d4 <quorem+0x100>
 80037bc:	613c      	str	r4, [r7, #16]
 80037be:	3601      	adds	r6, #1
 80037c0:	4630      	mov	r0, r6
 80037c2:	b003      	add	sp, #12
 80037c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	3b04      	subs	r3, #4
 80037cc:	2a00      	cmp	r2, #0
 80037ce:	d1cb      	bne.n	8003768 <quorem+0x94>
 80037d0:	3c01      	subs	r4, #1
 80037d2:	e7c6      	b.n	8003762 <quorem+0x8e>
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	3b04      	subs	r3, #4
 80037d8:	2a00      	cmp	r2, #0
 80037da:	d1ef      	bne.n	80037bc <quorem+0xe8>
 80037dc:	3c01      	subs	r4, #1
 80037de:	e7ea      	b.n	80037b6 <quorem+0xe2>
 80037e0:	2000      	movs	r0, #0
 80037e2:	e7ee      	b.n	80037c2 <quorem+0xee>
 80037e4:	0000      	movs	r0, r0
	...

080037e8 <_dtoa_r>:
 80037e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ec:	4614      	mov	r4, r2
 80037ee:	461d      	mov	r5, r3
 80037f0:	69c7      	ldr	r7, [r0, #28]
 80037f2:	b097      	sub	sp, #92	@ 0x5c
 80037f4:	4683      	mov	fp, r0
 80037f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80037fa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80037fc:	b97f      	cbnz	r7, 800381e <_dtoa_r+0x36>
 80037fe:	2010      	movs	r0, #16
 8003800:	f000 fe02 	bl	8004408 <malloc>
 8003804:	4602      	mov	r2, r0
 8003806:	f8cb 001c 	str.w	r0, [fp, #28]
 800380a:	b920      	cbnz	r0, 8003816 <_dtoa_r+0x2e>
 800380c:	21ef      	movs	r1, #239	@ 0xef
 800380e:	4ba8      	ldr	r3, [pc, #672]	@ (8003ab0 <_dtoa_r+0x2c8>)
 8003810:	48a8      	ldr	r0, [pc, #672]	@ (8003ab4 <_dtoa_r+0x2cc>)
 8003812:	f002 fc23 	bl	800605c <__assert_func>
 8003816:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800381a:	6007      	str	r7, [r0, #0]
 800381c:	60c7      	str	r7, [r0, #12]
 800381e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003822:	6819      	ldr	r1, [r3, #0]
 8003824:	b159      	cbz	r1, 800383e <_dtoa_r+0x56>
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	2301      	movs	r3, #1
 800382a:	4093      	lsls	r3, r2
 800382c:	604a      	str	r2, [r1, #4]
 800382e:	608b      	str	r3, [r1, #8]
 8003830:	4658      	mov	r0, fp
 8003832:	f000 fedf 	bl	80045f4 <_Bfree>
 8003836:	2200      	movs	r2, #0
 8003838:	f8db 301c 	ldr.w	r3, [fp, #28]
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	1e2b      	subs	r3, r5, #0
 8003840:	bfaf      	iteee	ge
 8003842:	2300      	movge	r3, #0
 8003844:	2201      	movlt	r2, #1
 8003846:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800384a:	9303      	strlt	r3, [sp, #12]
 800384c:	bfa8      	it	ge
 800384e:	6033      	strge	r3, [r6, #0]
 8003850:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003854:	4b98      	ldr	r3, [pc, #608]	@ (8003ab8 <_dtoa_r+0x2d0>)
 8003856:	bfb8      	it	lt
 8003858:	6032      	strlt	r2, [r6, #0]
 800385a:	ea33 0308 	bics.w	r3, r3, r8
 800385e:	d112      	bne.n	8003886 <_dtoa_r+0x9e>
 8003860:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003864:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800386c:	4323      	orrs	r3, r4
 800386e:	f000 8550 	beq.w	8004312 <_dtoa_r+0xb2a>
 8003872:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003874:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003abc <_dtoa_r+0x2d4>
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8552 	beq.w	8004322 <_dtoa_r+0xb3a>
 800387e:	f10a 0303 	add.w	r3, sl, #3
 8003882:	f000 bd4c 	b.w	800431e <_dtoa_r+0xb36>
 8003886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800388a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800388e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003892:	2200      	movs	r2, #0
 8003894:	2300      	movs	r3, #0
 8003896:	f7fd f887 	bl	80009a8 <__aeabi_dcmpeq>
 800389a:	4607      	mov	r7, r0
 800389c:	b158      	cbz	r0, 80038b6 <_dtoa_r+0xce>
 800389e:	2301      	movs	r3, #1
 80038a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80038a6:	b113      	cbz	r3, 80038ae <_dtoa_r+0xc6>
 80038a8:	4b85      	ldr	r3, [pc, #532]	@ (8003ac0 <_dtoa_r+0x2d8>)
 80038aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003ac4 <_dtoa_r+0x2dc>
 80038b2:	f000 bd36 	b.w	8004322 <_dtoa_r+0xb3a>
 80038b6:	ab14      	add	r3, sp, #80	@ 0x50
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	ab15      	add	r3, sp, #84	@ 0x54
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	4658      	mov	r0, fp
 80038c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80038c4:	f001 fa30 	bl	8004d28 <__d2b>
 80038c8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80038cc:	4681      	mov	r9, r0
 80038ce:	2e00      	cmp	r6, #0
 80038d0:	d077      	beq.n	80039c2 <_dtoa_r+0x1da>
 80038d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80038d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80038d8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80038dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038e0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80038e4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80038e8:	9712      	str	r7, [sp, #72]	@ 0x48
 80038ea:	4619      	mov	r1, r3
 80038ec:	2200      	movs	r2, #0
 80038ee:	4b76      	ldr	r3, [pc, #472]	@ (8003ac8 <_dtoa_r+0x2e0>)
 80038f0:	f7fc fc3a 	bl	8000168 <__aeabi_dsub>
 80038f4:	a368      	add	r3, pc, #416	@ (adr r3, 8003a98 <_dtoa_r+0x2b0>)
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	f7fc fded 	bl	80004d8 <__aeabi_dmul>
 80038fe:	a368      	add	r3, pc, #416	@ (adr r3, 8003aa0 <_dtoa_r+0x2b8>)
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f7fc fc32 	bl	800016c <__adddf3>
 8003908:	4604      	mov	r4, r0
 800390a:	4630      	mov	r0, r6
 800390c:	460d      	mov	r5, r1
 800390e:	f7fc fd79 	bl	8000404 <__aeabi_i2d>
 8003912:	a365      	add	r3, pc, #404	@ (adr r3, 8003aa8 <_dtoa_r+0x2c0>)
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	f7fc fdde 	bl	80004d8 <__aeabi_dmul>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4620      	mov	r0, r4
 8003922:	4629      	mov	r1, r5
 8003924:	f7fc fc22 	bl	800016c <__adddf3>
 8003928:	4604      	mov	r4, r0
 800392a:	460d      	mov	r5, r1
 800392c:	f7fd f884 	bl	8000a38 <__aeabi_d2iz>
 8003930:	2200      	movs	r2, #0
 8003932:	4607      	mov	r7, r0
 8003934:	2300      	movs	r3, #0
 8003936:	4620      	mov	r0, r4
 8003938:	4629      	mov	r1, r5
 800393a:	f7fd f83f 	bl	80009bc <__aeabi_dcmplt>
 800393e:	b140      	cbz	r0, 8003952 <_dtoa_r+0x16a>
 8003940:	4638      	mov	r0, r7
 8003942:	f7fc fd5f 	bl	8000404 <__aeabi_i2d>
 8003946:	4622      	mov	r2, r4
 8003948:	462b      	mov	r3, r5
 800394a:	f7fd f82d 	bl	80009a8 <__aeabi_dcmpeq>
 800394e:	b900      	cbnz	r0, 8003952 <_dtoa_r+0x16a>
 8003950:	3f01      	subs	r7, #1
 8003952:	2f16      	cmp	r7, #22
 8003954:	d853      	bhi.n	80039fe <_dtoa_r+0x216>
 8003956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800395a:	4b5c      	ldr	r3, [pc, #368]	@ (8003acc <_dtoa_r+0x2e4>)
 800395c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f7fd f82a 	bl	80009bc <__aeabi_dcmplt>
 8003968:	2800      	cmp	r0, #0
 800396a:	d04a      	beq.n	8003a02 <_dtoa_r+0x21a>
 800396c:	2300      	movs	r3, #0
 800396e:	3f01      	subs	r7, #1
 8003970:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003972:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003974:	1b9b      	subs	r3, r3, r6
 8003976:	1e5a      	subs	r2, r3, #1
 8003978:	bf46      	itte	mi
 800397a:	f1c3 0801 	rsbmi	r8, r3, #1
 800397e:	2300      	movmi	r3, #0
 8003980:	f04f 0800 	movpl.w	r8, #0
 8003984:	9209      	str	r2, [sp, #36]	@ 0x24
 8003986:	bf48      	it	mi
 8003988:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800398a:	2f00      	cmp	r7, #0
 800398c:	db3b      	blt.n	8003a06 <_dtoa_r+0x21e>
 800398e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003990:	970e      	str	r7, [sp, #56]	@ 0x38
 8003992:	443b      	add	r3, r7
 8003994:	9309      	str	r3, [sp, #36]	@ 0x24
 8003996:	2300      	movs	r3, #0
 8003998:	930a      	str	r3, [sp, #40]	@ 0x28
 800399a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800399c:	2b09      	cmp	r3, #9
 800399e:	d866      	bhi.n	8003a6e <_dtoa_r+0x286>
 80039a0:	2b05      	cmp	r3, #5
 80039a2:	bfc4      	itt	gt
 80039a4:	3b04      	subgt	r3, #4
 80039a6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80039a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80039aa:	bfc8      	it	gt
 80039ac:	2400      	movgt	r4, #0
 80039ae:	f1a3 0302 	sub.w	r3, r3, #2
 80039b2:	bfd8      	it	le
 80039b4:	2401      	movle	r4, #1
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d864      	bhi.n	8003a84 <_dtoa_r+0x29c>
 80039ba:	e8df f003 	tbb	[pc, r3]
 80039be:	382b      	.short	0x382b
 80039c0:	5636      	.short	0x5636
 80039c2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80039c6:	441e      	add	r6, r3
 80039c8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	bfc1      	itttt	gt
 80039d0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80039d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80039d8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80039dc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80039e0:	bfd6      	itet	le
 80039e2:	f1c3 0320 	rsble	r3, r3, #32
 80039e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80039ea:	fa04 f003 	lslle.w	r0, r4, r3
 80039ee:	f7fc fcf9 	bl	80003e4 <__aeabi_ui2d>
 80039f2:	2201      	movs	r2, #1
 80039f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80039f8:	3e01      	subs	r6, #1
 80039fa:	9212      	str	r2, [sp, #72]	@ 0x48
 80039fc:	e775      	b.n	80038ea <_dtoa_r+0x102>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e7b6      	b.n	8003970 <_dtoa_r+0x188>
 8003a02:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003a04:	e7b5      	b.n	8003972 <_dtoa_r+0x18a>
 8003a06:	427b      	negs	r3, r7
 8003a08:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	eba8 0807 	sub.w	r8, r8, r7
 8003a10:	930e      	str	r3, [sp, #56]	@ 0x38
 8003a12:	e7c2      	b.n	800399a <_dtoa_r+0x1b2>
 8003a14:	2300      	movs	r3, #0
 8003a16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	dc35      	bgt.n	8003a8a <_dtoa_r+0x2a2>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	461a      	mov	r2, r3
 8003a22:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003a26:	9221      	str	r2, [sp, #132]	@ 0x84
 8003a28:	e00b      	b.n	8003a42 <_dtoa_r+0x25a>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e7f3      	b.n	8003a16 <_dtoa_r+0x22e>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	9308      	str	r3, [sp, #32]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	9307      	str	r3, [sp, #28]
 8003a3e:	bfb8      	it	lt
 8003a40:	2301      	movlt	r3, #1
 8003a42:	2100      	movs	r1, #0
 8003a44:	2204      	movs	r2, #4
 8003a46:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003a4a:	f102 0514 	add.w	r5, r2, #20
 8003a4e:	429d      	cmp	r5, r3
 8003a50:	d91f      	bls.n	8003a92 <_dtoa_r+0x2aa>
 8003a52:	6041      	str	r1, [r0, #4]
 8003a54:	4658      	mov	r0, fp
 8003a56:	f000 fd8d 	bl	8004574 <_Balloc>
 8003a5a:	4682      	mov	sl, r0
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	d139      	bne.n	8003ad4 <_dtoa_r+0x2ec>
 8003a60:	4602      	mov	r2, r0
 8003a62:	f240 11af 	movw	r1, #431	@ 0x1af
 8003a66:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad0 <_dtoa_r+0x2e8>)
 8003a68:	e6d2      	b.n	8003810 <_dtoa_r+0x28>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e7e0      	b.n	8003a30 <_dtoa_r+0x248>
 8003a6e:	2401      	movs	r4, #1
 8003a70:	2300      	movs	r3, #0
 8003a72:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003a74:	9320      	str	r3, [sp, #128]	@ 0x80
 8003a76:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003a80:	2312      	movs	r3, #18
 8003a82:	e7d0      	b.n	8003a26 <_dtoa_r+0x23e>
 8003a84:	2301      	movs	r3, #1
 8003a86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a88:	e7f5      	b.n	8003a76 <_dtoa_r+0x28e>
 8003a8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003a8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003a90:	e7d7      	b.n	8003a42 <_dtoa_r+0x25a>
 8003a92:	3101      	adds	r1, #1
 8003a94:	0052      	lsls	r2, r2, #1
 8003a96:	e7d8      	b.n	8003a4a <_dtoa_r+0x262>
 8003a98:	636f4361 	.word	0x636f4361
 8003a9c:	3fd287a7 	.word	0x3fd287a7
 8003aa0:	8b60c8b3 	.word	0x8b60c8b3
 8003aa4:	3fc68a28 	.word	0x3fc68a28
 8003aa8:	509f79fb 	.word	0x509f79fb
 8003aac:	3fd34413 	.word	0x3fd34413
 8003ab0:	08006dc8 	.word	0x08006dc8
 8003ab4:	08006ddf 	.word	0x08006ddf
 8003ab8:	7ff00000 	.word	0x7ff00000
 8003abc:	08006dc4 	.word	0x08006dc4
 8003ac0:	08006d93 	.word	0x08006d93
 8003ac4:	08006d92 	.word	0x08006d92
 8003ac8:	3ff80000 	.word	0x3ff80000
 8003acc:	08006ed8 	.word	0x08006ed8
 8003ad0:	08006e37 	.word	0x08006e37
 8003ad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003ad8:	6018      	str	r0, [r3, #0]
 8003ada:	9b07      	ldr	r3, [sp, #28]
 8003adc:	2b0e      	cmp	r3, #14
 8003ade:	f200 80a4 	bhi.w	8003c2a <_dtoa_r+0x442>
 8003ae2:	2c00      	cmp	r4, #0
 8003ae4:	f000 80a1 	beq.w	8003c2a <_dtoa_r+0x442>
 8003ae8:	2f00      	cmp	r7, #0
 8003aea:	dd33      	ble.n	8003b54 <_dtoa_r+0x36c>
 8003aec:	4b86      	ldr	r3, [pc, #536]	@ (8003d08 <_dtoa_r+0x520>)
 8003aee:	f007 020f 	and.w	r2, r7, #15
 8003af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003af6:	05f8      	lsls	r0, r7, #23
 8003af8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003afc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003b00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003b04:	d516      	bpl.n	8003b34 <_dtoa_r+0x34c>
 8003b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003b0a:	4b80      	ldr	r3, [pc, #512]	@ (8003d0c <_dtoa_r+0x524>)
 8003b0c:	2603      	movs	r6, #3
 8003b0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b12:	f7fc fe0b 	bl	800072c <__aeabi_ddiv>
 8003b16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b1a:	f004 040f 	and.w	r4, r4, #15
 8003b1e:	4d7b      	ldr	r5, [pc, #492]	@ (8003d0c <_dtoa_r+0x524>)
 8003b20:	b954      	cbnz	r4, 8003b38 <_dtoa_r+0x350>
 8003b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b2a:	f7fc fdff 	bl	800072c <__aeabi_ddiv>
 8003b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b32:	e028      	b.n	8003b86 <_dtoa_r+0x39e>
 8003b34:	2602      	movs	r6, #2
 8003b36:	e7f2      	b.n	8003b1e <_dtoa_r+0x336>
 8003b38:	07e1      	lsls	r1, r4, #31
 8003b3a:	d508      	bpl.n	8003b4e <_dtoa_r+0x366>
 8003b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003b44:	f7fc fcc8 	bl	80004d8 <__aeabi_dmul>
 8003b48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b4c:	3601      	adds	r6, #1
 8003b4e:	1064      	asrs	r4, r4, #1
 8003b50:	3508      	adds	r5, #8
 8003b52:	e7e5      	b.n	8003b20 <_dtoa_r+0x338>
 8003b54:	f000 80d2 	beq.w	8003cfc <_dtoa_r+0x514>
 8003b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003b5c:	427c      	negs	r4, r7
 8003b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8003d08 <_dtoa_r+0x520>)
 8003b60:	f004 020f 	and.w	r2, r4, #15
 8003b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f7fc fcb4 	bl	80004d8 <__aeabi_dmul>
 8003b70:	2602      	movs	r6, #2
 8003b72:	2300      	movs	r3, #0
 8003b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b78:	4d64      	ldr	r5, [pc, #400]	@ (8003d0c <_dtoa_r+0x524>)
 8003b7a:	1124      	asrs	r4, r4, #4
 8003b7c:	2c00      	cmp	r4, #0
 8003b7e:	f040 80b2 	bne.w	8003ce6 <_dtoa_r+0x4fe>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1d3      	bne.n	8003b2e <_dtoa_r+0x346>
 8003b86:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003b8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80b7 	beq.w	8003d00 <_dtoa_r+0x518>
 8003b92:	2200      	movs	r2, #0
 8003b94:	4620      	mov	r0, r4
 8003b96:	4629      	mov	r1, r5
 8003b98:	4b5d      	ldr	r3, [pc, #372]	@ (8003d10 <_dtoa_r+0x528>)
 8003b9a:	f7fc ff0f 	bl	80009bc <__aeabi_dcmplt>
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	f000 80ae 	beq.w	8003d00 <_dtoa_r+0x518>
 8003ba4:	9b07      	ldr	r3, [sp, #28]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80aa 	beq.w	8003d00 <_dtoa_r+0x518>
 8003bac:	9b08      	ldr	r3, [sp, #32]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	dd37      	ble.n	8003c22 <_dtoa_r+0x43a>
 8003bb2:	1e7b      	subs	r3, r7, #1
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	9304      	str	r3, [sp, #16]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	4629      	mov	r1, r5
 8003bbc:	4b55      	ldr	r3, [pc, #340]	@ (8003d14 <_dtoa_r+0x52c>)
 8003bbe:	f7fc fc8b 	bl	80004d8 <__aeabi_dmul>
 8003bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bc6:	9c08      	ldr	r4, [sp, #32]
 8003bc8:	3601      	adds	r6, #1
 8003bca:	4630      	mov	r0, r6
 8003bcc:	f7fc fc1a 	bl	8000404 <__aeabi_i2d>
 8003bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bd4:	f7fc fc80 	bl	80004d8 <__aeabi_dmul>
 8003bd8:	2200      	movs	r2, #0
 8003bda:	4b4f      	ldr	r3, [pc, #316]	@ (8003d18 <_dtoa_r+0x530>)
 8003bdc:	f7fc fac6 	bl	800016c <__adddf3>
 8003be0:	4605      	mov	r5, r0
 8003be2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003be6:	2c00      	cmp	r4, #0
 8003be8:	f040 809a 	bne.w	8003d20 <_dtoa_r+0x538>
 8003bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8003d1c <_dtoa_r+0x534>)
 8003bf4:	f7fc fab8 	bl	8000168 <__aeabi_dsub>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c00:	462a      	mov	r2, r5
 8003c02:	4633      	mov	r3, r6
 8003c04:	f7fc fef8 	bl	80009f8 <__aeabi_dcmpgt>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	f040 828e 	bne.w	800412a <_dtoa_r+0x942>
 8003c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c12:	462a      	mov	r2, r5
 8003c14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003c18:	f7fc fed0 	bl	80009bc <__aeabi_dcmplt>
 8003c1c:	2800      	cmp	r0, #0
 8003c1e:	f040 8127 	bne.w	8003e70 <_dtoa_r+0x688>
 8003c22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003c26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003c2a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f2c0 8163 	blt.w	8003ef8 <_dtoa_r+0x710>
 8003c32:	2f0e      	cmp	r7, #14
 8003c34:	f300 8160 	bgt.w	8003ef8 <_dtoa_r+0x710>
 8003c38:	4b33      	ldr	r3, [pc, #204]	@ (8003d08 <_dtoa_r+0x520>)
 8003c3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003c3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c42:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003c46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	da03      	bge.n	8003c54 <_dtoa_r+0x46c>
 8003c4c:	9b07      	ldr	r3, [sp, #28]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f340 8100 	ble.w	8003e54 <_dtoa_r+0x66c>
 8003c54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003c58:	4656      	mov	r6, sl
 8003c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c5e:	4620      	mov	r0, r4
 8003c60:	4629      	mov	r1, r5
 8003c62:	f7fc fd63 	bl	800072c <__aeabi_ddiv>
 8003c66:	f7fc fee7 	bl	8000a38 <__aeabi_d2iz>
 8003c6a:	4680      	mov	r8, r0
 8003c6c:	f7fc fbca 	bl	8000404 <__aeabi_i2d>
 8003c70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c74:	f7fc fc30 	bl	80004d8 <__aeabi_dmul>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	4629      	mov	r1, r5
 8003c80:	f7fc fa72 	bl	8000168 <__aeabi_dsub>
 8003c84:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003c88:	9d07      	ldr	r5, [sp, #28]
 8003c8a:	f806 4b01 	strb.w	r4, [r6], #1
 8003c8e:	eba6 040a 	sub.w	r4, r6, sl
 8003c92:	42a5      	cmp	r5, r4
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	f040 8116 	bne.w	8003ec8 <_dtoa_r+0x6e0>
 8003c9c:	f7fc fa66 	bl	800016c <__adddf3>
 8003ca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	460d      	mov	r5, r1
 8003ca8:	f7fc fea6 	bl	80009f8 <__aeabi_dcmpgt>
 8003cac:	2800      	cmp	r0, #0
 8003cae:	f040 80f8 	bne.w	8003ea2 <_dtoa_r+0x6ba>
 8003cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	4629      	mov	r1, r5
 8003cba:	f7fc fe75 	bl	80009a8 <__aeabi_dcmpeq>
 8003cbe:	b118      	cbz	r0, 8003cc8 <_dtoa_r+0x4e0>
 8003cc0:	f018 0f01 	tst.w	r8, #1
 8003cc4:	f040 80ed 	bne.w	8003ea2 <_dtoa_r+0x6ba>
 8003cc8:	4649      	mov	r1, r9
 8003cca:	4658      	mov	r0, fp
 8003ccc:	f000 fc92 	bl	80045f4 <_Bfree>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	7033      	strb	r3, [r6, #0]
 8003cd4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003cd6:	3701      	adds	r7, #1
 8003cd8:	601f      	str	r7, [r3, #0]
 8003cda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8320 	beq.w	8004322 <_dtoa_r+0xb3a>
 8003ce2:	601e      	str	r6, [r3, #0]
 8003ce4:	e31d      	b.n	8004322 <_dtoa_r+0xb3a>
 8003ce6:	07e2      	lsls	r2, r4, #31
 8003ce8:	d505      	bpl.n	8003cf6 <_dtoa_r+0x50e>
 8003cea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003cee:	f7fc fbf3 	bl	80004d8 <__aeabi_dmul>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	3601      	adds	r6, #1
 8003cf6:	1064      	asrs	r4, r4, #1
 8003cf8:	3508      	adds	r5, #8
 8003cfa:	e73f      	b.n	8003b7c <_dtoa_r+0x394>
 8003cfc:	2602      	movs	r6, #2
 8003cfe:	e742      	b.n	8003b86 <_dtoa_r+0x39e>
 8003d00:	9c07      	ldr	r4, [sp, #28]
 8003d02:	9704      	str	r7, [sp, #16]
 8003d04:	e761      	b.n	8003bca <_dtoa_r+0x3e2>
 8003d06:	bf00      	nop
 8003d08:	08006ed8 	.word	0x08006ed8
 8003d0c:	08006eb0 	.word	0x08006eb0
 8003d10:	3ff00000 	.word	0x3ff00000
 8003d14:	40240000 	.word	0x40240000
 8003d18:	401c0000 	.word	0x401c0000
 8003d1c:	40140000 	.word	0x40140000
 8003d20:	4b70      	ldr	r3, [pc, #448]	@ (8003ee4 <_dtoa_r+0x6fc>)
 8003d22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003d24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003d28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003d2c:	4454      	add	r4, sl
 8003d2e:	2900      	cmp	r1, #0
 8003d30:	d045      	beq.n	8003dbe <_dtoa_r+0x5d6>
 8003d32:	2000      	movs	r0, #0
 8003d34:	496c      	ldr	r1, [pc, #432]	@ (8003ee8 <_dtoa_r+0x700>)
 8003d36:	f7fc fcf9 	bl	800072c <__aeabi_ddiv>
 8003d3a:	4633      	mov	r3, r6
 8003d3c:	462a      	mov	r2, r5
 8003d3e:	f7fc fa13 	bl	8000168 <__aeabi_dsub>
 8003d42:	4656      	mov	r6, sl
 8003d44:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d4c:	f7fc fe74 	bl	8000a38 <__aeabi_d2iz>
 8003d50:	4605      	mov	r5, r0
 8003d52:	f7fc fb57 	bl	8000404 <__aeabi_i2d>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d5e:	f7fc fa03 	bl	8000168 <__aeabi_dsub>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	3530      	adds	r5, #48	@ 0x30
 8003d68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003d70:	f806 5b01 	strb.w	r5, [r6], #1
 8003d74:	f7fc fe22 	bl	80009bc <__aeabi_dcmplt>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d163      	bne.n	8003e44 <_dtoa_r+0x65c>
 8003d7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d80:	2000      	movs	r0, #0
 8003d82:	495a      	ldr	r1, [pc, #360]	@ (8003eec <_dtoa_r+0x704>)
 8003d84:	f7fc f9f0 	bl	8000168 <__aeabi_dsub>
 8003d88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003d8c:	f7fc fe16 	bl	80009bc <__aeabi_dcmplt>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	f040 8087 	bne.w	8003ea4 <_dtoa_r+0x6bc>
 8003d96:	42a6      	cmp	r6, r4
 8003d98:	f43f af43 	beq.w	8003c22 <_dtoa_r+0x43a>
 8003d9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003da0:	2200      	movs	r2, #0
 8003da2:	4b53      	ldr	r3, [pc, #332]	@ (8003ef0 <_dtoa_r+0x708>)
 8003da4:	f7fc fb98 	bl	80004d8 <__aeabi_dmul>
 8003da8:	2200      	movs	r2, #0
 8003daa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003db2:	4b4f      	ldr	r3, [pc, #316]	@ (8003ef0 <_dtoa_r+0x708>)
 8003db4:	f7fc fb90 	bl	80004d8 <__aeabi_dmul>
 8003db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003dbc:	e7c4      	b.n	8003d48 <_dtoa_r+0x560>
 8003dbe:	4631      	mov	r1, r6
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	f7fc fb89 	bl	80004d8 <__aeabi_dmul>
 8003dc6:	4656      	mov	r6, sl
 8003dc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003dcc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dd2:	f7fc fe31 	bl	8000a38 <__aeabi_d2iz>
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	f7fc fb14 	bl	8000404 <__aeabi_i2d>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003de4:	f7fc f9c0 	bl	8000168 <__aeabi_dsub>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	3530      	adds	r5, #48	@ 0x30
 8003dee:	f806 5b01 	strb.w	r5, [r6], #1
 8003df2:	42a6      	cmp	r6, r4
 8003df4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	d124      	bne.n	8003e48 <_dtoa_r+0x660>
 8003dfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003e02:	4b39      	ldr	r3, [pc, #228]	@ (8003ee8 <_dtoa_r+0x700>)
 8003e04:	f7fc f9b2 	bl	800016c <__adddf3>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e10:	f7fc fdf2 	bl	80009f8 <__aeabi_dcmpgt>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d145      	bne.n	8003ea4 <_dtoa_r+0x6bc>
 8003e18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	4932      	ldr	r1, [pc, #200]	@ (8003ee8 <_dtoa_r+0x700>)
 8003e20:	f7fc f9a2 	bl	8000168 <__aeabi_dsub>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e2c:	f7fc fdc6 	bl	80009bc <__aeabi_dcmplt>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	f43f aef6 	beq.w	8003c22 <_dtoa_r+0x43a>
 8003e36:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003e38:	1e73      	subs	r3, r6, #1
 8003e3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003e3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003e40:	2b30      	cmp	r3, #48	@ 0x30
 8003e42:	d0f8      	beq.n	8003e36 <_dtoa_r+0x64e>
 8003e44:	9f04      	ldr	r7, [sp, #16]
 8003e46:	e73f      	b.n	8003cc8 <_dtoa_r+0x4e0>
 8003e48:	4b29      	ldr	r3, [pc, #164]	@ (8003ef0 <_dtoa_r+0x708>)
 8003e4a:	f7fc fb45 	bl	80004d8 <__aeabi_dmul>
 8003e4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e52:	e7bc      	b.n	8003dce <_dtoa_r+0x5e6>
 8003e54:	d10c      	bne.n	8003e70 <_dtoa_r+0x688>
 8003e56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4b25      	ldr	r3, [pc, #148]	@ (8003ef4 <_dtoa_r+0x70c>)
 8003e5e:	f7fc fb3b 	bl	80004d8 <__aeabi_dmul>
 8003e62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e66:	f7fc fdbd 	bl	80009e4 <__aeabi_dcmpge>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	f000 815b 	beq.w	8004126 <_dtoa_r+0x93e>
 8003e70:	2400      	movs	r4, #0
 8003e72:	4625      	mov	r5, r4
 8003e74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e76:	4656      	mov	r6, sl
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	9304      	str	r3, [sp, #16]
 8003e7c:	2700      	movs	r7, #0
 8003e7e:	4621      	mov	r1, r4
 8003e80:	4658      	mov	r0, fp
 8003e82:	f000 fbb7 	bl	80045f4 <_Bfree>
 8003e86:	2d00      	cmp	r5, #0
 8003e88:	d0dc      	beq.n	8003e44 <_dtoa_r+0x65c>
 8003e8a:	b12f      	cbz	r7, 8003e98 <_dtoa_r+0x6b0>
 8003e8c:	42af      	cmp	r7, r5
 8003e8e:	d003      	beq.n	8003e98 <_dtoa_r+0x6b0>
 8003e90:	4639      	mov	r1, r7
 8003e92:	4658      	mov	r0, fp
 8003e94:	f000 fbae 	bl	80045f4 <_Bfree>
 8003e98:	4629      	mov	r1, r5
 8003e9a:	4658      	mov	r0, fp
 8003e9c:	f000 fbaa 	bl	80045f4 <_Bfree>
 8003ea0:	e7d0      	b.n	8003e44 <_dtoa_r+0x65c>
 8003ea2:	9704      	str	r7, [sp, #16]
 8003ea4:	4633      	mov	r3, r6
 8003ea6:	461e      	mov	r6, r3
 8003ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003eac:	2a39      	cmp	r2, #57	@ 0x39
 8003eae:	d107      	bne.n	8003ec0 <_dtoa_r+0x6d8>
 8003eb0:	459a      	cmp	sl, r3
 8003eb2:	d1f8      	bne.n	8003ea6 <_dtoa_r+0x6be>
 8003eb4:	9a04      	ldr	r2, [sp, #16]
 8003eb6:	3201      	adds	r2, #1
 8003eb8:	9204      	str	r2, [sp, #16]
 8003eba:	2230      	movs	r2, #48	@ 0x30
 8003ebc:	f88a 2000 	strb.w	r2, [sl]
 8003ec0:	781a      	ldrb	r2, [r3, #0]
 8003ec2:	3201      	adds	r2, #1
 8003ec4:	701a      	strb	r2, [r3, #0]
 8003ec6:	e7bd      	b.n	8003e44 <_dtoa_r+0x65c>
 8003ec8:	2200      	movs	r2, #0
 8003eca:	4b09      	ldr	r3, [pc, #36]	@ (8003ef0 <_dtoa_r+0x708>)
 8003ecc:	f7fc fb04 	bl	80004d8 <__aeabi_dmul>
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	460d      	mov	r5, r1
 8003ed8:	f7fc fd66 	bl	80009a8 <__aeabi_dcmpeq>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	f43f aebc 	beq.w	8003c5a <_dtoa_r+0x472>
 8003ee2:	e6f1      	b.n	8003cc8 <_dtoa_r+0x4e0>
 8003ee4:	08006ed8 	.word	0x08006ed8
 8003ee8:	3fe00000 	.word	0x3fe00000
 8003eec:	3ff00000 	.word	0x3ff00000
 8003ef0:	40240000 	.word	0x40240000
 8003ef4:	40140000 	.word	0x40140000
 8003ef8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003efa:	2a00      	cmp	r2, #0
 8003efc:	f000 80db 	beq.w	80040b6 <_dtoa_r+0x8ce>
 8003f00:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003f02:	2a01      	cmp	r2, #1
 8003f04:	f300 80bf 	bgt.w	8004086 <_dtoa_r+0x89e>
 8003f08:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003f0a:	2a00      	cmp	r2, #0
 8003f0c:	f000 80b7 	beq.w	800407e <_dtoa_r+0x896>
 8003f10:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003f14:	4646      	mov	r6, r8
 8003f16:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003f18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	441a      	add	r2, r3
 8003f1e:	4658      	mov	r0, fp
 8003f20:	4498      	add	r8, r3
 8003f22:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f24:	f000 fc64 	bl	80047f0 <__i2b>
 8003f28:	4605      	mov	r5, r0
 8003f2a:	b15e      	cbz	r6, 8003f44 <_dtoa_r+0x75c>
 8003f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	dd08      	ble.n	8003f44 <_dtoa_r+0x75c>
 8003f32:	42b3      	cmp	r3, r6
 8003f34:	bfa8      	it	ge
 8003f36:	4633      	movge	r3, r6
 8003f38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f3a:	eba8 0803 	sub.w	r8, r8, r3
 8003f3e:	1af6      	subs	r6, r6, r3
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f46:	b1f3      	cbz	r3, 8003f86 <_dtoa_r+0x79e>
 8003f48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80b7 	beq.w	80040be <_dtoa_r+0x8d6>
 8003f50:	b18c      	cbz	r4, 8003f76 <_dtoa_r+0x78e>
 8003f52:	4629      	mov	r1, r5
 8003f54:	4622      	mov	r2, r4
 8003f56:	4658      	mov	r0, fp
 8003f58:	f000 fd08 	bl	800496c <__pow5mult>
 8003f5c:	464a      	mov	r2, r9
 8003f5e:	4601      	mov	r1, r0
 8003f60:	4605      	mov	r5, r0
 8003f62:	4658      	mov	r0, fp
 8003f64:	f000 fc5a 	bl	800481c <__multiply>
 8003f68:	4649      	mov	r1, r9
 8003f6a:	9004      	str	r0, [sp, #16]
 8003f6c:	4658      	mov	r0, fp
 8003f6e:	f000 fb41 	bl	80045f4 <_Bfree>
 8003f72:	9b04      	ldr	r3, [sp, #16]
 8003f74:	4699      	mov	r9, r3
 8003f76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f78:	1b1a      	subs	r2, r3, r4
 8003f7a:	d004      	beq.n	8003f86 <_dtoa_r+0x79e>
 8003f7c:	4649      	mov	r1, r9
 8003f7e:	4658      	mov	r0, fp
 8003f80:	f000 fcf4 	bl	800496c <__pow5mult>
 8003f84:	4681      	mov	r9, r0
 8003f86:	2101      	movs	r1, #1
 8003f88:	4658      	mov	r0, fp
 8003f8a:	f000 fc31 	bl	80047f0 <__i2b>
 8003f8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f90:	4604      	mov	r4, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 81c9 	beq.w	800432a <_dtoa_r+0xb42>
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4601      	mov	r1, r0
 8003f9c:	4658      	mov	r0, fp
 8003f9e:	f000 fce5 	bl	800496c <__pow5mult>
 8003fa2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	f300 808f 	bgt.w	80040ca <_dtoa_r+0x8e2>
 8003fac:	9b02      	ldr	r3, [sp, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f040 8087 	bne.w	80040c2 <_dtoa_r+0x8da>
 8003fb4:	9b03      	ldr	r3, [sp, #12]
 8003fb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 8083 	bne.w	80040c6 <_dtoa_r+0x8de>
 8003fc0:	9b03      	ldr	r3, [sp, #12]
 8003fc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fc6:	0d1b      	lsrs	r3, r3, #20
 8003fc8:	051b      	lsls	r3, r3, #20
 8003fca:	b12b      	cbz	r3, 8003fd8 <_dtoa_r+0x7f0>
 8003fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fce:	f108 0801 	add.w	r8, r8, #1
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8003fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 81aa 	beq.w	8004336 <_dtoa_r+0xb4e>
 8003fe2:	6923      	ldr	r3, [r4, #16]
 8003fe4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003fe8:	6918      	ldr	r0, [r3, #16]
 8003fea:	f000 fbb5 	bl	8004758 <__hi0bits>
 8003fee:	f1c0 0020 	rsb	r0, r0, #32
 8003ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ff4:	4418      	add	r0, r3
 8003ff6:	f010 001f 	ands.w	r0, r0, #31
 8003ffa:	d071      	beq.n	80040e0 <_dtoa_r+0x8f8>
 8003ffc:	f1c0 0320 	rsb	r3, r0, #32
 8004000:	2b04      	cmp	r3, #4
 8004002:	dd65      	ble.n	80040d0 <_dtoa_r+0x8e8>
 8004004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004006:	f1c0 001c 	rsb	r0, r0, #28
 800400a:	4403      	add	r3, r0
 800400c:	4480      	add	r8, r0
 800400e:	4406      	add	r6, r0
 8004010:	9309      	str	r3, [sp, #36]	@ 0x24
 8004012:	f1b8 0f00 	cmp.w	r8, #0
 8004016:	dd05      	ble.n	8004024 <_dtoa_r+0x83c>
 8004018:	4649      	mov	r1, r9
 800401a:	4642      	mov	r2, r8
 800401c:	4658      	mov	r0, fp
 800401e:	f000 fcff 	bl	8004a20 <__lshift>
 8004022:	4681      	mov	r9, r0
 8004024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	dd05      	ble.n	8004036 <_dtoa_r+0x84e>
 800402a:	4621      	mov	r1, r4
 800402c:	461a      	mov	r2, r3
 800402e:	4658      	mov	r0, fp
 8004030:	f000 fcf6 	bl	8004a20 <__lshift>
 8004034:	4604      	mov	r4, r0
 8004036:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d053      	beq.n	80040e4 <_dtoa_r+0x8fc>
 800403c:	4621      	mov	r1, r4
 800403e:	4648      	mov	r0, r9
 8004040:	f000 fd5a 	bl	8004af8 <__mcmp>
 8004044:	2800      	cmp	r0, #0
 8004046:	da4d      	bge.n	80040e4 <_dtoa_r+0x8fc>
 8004048:	1e7b      	subs	r3, r7, #1
 800404a:	4649      	mov	r1, r9
 800404c:	9304      	str	r3, [sp, #16]
 800404e:	220a      	movs	r2, #10
 8004050:	2300      	movs	r3, #0
 8004052:	4658      	mov	r0, fp
 8004054:	f000 faf0 	bl	8004638 <__multadd>
 8004058:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800405a:	4681      	mov	r9, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 816c 	beq.w	800433a <_dtoa_r+0xb52>
 8004062:	2300      	movs	r3, #0
 8004064:	4629      	mov	r1, r5
 8004066:	220a      	movs	r2, #10
 8004068:	4658      	mov	r0, fp
 800406a:	f000 fae5 	bl	8004638 <__multadd>
 800406e:	9b08      	ldr	r3, [sp, #32]
 8004070:	4605      	mov	r5, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	dc61      	bgt.n	800413a <_dtoa_r+0x952>
 8004076:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004078:	2b02      	cmp	r3, #2
 800407a:	dc3b      	bgt.n	80040f4 <_dtoa_r+0x90c>
 800407c:	e05d      	b.n	800413a <_dtoa_r+0x952>
 800407e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004080:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004084:	e746      	b.n	8003f14 <_dtoa_r+0x72c>
 8004086:	9b07      	ldr	r3, [sp, #28]
 8004088:	1e5c      	subs	r4, r3, #1
 800408a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800408c:	42a3      	cmp	r3, r4
 800408e:	bfbf      	itttt	lt
 8004090:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004092:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004094:	1ae3      	sublt	r3, r4, r3
 8004096:	18d2      	addlt	r2, r2, r3
 8004098:	bfa8      	it	ge
 800409a:	1b1c      	subge	r4, r3, r4
 800409c:	9b07      	ldr	r3, [sp, #28]
 800409e:	bfbe      	ittt	lt
 80040a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80040a2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80040a4:	2400      	movlt	r4, #0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bfb5      	itete	lt
 80040aa:	eba8 0603 	sublt.w	r6, r8, r3
 80040ae:	4646      	movge	r6, r8
 80040b0:	2300      	movlt	r3, #0
 80040b2:	9b07      	ldrge	r3, [sp, #28]
 80040b4:	e730      	b.n	8003f18 <_dtoa_r+0x730>
 80040b6:	4646      	mov	r6, r8
 80040b8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80040ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80040bc:	e735      	b.n	8003f2a <_dtoa_r+0x742>
 80040be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80040c0:	e75c      	b.n	8003f7c <_dtoa_r+0x794>
 80040c2:	2300      	movs	r3, #0
 80040c4:	e788      	b.n	8003fd8 <_dtoa_r+0x7f0>
 80040c6:	9b02      	ldr	r3, [sp, #8]
 80040c8:	e786      	b.n	8003fd8 <_dtoa_r+0x7f0>
 80040ca:	2300      	movs	r3, #0
 80040cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80040ce:	e788      	b.n	8003fe2 <_dtoa_r+0x7fa>
 80040d0:	d09f      	beq.n	8004012 <_dtoa_r+0x82a>
 80040d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040d4:	331c      	adds	r3, #28
 80040d6:	441a      	add	r2, r3
 80040d8:	4498      	add	r8, r3
 80040da:	441e      	add	r6, r3
 80040dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80040de:	e798      	b.n	8004012 <_dtoa_r+0x82a>
 80040e0:	4603      	mov	r3, r0
 80040e2:	e7f6      	b.n	80040d2 <_dtoa_r+0x8ea>
 80040e4:	9b07      	ldr	r3, [sp, #28]
 80040e6:	9704      	str	r7, [sp, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	dc20      	bgt.n	800412e <_dtoa_r+0x946>
 80040ec:	9308      	str	r3, [sp, #32]
 80040ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	dd1e      	ble.n	8004132 <_dtoa_r+0x94a>
 80040f4:	9b08      	ldr	r3, [sp, #32]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f47f aebc 	bne.w	8003e74 <_dtoa_r+0x68c>
 80040fc:	4621      	mov	r1, r4
 80040fe:	2205      	movs	r2, #5
 8004100:	4658      	mov	r0, fp
 8004102:	f000 fa99 	bl	8004638 <__multadd>
 8004106:	4601      	mov	r1, r0
 8004108:	4604      	mov	r4, r0
 800410a:	4648      	mov	r0, r9
 800410c:	f000 fcf4 	bl	8004af8 <__mcmp>
 8004110:	2800      	cmp	r0, #0
 8004112:	f77f aeaf 	ble.w	8003e74 <_dtoa_r+0x68c>
 8004116:	2331      	movs	r3, #49	@ 0x31
 8004118:	4656      	mov	r6, sl
 800411a:	f806 3b01 	strb.w	r3, [r6], #1
 800411e:	9b04      	ldr	r3, [sp, #16]
 8004120:	3301      	adds	r3, #1
 8004122:	9304      	str	r3, [sp, #16]
 8004124:	e6aa      	b.n	8003e7c <_dtoa_r+0x694>
 8004126:	9c07      	ldr	r4, [sp, #28]
 8004128:	9704      	str	r7, [sp, #16]
 800412a:	4625      	mov	r5, r4
 800412c:	e7f3      	b.n	8004116 <_dtoa_r+0x92e>
 800412e:	9b07      	ldr	r3, [sp, #28]
 8004130:	9308      	str	r3, [sp, #32]
 8004132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8104 	beq.w	8004342 <_dtoa_r+0xb5a>
 800413a:	2e00      	cmp	r6, #0
 800413c:	dd05      	ble.n	800414a <_dtoa_r+0x962>
 800413e:	4629      	mov	r1, r5
 8004140:	4632      	mov	r2, r6
 8004142:	4658      	mov	r0, fp
 8004144:	f000 fc6c 	bl	8004a20 <__lshift>
 8004148:	4605      	mov	r5, r0
 800414a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800414c:	2b00      	cmp	r3, #0
 800414e:	d05a      	beq.n	8004206 <_dtoa_r+0xa1e>
 8004150:	4658      	mov	r0, fp
 8004152:	6869      	ldr	r1, [r5, #4]
 8004154:	f000 fa0e 	bl	8004574 <_Balloc>
 8004158:	4606      	mov	r6, r0
 800415a:	b928      	cbnz	r0, 8004168 <_dtoa_r+0x980>
 800415c:	4602      	mov	r2, r0
 800415e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004162:	4b83      	ldr	r3, [pc, #524]	@ (8004370 <_dtoa_r+0xb88>)
 8004164:	f7ff bb54 	b.w	8003810 <_dtoa_r+0x28>
 8004168:	692a      	ldr	r2, [r5, #16]
 800416a:	f105 010c 	add.w	r1, r5, #12
 800416e:	3202      	adds	r2, #2
 8004170:	0092      	lsls	r2, r2, #2
 8004172:	300c      	adds	r0, #12
 8004174:	f001 ff5e 	bl	8006034 <memcpy>
 8004178:	2201      	movs	r2, #1
 800417a:	4631      	mov	r1, r6
 800417c:	4658      	mov	r0, fp
 800417e:	f000 fc4f 	bl	8004a20 <__lshift>
 8004182:	462f      	mov	r7, r5
 8004184:	4605      	mov	r5, r0
 8004186:	f10a 0301 	add.w	r3, sl, #1
 800418a:	9307      	str	r3, [sp, #28]
 800418c:	9b08      	ldr	r3, [sp, #32]
 800418e:	4453      	add	r3, sl
 8004190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004192:	9b02      	ldr	r3, [sp, #8]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	930a      	str	r3, [sp, #40]	@ 0x28
 800419a:	9b07      	ldr	r3, [sp, #28]
 800419c:	4621      	mov	r1, r4
 800419e:	3b01      	subs	r3, #1
 80041a0:	4648      	mov	r0, r9
 80041a2:	9302      	str	r3, [sp, #8]
 80041a4:	f7ff fa96 	bl	80036d4 <quorem>
 80041a8:	4639      	mov	r1, r7
 80041aa:	9008      	str	r0, [sp, #32]
 80041ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80041b0:	4648      	mov	r0, r9
 80041b2:	f000 fca1 	bl	8004af8 <__mcmp>
 80041b6:	462a      	mov	r2, r5
 80041b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80041ba:	4621      	mov	r1, r4
 80041bc:	4658      	mov	r0, fp
 80041be:	f000 fcb7 	bl	8004b30 <__mdiff>
 80041c2:	68c2      	ldr	r2, [r0, #12]
 80041c4:	4606      	mov	r6, r0
 80041c6:	bb02      	cbnz	r2, 800420a <_dtoa_r+0xa22>
 80041c8:	4601      	mov	r1, r0
 80041ca:	4648      	mov	r0, r9
 80041cc:	f000 fc94 	bl	8004af8 <__mcmp>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4631      	mov	r1, r6
 80041d4:	4658      	mov	r0, fp
 80041d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80041d8:	f000 fa0c 	bl	80045f4 <_Bfree>
 80041dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80041de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80041e0:	9e07      	ldr	r6, [sp, #28]
 80041e2:	ea43 0102 	orr.w	r1, r3, r2
 80041e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041e8:	4319      	orrs	r1, r3
 80041ea:	d110      	bne.n	800420e <_dtoa_r+0xa26>
 80041ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80041f0:	d029      	beq.n	8004246 <_dtoa_r+0xa5e>
 80041f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	dd02      	ble.n	80041fe <_dtoa_r+0xa16>
 80041f8:	9b08      	ldr	r3, [sp, #32]
 80041fa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80041fe:	9b02      	ldr	r3, [sp, #8]
 8004200:	f883 8000 	strb.w	r8, [r3]
 8004204:	e63b      	b.n	8003e7e <_dtoa_r+0x696>
 8004206:	4628      	mov	r0, r5
 8004208:	e7bb      	b.n	8004182 <_dtoa_r+0x99a>
 800420a:	2201      	movs	r2, #1
 800420c:	e7e1      	b.n	80041d2 <_dtoa_r+0x9ea>
 800420e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004210:	2b00      	cmp	r3, #0
 8004212:	db04      	blt.n	800421e <_dtoa_r+0xa36>
 8004214:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004216:	430b      	orrs	r3, r1
 8004218:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800421a:	430b      	orrs	r3, r1
 800421c:	d120      	bne.n	8004260 <_dtoa_r+0xa78>
 800421e:	2a00      	cmp	r2, #0
 8004220:	dded      	ble.n	80041fe <_dtoa_r+0xa16>
 8004222:	4649      	mov	r1, r9
 8004224:	2201      	movs	r2, #1
 8004226:	4658      	mov	r0, fp
 8004228:	f000 fbfa 	bl	8004a20 <__lshift>
 800422c:	4621      	mov	r1, r4
 800422e:	4681      	mov	r9, r0
 8004230:	f000 fc62 	bl	8004af8 <__mcmp>
 8004234:	2800      	cmp	r0, #0
 8004236:	dc03      	bgt.n	8004240 <_dtoa_r+0xa58>
 8004238:	d1e1      	bne.n	80041fe <_dtoa_r+0xa16>
 800423a:	f018 0f01 	tst.w	r8, #1
 800423e:	d0de      	beq.n	80041fe <_dtoa_r+0xa16>
 8004240:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004244:	d1d8      	bne.n	80041f8 <_dtoa_r+0xa10>
 8004246:	2339      	movs	r3, #57	@ 0x39
 8004248:	9a02      	ldr	r2, [sp, #8]
 800424a:	7013      	strb	r3, [r2, #0]
 800424c:	4633      	mov	r3, r6
 800424e:	461e      	mov	r6, r3
 8004250:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004254:	3b01      	subs	r3, #1
 8004256:	2a39      	cmp	r2, #57	@ 0x39
 8004258:	d052      	beq.n	8004300 <_dtoa_r+0xb18>
 800425a:	3201      	adds	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	e60e      	b.n	8003e7e <_dtoa_r+0x696>
 8004260:	2a00      	cmp	r2, #0
 8004262:	dd07      	ble.n	8004274 <_dtoa_r+0xa8c>
 8004264:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004268:	d0ed      	beq.n	8004246 <_dtoa_r+0xa5e>
 800426a:	9a02      	ldr	r2, [sp, #8]
 800426c:	f108 0301 	add.w	r3, r8, #1
 8004270:	7013      	strb	r3, [r2, #0]
 8004272:	e604      	b.n	8003e7e <_dtoa_r+0x696>
 8004274:	9b07      	ldr	r3, [sp, #28]
 8004276:	9a07      	ldr	r2, [sp, #28]
 8004278:	f803 8c01 	strb.w	r8, [r3, #-1]
 800427c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800427e:	4293      	cmp	r3, r2
 8004280:	d028      	beq.n	80042d4 <_dtoa_r+0xaec>
 8004282:	4649      	mov	r1, r9
 8004284:	2300      	movs	r3, #0
 8004286:	220a      	movs	r2, #10
 8004288:	4658      	mov	r0, fp
 800428a:	f000 f9d5 	bl	8004638 <__multadd>
 800428e:	42af      	cmp	r7, r5
 8004290:	4681      	mov	r9, r0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	f04f 020a 	mov.w	r2, #10
 800429a:	4639      	mov	r1, r7
 800429c:	4658      	mov	r0, fp
 800429e:	d107      	bne.n	80042b0 <_dtoa_r+0xac8>
 80042a0:	f000 f9ca 	bl	8004638 <__multadd>
 80042a4:	4607      	mov	r7, r0
 80042a6:	4605      	mov	r5, r0
 80042a8:	9b07      	ldr	r3, [sp, #28]
 80042aa:	3301      	adds	r3, #1
 80042ac:	9307      	str	r3, [sp, #28]
 80042ae:	e774      	b.n	800419a <_dtoa_r+0x9b2>
 80042b0:	f000 f9c2 	bl	8004638 <__multadd>
 80042b4:	4629      	mov	r1, r5
 80042b6:	4607      	mov	r7, r0
 80042b8:	2300      	movs	r3, #0
 80042ba:	220a      	movs	r2, #10
 80042bc:	4658      	mov	r0, fp
 80042be:	f000 f9bb 	bl	8004638 <__multadd>
 80042c2:	4605      	mov	r5, r0
 80042c4:	e7f0      	b.n	80042a8 <_dtoa_r+0xac0>
 80042c6:	9b08      	ldr	r3, [sp, #32]
 80042c8:	2700      	movs	r7, #0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bfcc      	ite	gt
 80042ce:	461e      	movgt	r6, r3
 80042d0:	2601      	movle	r6, #1
 80042d2:	4456      	add	r6, sl
 80042d4:	4649      	mov	r1, r9
 80042d6:	2201      	movs	r2, #1
 80042d8:	4658      	mov	r0, fp
 80042da:	f000 fba1 	bl	8004a20 <__lshift>
 80042de:	4621      	mov	r1, r4
 80042e0:	4681      	mov	r9, r0
 80042e2:	f000 fc09 	bl	8004af8 <__mcmp>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	dcb0      	bgt.n	800424c <_dtoa_r+0xa64>
 80042ea:	d102      	bne.n	80042f2 <_dtoa_r+0xb0a>
 80042ec:	f018 0f01 	tst.w	r8, #1
 80042f0:	d1ac      	bne.n	800424c <_dtoa_r+0xa64>
 80042f2:	4633      	mov	r3, r6
 80042f4:	461e      	mov	r6, r3
 80042f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80042fa:	2a30      	cmp	r2, #48	@ 0x30
 80042fc:	d0fa      	beq.n	80042f4 <_dtoa_r+0xb0c>
 80042fe:	e5be      	b.n	8003e7e <_dtoa_r+0x696>
 8004300:	459a      	cmp	sl, r3
 8004302:	d1a4      	bne.n	800424e <_dtoa_r+0xa66>
 8004304:	9b04      	ldr	r3, [sp, #16]
 8004306:	3301      	adds	r3, #1
 8004308:	9304      	str	r3, [sp, #16]
 800430a:	2331      	movs	r3, #49	@ 0x31
 800430c:	f88a 3000 	strb.w	r3, [sl]
 8004310:	e5b5      	b.n	8003e7e <_dtoa_r+0x696>
 8004312:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004314:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004374 <_dtoa_r+0xb8c>
 8004318:	b11b      	cbz	r3, 8004322 <_dtoa_r+0xb3a>
 800431a:	f10a 0308 	add.w	r3, sl, #8
 800431e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	4650      	mov	r0, sl
 8004324:	b017      	add	sp, #92	@ 0x5c
 8004326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800432c:	2b01      	cmp	r3, #1
 800432e:	f77f ae3d 	ble.w	8003fac <_dtoa_r+0x7c4>
 8004332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004334:	930a      	str	r3, [sp, #40]	@ 0x28
 8004336:	2001      	movs	r0, #1
 8004338:	e65b      	b.n	8003ff2 <_dtoa_r+0x80a>
 800433a:	9b08      	ldr	r3, [sp, #32]
 800433c:	2b00      	cmp	r3, #0
 800433e:	f77f aed6 	ble.w	80040ee <_dtoa_r+0x906>
 8004342:	4656      	mov	r6, sl
 8004344:	4621      	mov	r1, r4
 8004346:	4648      	mov	r0, r9
 8004348:	f7ff f9c4 	bl	80036d4 <quorem>
 800434c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004350:	9b08      	ldr	r3, [sp, #32]
 8004352:	f806 8b01 	strb.w	r8, [r6], #1
 8004356:	eba6 020a 	sub.w	r2, r6, sl
 800435a:	4293      	cmp	r3, r2
 800435c:	ddb3      	ble.n	80042c6 <_dtoa_r+0xade>
 800435e:	4649      	mov	r1, r9
 8004360:	2300      	movs	r3, #0
 8004362:	220a      	movs	r2, #10
 8004364:	4658      	mov	r0, fp
 8004366:	f000 f967 	bl	8004638 <__multadd>
 800436a:	4681      	mov	r9, r0
 800436c:	e7ea      	b.n	8004344 <_dtoa_r+0xb5c>
 800436e:	bf00      	nop
 8004370:	08006e37 	.word	0x08006e37
 8004374:	08006dbb 	.word	0x08006dbb

08004378 <_free_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4605      	mov	r5, r0
 800437c:	2900      	cmp	r1, #0
 800437e:	d040      	beq.n	8004402 <_free_r+0x8a>
 8004380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004384:	1f0c      	subs	r4, r1, #4
 8004386:	2b00      	cmp	r3, #0
 8004388:	bfb8      	it	lt
 800438a:	18e4      	addlt	r4, r4, r3
 800438c:	f000 f8e6 	bl	800455c <__malloc_lock>
 8004390:	4a1c      	ldr	r2, [pc, #112]	@ (8004404 <_free_r+0x8c>)
 8004392:	6813      	ldr	r3, [r2, #0]
 8004394:	b933      	cbnz	r3, 80043a4 <_free_r+0x2c>
 8004396:	6063      	str	r3, [r4, #4]
 8004398:	6014      	str	r4, [r2, #0]
 800439a:	4628      	mov	r0, r5
 800439c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043a0:	f000 b8e2 	b.w	8004568 <__malloc_unlock>
 80043a4:	42a3      	cmp	r3, r4
 80043a6:	d908      	bls.n	80043ba <_free_r+0x42>
 80043a8:	6820      	ldr	r0, [r4, #0]
 80043aa:	1821      	adds	r1, r4, r0
 80043ac:	428b      	cmp	r3, r1
 80043ae:	bf01      	itttt	eq
 80043b0:	6819      	ldreq	r1, [r3, #0]
 80043b2:	685b      	ldreq	r3, [r3, #4]
 80043b4:	1809      	addeq	r1, r1, r0
 80043b6:	6021      	streq	r1, [r4, #0]
 80043b8:	e7ed      	b.n	8004396 <_free_r+0x1e>
 80043ba:	461a      	mov	r2, r3
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	b10b      	cbz	r3, 80043c4 <_free_r+0x4c>
 80043c0:	42a3      	cmp	r3, r4
 80043c2:	d9fa      	bls.n	80043ba <_free_r+0x42>
 80043c4:	6811      	ldr	r1, [r2, #0]
 80043c6:	1850      	adds	r0, r2, r1
 80043c8:	42a0      	cmp	r0, r4
 80043ca:	d10b      	bne.n	80043e4 <_free_r+0x6c>
 80043cc:	6820      	ldr	r0, [r4, #0]
 80043ce:	4401      	add	r1, r0
 80043d0:	1850      	adds	r0, r2, r1
 80043d2:	4283      	cmp	r3, r0
 80043d4:	6011      	str	r1, [r2, #0]
 80043d6:	d1e0      	bne.n	800439a <_free_r+0x22>
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4408      	add	r0, r1
 80043de:	6010      	str	r0, [r2, #0]
 80043e0:	6053      	str	r3, [r2, #4]
 80043e2:	e7da      	b.n	800439a <_free_r+0x22>
 80043e4:	d902      	bls.n	80043ec <_free_r+0x74>
 80043e6:	230c      	movs	r3, #12
 80043e8:	602b      	str	r3, [r5, #0]
 80043ea:	e7d6      	b.n	800439a <_free_r+0x22>
 80043ec:	6820      	ldr	r0, [r4, #0]
 80043ee:	1821      	adds	r1, r4, r0
 80043f0:	428b      	cmp	r3, r1
 80043f2:	bf01      	itttt	eq
 80043f4:	6819      	ldreq	r1, [r3, #0]
 80043f6:	685b      	ldreq	r3, [r3, #4]
 80043f8:	1809      	addeq	r1, r1, r0
 80043fa:	6021      	streq	r1, [r4, #0]
 80043fc:	6063      	str	r3, [r4, #4]
 80043fe:	6054      	str	r4, [r2, #4]
 8004400:	e7cb      	b.n	800439a <_free_r+0x22>
 8004402:	bd38      	pop	{r3, r4, r5, pc}
 8004404:	20000374 	.word	0x20000374

08004408 <malloc>:
 8004408:	4b02      	ldr	r3, [pc, #8]	@ (8004414 <malloc+0xc>)
 800440a:	4601      	mov	r1, r0
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	f000 b825 	b.w	800445c <_malloc_r>
 8004412:	bf00      	nop
 8004414:	20000018 	.word	0x20000018

08004418 <sbrk_aligned>:
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	4e0f      	ldr	r6, [pc, #60]	@ (8004458 <sbrk_aligned+0x40>)
 800441c:	460c      	mov	r4, r1
 800441e:	6831      	ldr	r1, [r6, #0]
 8004420:	4605      	mov	r5, r0
 8004422:	b911      	cbnz	r1, 800442a <sbrk_aligned+0x12>
 8004424:	f001 fdf6 	bl	8006014 <_sbrk_r>
 8004428:	6030      	str	r0, [r6, #0]
 800442a:	4621      	mov	r1, r4
 800442c:	4628      	mov	r0, r5
 800442e:	f001 fdf1 	bl	8006014 <_sbrk_r>
 8004432:	1c43      	adds	r3, r0, #1
 8004434:	d103      	bne.n	800443e <sbrk_aligned+0x26>
 8004436:	f04f 34ff 	mov.w	r4, #4294967295
 800443a:	4620      	mov	r0, r4
 800443c:	bd70      	pop	{r4, r5, r6, pc}
 800443e:	1cc4      	adds	r4, r0, #3
 8004440:	f024 0403 	bic.w	r4, r4, #3
 8004444:	42a0      	cmp	r0, r4
 8004446:	d0f8      	beq.n	800443a <sbrk_aligned+0x22>
 8004448:	1a21      	subs	r1, r4, r0
 800444a:	4628      	mov	r0, r5
 800444c:	f001 fde2 	bl	8006014 <_sbrk_r>
 8004450:	3001      	adds	r0, #1
 8004452:	d1f2      	bne.n	800443a <sbrk_aligned+0x22>
 8004454:	e7ef      	b.n	8004436 <sbrk_aligned+0x1e>
 8004456:	bf00      	nop
 8004458:	20000370 	.word	0x20000370

0800445c <_malloc_r>:
 800445c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004460:	1ccd      	adds	r5, r1, #3
 8004462:	f025 0503 	bic.w	r5, r5, #3
 8004466:	3508      	adds	r5, #8
 8004468:	2d0c      	cmp	r5, #12
 800446a:	bf38      	it	cc
 800446c:	250c      	movcc	r5, #12
 800446e:	2d00      	cmp	r5, #0
 8004470:	4606      	mov	r6, r0
 8004472:	db01      	blt.n	8004478 <_malloc_r+0x1c>
 8004474:	42a9      	cmp	r1, r5
 8004476:	d904      	bls.n	8004482 <_malloc_r+0x26>
 8004478:	230c      	movs	r3, #12
 800447a:	6033      	str	r3, [r6, #0]
 800447c:	2000      	movs	r0, #0
 800447e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004482:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004558 <_malloc_r+0xfc>
 8004486:	f000 f869 	bl	800455c <__malloc_lock>
 800448a:	f8d8 3000 	ldr.w	r3, [r8]
 800448e:	461c      	mov	r4, r3
 8004490:	bb44      	cbnz	r4, 80044e4 <_malloc_r+0x88>
 8004492:	4629      	mov	r1, r5
 8004494:	4630      	mov	r0, r6
 8004496:	f7ff ffbf 	bl	8004418 <sbrk_aligned>
 800449a:	1c43      	adds	r3, r0, #1
 800449c:	4604      	mov	r4, r0
 800449e:	d158      	bne.n	8004552 <_malloc_r+0xf6>
 80044a0:	f8d8 4000 	ldr.w	r4, [r8]
 80044a4:	4627      	mov	r7, r4
 80044a6:	2f00      	cmp	r7, #0
 80044a8:	d143      	bne.n	8004532 <_malloc_r+0xd6>
 80044aa:	2c00      	cmp	r4, #0
 80044ac:	d04b      	beq.n	8004546 <_malloc_r+0xea>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	4639      	mov	r1, r7
 80044b2:	4630      	mov	r0, r6
 80044b4:	eb04 0903 	add.w	r9, r4, r3
 80044b8:	f001 fdac 	bl	8006014 <_sbrk_r>
 80044bc:	4581      	cmp	r9, r0
 80044be:	d142      	bne.n	8004546 <_malloc_r+0xea>
 80044c0:	6821      	ldr	r1, [r4, #0]
 80044c2:	4630      	mov	r0, r6
 80044c4:	1a6d      	subs	r5, r5, r1
 80044c6:	4629      	mov	r1, r5
 80044c8:	f7ff ffa6 	bl	8004418 <sbrk_aligned>
 80044cc:	3001      	adds	r0, #1
 80044ce:	d03a      	beq.n	8004546 <_malloc_r+0xea>
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	442b      	add	r3, r5
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	f8d8 3000 	ldr.w	r3, [r8]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	bb62      	cbnz	r2, 8004538 <_malloc_r+0xdc>
 80044de:	f8c8 7000 	str.w	r7, [r8]
 80044e2:	e00f      	b.n	8004504 <_malloc_r+0xa8>
 80044e4:	6822      	ldr	r2, [r4, #0]
 80044e6:	1b52      	subs	r2, r2, r5
 80044e8:	d420      	bmi.n	800452c <_malloc_r+0xd0>
 80044ea:	2a0b      	cmp	r2, #11
 80044ec:	d917      	bls.n	800451e <_malloc_r+0xc2>
 80044ee:	1961      	adds	r1, r4, r5
 80044f0:	42a3      	cmp	r3, r4
 80044f2:	6025      	str	r5, [r4, #0]
 80044f4:	bf18      	it	ne
 80044f6:	6059      	strne	r1, [r3, #4]
 80044f8:	6863      	ldr	r3, [r4, #4]
 80044fa:	bf08      	it	eq
 80044fc:	f8c8 1000 	streq.w	r1, [r8]
 8004500:	5162      	str	r2, [r4, r5]
 8004502:	604b      	str	r3, [r1, #4]
 8004504:	4630      	mov	r0, r6
 8004506:	f000 f82f 	bl	8004568 <__malloc_unlock>
 800450a:	f104 000b 	add.w	r0, r4, #11
 800450e:	1d23      	adds	r3, r4, #4
 8004510:	f020 0007 	bic.w	r0, r0, #7
 8004514:	1ac2      	subs	r2, r0, r3
 8004516:	bf1c      	itt	ne
 8004518:	1a1b      	subne	r3, r3, r0
 800451a:	50a3      	strne	r3, [r4, r2]
 800451c:	e7af      	b.n	800447e <_malloc_r+0x22>
 800451e:	6862      	ldr	r2, [r4, #4]
 8004520:	42a3      	cmp	r3, r4
 8004522:	bf0c      	ite	eq
 8004524:	f8c8 2000 	streq.w	r2, [r8]
 8004528:	605a      	strne	r2, [r3, #4]
 800452a:	e7eb      	b.n	8004504 <_malloc_r+0xa8>
 800452c:	4623      	mov	r3, r4
 800452e:	6864      	ldr	r4, [r4, #4]
 8004530:	e7ae      	b.n	8004490 <_malloc_r+0x34>
 8004532:	463c      	mov	r4, r7
 8004534:	687f      	ldr	r7, [r7, #4]
 8004536:	e7b6      	b.n	80044a6 <_malloc_r+0x4a>
 8004538:	461a      	mov	r2, r3
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	42a3      	cmp	r3, r4
 800453e:	d1fb      	bne.n	8004538 <_malloc_r+0xdc>
 8004540:	2300      	movs	r3, #0
 8004542:	6053      	str	r3, [r2, #4]
 8004544:	e7de      	b.n	8004504 <_malloc_r+0xa8>
 8004546:	230c      	movs	r3, #12
 8004548:	4630      	mov	r0, r6
 800454a:	6033      	str	r3, [r6, #0]
 800454c:	f000 f80c 	bl	8004568 <__malloc_unlock>
 8004550:	e794      	b.n	800447c <_malloc_r+0x20>
 8004552:	6005      	str	r5, [r0, #0]
 8004554:	e7d6      	b.n	8004504 <_malloc_r+0xa8>
 8004556:	bf00      	nop
 8004558:	20000374 	.word	0x20000374

0800455c <__malloc_lock>:
 800455c:	4801      	ldr	r0, [pc, #4]	@ (8004564 <__malloc_lock+0x8>)
 800455e:	f7ff b8a4 	b.w	80036aa <__retarget_lock_acquire_recursive>
 8004562:	bf00      	nop
 8004564:	2000036c 	.word	0x2000036c

08004568 <__malloc_unlock>:
 8004568:	4801      	ldr	r0, [pc, #4]	@ (8004570 <__malloc_unlock+0x8>)
 800456a:	f7ff b89f 	b.w	80036ac <__retarget_lock_release_recursive>
 800456e:	bf00      	nop
 8004570:	2000036c 	.word	0x2000036c

08004574 <_Balloc>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	69c6      	ldr	r6, [r0, #28]
 8004578:	4604      	mov	r4, r0
 800457a:	460d      	mov	r5, r1
 800457c:	b976      	cbnz	r6, 800459c <_Balloc+0x28>
 800457e:	2010      	movs	r0, #16
 8004580:	f7ff ff42 	bl	8004408 <malloc>
 8004584:	4602      	mov	r2, r0
 8004586:	61e0      	str	r0, [r4, #28]
 8004588:	b920      	cbnz	r0, 8004594 <_Balloc+0x20>
 800458a:	216b      	movs	r1, #107	@ 0x6b
 800458c:	4b17      	ldr	r3, [pc, #92]	@ (80045ec <_Balloc+0x78>)
 800458e:	4818      	ldr	r0, [pc, #96]	@ (80045f0 <_Balloc+0x7c>)
 8004590:	f001 fd64 	bl	800605c <__assert_func>
 8004594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004598:	6006      	str	r6, [r0, #0]
 800459a:	60c6      	str	r6, [r0, #12]
 800459c:	69e6      	ldr	r6, [r4, #28]
 800459e:	68f3      	ldr	r3, [r6, #12]
 80045a0:	b183      	cbz	r3, 80045c4 <_Balloc+0x50>
 80045a2:	69e3      	ldr	r3, [r4, #28]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80045aa:	b9b8      	cbnz	r0, 80045dc <_Balloc+0x68>
 80045ac:	2101      	movs	r1, #1
 80045ae:	fa01 f605 	lsl.w	r6, r1, r5
 80045b2:	1d72      	adds	r2, r6, #5
 80045b4:	4620      	mov	r0, r4
 80045b6:	0092      	lsls	r2, r2, #2
 80045b8:	f001 fd6e 	bl	8006098 <_calloc_r>
 80045bc:	b160      	cbz	r0, 80045d8 <_Balloc+0x64>
 80045be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80045c2:	e00e      	b.n	80045e2 <_Balloc+0x6e>
 80045c4:	2221      	movs	r2, #33	@ 0x21
 80045c6:	2104      	movs	r1, #4
 80045c8:	4620      	mov	r0, r4
 80045ca:	f001 fd65 	bl	8006098 <_calloc_r>
 80045ce:	69e3      	ldr	r3, [r4, #28]
 80045d0:	60f0      	str	r0, [r6, #12]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1e4      	bne.n	80045a2 <_Balloc+0x2e>
 80045d8:	2000      	movs	r0, #0
 80045da:	bd70      	pop	{r4, r5, r6, pc}
 80045dc:	6802      	ldr	r2, [r0, #0]
 80045de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80045e2:	2300      	movs	r3, #0
 80045e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80045e8:	e7f7      	b.n	80045da <_Balloc+0x66>
 80045ea:	bf00      	nop
 80045ec:	08006dc8 	.word	0x08006dc8
 80045f0:	08006e48 	.word	0x08006e48

080045f4 <_Bfree>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	69c6      	ldr	r6, [r0, #28]
 80045f8:	4605      	mov	r5, r0
 80045fa:	460c      	mov	r4, r1
 80045fc:	b976      	cbnz	r6, 800461c <_Bfree+0x28>
 80045fe:	2010      	movs	r0, #16
 8004600:	f7ff ff02 	bl	8004408 <malloc>
 8004604:	4602      	mov	r2, r0
 8004606:	61e8      	str	r0, [r5, #28]
 8004608:	b920      	cbnz	r0, 8004614 <_Bfree+0x20>
 800460a:	218f      	movs	r1, #143	@ 0x8f
 800460c:	4b08      	ldr	r3, [pc, #32]	@ (8004630 <_Bfree+0x3c>)
 800460e:	4809      	ldr	r0, [pc, #36]	@ (8004634 <_Bfree+0x40>)
 8004610:	f001 fd24 	bl	800605c <__assert_func>
 8004614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004618:	6006      	str	r6, [r0, #0]
 800461a:	60c6      	str	r6, [r0, #12]
 800461c:	b13c      	cbz	r4, 800462e <_Bfree+0x3a>
 800461e:	69eb      	ldr	r3, [r5, #28]
 8004620:	6862      	ldr	r2, [r4, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004628:	6021      	str	r1, [r4, #0]
 800462a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800462e:	bd70      	pop	{r4, r5, r6, pc}
 8004630:	08006dc8 	.word	0x08006dc8
 8004634:	08006e48 	.word	0x08006e48

08004638 <__multadd>:
 8004638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800463c:	4607      	mov	r7, r0
 800463e:	460c      	mov	r4, r1
 8004640:	461e      	mov	r6, r3
 8004642:	2000      	movs	r0, #0
 8004644:	690d      	ldr	r5, [r1, #16]
 8004646:	f101 0c14 	add.w	ip, r1, #20
 800464a:	f8dc 3000 	ldr.w	r3, [ip]
 800464e:	3001      	adds	r0, #1
 8004650:	b299      	uxth	r1, r3
 8004652:	fb02 6101 	mla	r1, r2, r1, r6
 8004656:	0c1e      	lsrs	r6, r3, #16
 8004658:	0c0b      	lsrs	r3, r1, #16
 800465a:	fb02 3306 	mla	r3, r2, r6, r3
 800465e:	b289      	uxth	r1, r1
 8004660:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004664:	4285      	cmp	r5, r0
 8004666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800466a:	f84c 1b04 	str.w	r1, [ip], #4
 800466e:	dcec      	bgt.n	800464a <__multadd+0x12>
 8004670:	b30e      	cbz	r6, 80046b6 <__multadd+0x7e>
 8004672:	68a3      	ldr	r3, [r4, #8]
 8004674:	42ab      	cmp	r3, r5
 8004676:	dc19      	bgt.n	80046ac <__multadd+0x74>
 8004678:	6861      	ldr	r1, [r4, #4]
 800467a:	4638      	mov	r0, r7
 800467c:	3101      	adds	r1, #1
 800467e:	f7ff ff79 	bl	8004574 <_Balloc>
 8004682:	4680      	mov	r8, r0
 8004684:	b928      	cbnz	r0, 8004692 <__multadd+0x5a>
 8004686:	4602      	mov	r2, r0
 8004688:	21ba      	movs	r1, #186	@ 0xba
 800468a:	4b0c      	ldr	r3, [pc, #48]	@ (80046bc <__multadd+0x84>)
 800468c:	480c      	ldr	r0, [pc, #48]	@ (80046c0 <__multadd+0x88>)
 800468e:	f001 fce5 	bl	800605c <__assert_func>
 8004692:	6922      	ldr	r2, [r4, #16]
 8004694:	f104 010c 	add.w	r1, r4, #12
 8004698:	3202      	adds	r2, #2
 800469a:	0092      	lsls	r2, r2, #2
 800469c:	300c      	adds	r0, #12
 800469e:	f001 fcc9 	bl	8006034 <memcpy>
 80046a2:	4621      	mov	r1, r4
 80046a4:	4638      	mov	r0, r7
 80046a6:	f7ff ffa5 	bl	80045f4 <_Bfree>
 80046aa:	4644      	mov	r4, r8
 80046ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80046b0:	3501      	adds	r5, #1
 80046b2:	615e      	str	r6, [r3, #20]
 80046b4:	6125      	str	r5, [r4, #16]
 80046b6:	4620      	mov	r0, r4
 80046b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046bc:	08006e37 	.word	0x08006e37
 80046c0:	08006e48 	.word	0x08006e48

080046c4 <__s2b>:
 80046c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046c8:	4615      	mov	r5, r2
 80046ca:	2209      	movs	r2, #9
 80046cc:	461f      	mov	r7, r3
 80046ce:	3308      	adds	r3, #8
 80046d0:	460c      	mov	r4, r1
 80046d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80046d6:	4606      	mov	r6, r0
 80046d8:	2201      	movs	r2, #1
 80046da:	2100      	movs	r1, #0
 80046dc:	429a      	cmp	r2, r3
 80046de:	db09      	blt.n	80046f4 <__s2b+0x30>
 80046e0:	4630      	mov	r0, r6
 80046e2:	f7ff ff47 	bl	8004574 <_Balloc>
 80046e6:	b940      	cbnz	r0, 80046fa <__s2b+0x36>
 80046e8:	4602      	mov	r2, r0
 80046ea:	21d3      	movs	r1, #211	@ 0xd3
 80046ec:	4b18      	ldr	r3, [pc, #96]	@ (8004750 <__s2b+0x8c>)
 80046ee:	4819      	ldr	r0, [pc, #100]	@ (8004754 <__s2b+0x90>)
 80046f0:	f001 fcb4 	bl	800605c <__assert_func>
 80046f4:	0052      	lsls	r2, r2, #1
 80046f6:	3101      	adds	r1, #1
 80046f8:	e7f0      	b.n	80046dc <__s2b+0x18>
 80046fa:	9b08      	ldr	r3, [sp, #32]
 80046fc:	2d09      	cmp	r5, #9
 80046fe:	6143      	str	r3, [r0, #20]
 8004700:	f04f 0301 	mov.w	r3, #1
 8004704:	6103      	str	r3, [r0, #16]
 8004706:	dd16      	ble.n	8004736 <__s2b+0x72>
 8004708:	f104 0909 	add.w	r9, r4, #9
 800470c:	46c8      	mov	r8, r9
 800470e:	442c      	add	r4, r5
 8004710:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004714:	4601      	mov	r1, r0
 8004716:	220a      	movs	r2, #10
 8004718:	4630      	mov	r0, r6
 800471a:	3b30      	subs	r3, #48	@ 0x30
 800471c:	f7ff ff8c 	bl	8004638 <__multadd>
 8004720:	45a0      	cmp	r8, r4
 8004722:	d1f5      	bne.n	8004710 <__s2b+0x4c>
 8004724:	f1a5 0408 	sub.w	r4, r5, #8
 8004728:	444c      	add	r4, r9
 800472a:	1b2d      	subs	r5, r5, r4
 800472c:	1963      	adds	r3, r4, r5
 800472e:	42bb      	cmp	r3, r7
 8004730:	db04      	blt.n	800473c <__s2b+0x78>
 8004732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004736:	2509      	movs	r5, #9
 8004738:	340a      	adds	r4, #10
 800473a:	e7f6      	b.n	800472a <__s2b+0x66>
 800473c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004740:	4601      	mov	r1, r0
 8004742:	220a      	movs	r2, #10
 8004744:	4630      	mov	r0, r6
 8004746:	3b30      	subs	r3, #48	@ 0x30
 8004748:	f7ff ff76 	bl	8004638 <__multadd>
 800474c:	e7ee      	b.n	800472c <__s2b+0x68>
 800474e:	bf00      	nop
 8004750:	08006e37 	.word	0x08006e37
 8004754:	08006e48 	.word	0x08006e48

08004758 <__hi0bits>:
 8004758:	4603      	mov	r3, r0
 800475a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800475e:	bf3a      	itte	cc
 8004760:	0403      	lslcc	r3, r0, #16
 8004762:	2010      	movcc	r0, #16
 8004764:	2000      	movcs	r0, #0
 8004766:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800476a:	bf3c      	itt	cc
 800476c:	021b      	lslcc	r3, r3, #8
 800476e:	3008      	addcc	r0, #8
 8004770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004774:	bf3c      	itt	cc
 8004776:	011b      	lslcc	r3, r3, #4
 8004778:	3004      	addcc	r0, #4
 800477a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800477e:	bf3c      	itt	cc
 8004780:	009b      	lslcc	r3, r3, #2
 8004782:	3002      	addcc	r0, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	db05      	blt.n	8004794 <__hi0bits+0x3c>
 8004788:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800478c:	f100 0001 	add.w	r0, r0, #1
 8004790:	bf08      	it	eq
 8004792:	2020      	moveq	r0, #32
 8004794:	4770      	bx	lr

08004796 <__lo0bits>:
 8004796:	6803      	ldr	r3, [r0, #0]
 8004798:	4602      	mov	r2, r0
 800479a:	f013 0007 	ands.w	r0, r3, #7
 800479e:	d00b      	beq.n	80047b8 <__lo0bits+0x22>
 80047a0:	07d9      	lsls	r1, r3, #31
 80047a2:	d421      	bmi.n	80047e8 <__lo0bits+0x52>
 80047a4:	0798      	lsls	r0, r3, #30
 80047a6:	bf49      	itett	mi
 80047a8:	085b      	lsrmi	r3, r3, #1
 80047aa:	089b      	lsrpl	r3, r3, #2
 80047ac:	2001      	movmi	r0, #1
 80047ae:	6013      	strmi	r3, [r2, #0]
 80047b0:	bf5c      	itt	pl
 80047b2:	2002      	movpl	r0, #2
 80047b4:	6013      	strpl	r3, [r2, #0]
 80047b6:	4770      	bx	lr
 80047b8:	b299      	uxth	r1, r3
 80047ba:	b909      	cbnz	r1, 80047c0 <__lo0bits+0x2a>
 80047bc:	2010      	movs	r0, #16
 80047be:	0c1b      	lsrs	r3, r3, #16
 80047c0:	b2d9      	uxtb	r1, r3
 80047c2:	b909      	cbnz	r1, 80047c8 <__lo0bits+0x32>
 80047c4:	3008      	adds	r0, #8
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	0719      	lsls	r1, r3, #28
 80047ca:	bf04      	itt	eq
 80047cc:	091b      	lsreq	r3, r3, #4
 80047ce:	3004      	addeq	r0, #4
 80047d0:	0799      	lsls	r1, r3, #30
 80047d2:	bf04      	itt	eq
 80047d4:	089b      	lsreq	r3, r3, #2
 80047d6:	3002      	addeq	r0, #2
 80047d8:	07d9      	lsls	r1, r3, #31
 80047da:	d403      	bmi.n	80047e4 <__lo0bits+0x4e>
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	f100 0001 	add.w	r0, r0, #1
 80047e2:	d003      	beq.n	80047ec <__lo0bits+0x56>
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	4770      	bx	lr
 80047e8:	2000      	movs	r0, #0
 80047ea:	4770      	bx	lr
 80047ec:	2020      	movs	r0, #32
 80047ee:	4770      	bx	lr

080047f0 <__i2b>:
 80047f0:	b510      	push	{r4, lr}
 80047f2:	460c      	mov	r4, r1
 80047f4:	2101      	movs	r1, #1
 80047f6:	f7ff febd 	bl	8004574 <_Balloc>
 80047fa:	4602      	mov	r2, r0
 80047fc:	b928      	cbnz	r0, 800480a <__i2b+0x1a>
 80047fe:	f240 1145 	movw	r1, #325	@ 0x145
 8004802:	4b04      	ldr	r3, [pc, #16]	@ (8004814 <__i2b+0x24>)
 8004804:	4804      	ldr	r0, [pc, #16]	@ (8004818 <__i2b+0x28>)
 8004806:	f001 fc29 	bl	800605c <__assert_func>
 800480a:	2301      	movs	r3, #1
 800480c:	6144      	str	r4, [r0, #20]
 800480e:	6103      	str	r3, [r0, #16]
 8004810:	bd10      	pop	{r4, pc}
 8004812:	bf00      	nop
 8004814:	08006e37 	.word	0x08006e37
 8004818:	08006e48 	.word	0x08006e48

0800481c <__multiply>:
 800481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004820:	4614      	mov	r4, r2
 8004822:	690a      	ldr	r2, [r1, #16]
 8004824:	6923      	ldr	r3, [r4, #16]
 8004826:	460f      	mov	r7, r1
 8004828:	429a      	cmp	r2, r3
 800482a:	bfa2      	ittt	ge
 800482c:	4623      	movge	r3, r4
 800482e:	460c      	movge	r4, r1
 8004830:	461f      	movge	r7, r3
 8004832:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004836:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800483a:	68a3      	ldr	r3, [r4, #8]
 800483c:	6861      	ldr	r1, [r4, #4]
 800483e:	eb0a 0609 	add.w	r6, sl, r9
 8004842:	42b3      	cmp	r3, r6
 8004844:	b085      	sub	sp, #20
 8004846:	bfb8      	it	lt
 8004848:	3101      	addlt	r1, #1
 800484a:	f7ff fe93 	bl	8004574 <_Balloc>
 800484e:	b930      	cbnz	r0, 800485e <__multiply+0x42>
 8004850:	4602      	mov	r2, r0
 8004852:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004856:	4b43      	ldr	r3, [pc, #268]	@ (8004964 <__multiply+0x148>)
 8004858:	4843      	ldr	r0, [pc, #268]	@ (8004968 <__multiply+0x14c>)
 800485a:	f001 fbff 	bl	800605c <__assert_func>
 800485e:	f100 0514 	add.w	r5, r0, #20
 8004862:	462b      	mov	r3, r5
 8004864:	2200      	movs	r2, #0
 8004866:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800486a:	4543      	cmp	r3, r8
 800486c:	d321      	bcc.n	80048b2 <__multiply+0x96>
 800486e:	f107 0114 	add.w	r1, r7, #20
 8004872:	f104 0214 	add.w	r2, r4, #20
 8004876:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800487a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800487e:	9302      	str	r3, [sp, #8]
 8004880:	1b13      	subs	r3, r2, r4
 8004882:	3b15      	subs	r3, #21
 8004884:	f023 0303 	bic.w	r3, r3, #3
 8004888:	3304      	adds	r3, #4
 800488a:	f104 0715 	add.w	r7, r4, #21
 800488e:	42ba      	cmp	r2, r7
 8004890:	bf38      	it	cc
 8004892:	2304      	movcc	r3, #4
 8004894:	9301      	str	r3, [sp, #4]
 8004896:	9b02      	ldr	r3, [sp, #8]
 8004898:	9103      	str	r1, [sp, #12]
 800489a:	428b      	cmp	r3, r1
 800489c:	d80c      	bhi.n	80048b8 <__multiply+0x9c>
 800489e:	2e00      	cmp	r6, #0
 80048a0:	dd03      	ble.n	80048aa <__multiply+0x8e>
 80048a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d05a      	beq.n	8004960 <__multiply+0x144>
 80048aa:	6106      	str	r6, [r0, #16]
 80048ac:	b005      	add	sp, #20
 80048ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b2:	f843 2b04 	str.w	r2, [r3], #4
 80048b6:	e7d8      	b.n	800486a <__multiply+0x4e>
 80048b8:	f8b1 a000 	ldrh.w	sl, [r1]
 80048bc:	f1ba 0f00 	cmp.w	sl, #0
 80048c0:	d023      	beq.n	800490a <__multiply+0xee>
 80048c2:	46a9      	mov	r9, r5
 80048c4:	f04f 0c00 	mov.w	ip, #0
 80048c8:	f104 0e14 	add.w	lr, r4, #20
 80048cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80048d0:	f8d9 3000 	ldr.w	r3, [r9]
 80048d4:	fa1f fb87 	uxth.w	fp, r7
 80048d8:	b29b      	uxth	r3, r3
 80048da:	fb0a 330b 	mla	r3, sl, fp, r3
 80048de:	4463      	add	r3, ip
 80048e0:	f8d9 c000 	ldr.w	ip, [r9]
 80048e4:	0c3f      	lsrs	r7, r7, #16
 80048e6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80048ea:	fb0a c707 	mla	r7, sl, r7, ip
 80048ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80048f8:	4572      	cmp	r2, lr
 80048fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80048fe:	f849 3b04 	str.w	r3, [r9], #4
 8004902:	d8e3      	bhi.n	80048cc <__multiply+0xb0>
 8004904:	9b01      	ldr	r3, [sp, #4]
 8004906:	f845 c003 	str.w	ip, [r5, r3]
 800490a:	9b03      	ldr	r3, [sp, #12]
 800490c:	3104      	adds	r1, #4
 800490e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004912:	f1b9 0f00 	cmp.w	r9, #0
 8004916:	d021      	beq.n	800495c <__multiply+0x140>
 8004918:	46ae      	mov	lr, r5
 800491a:	f04f 0a00 	mov.w	sl, #0
 800491e:	682b      	ldr	r3, [r5, #0]
 8004920:	f104 0c14 	add.w	ip, r4, #20
 8004924:	f8bc b000 	ldrh.w	fp, [ip]
 8004928:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800492c:	b29b      	uxth	r3, r3
 800492e:	fb09 770b 	mla	r7, r9, fp, r7
 8004932:	4457      	add	r7, sl
 8004934:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004938:	f84e 3b04 	str.w	r3, [lr], #4
 800493c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004940:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004944:	f8be 3000 	ldrh.w	r3, [lr]
 8004948:	4562      	cmp	r2, ip
 800494a:	fb09 330a 	mla	r3, r9, sl, r3
 800494e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004952:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004956:	d8e5      	bhi.n	8004924 <__multiply+0x108>
 8004958:	9f01      	ldr	r7, [sp, #4]
 800495a:	51eb      	str	r3, [r5, r7]
 800495c:	3504      	adds	r5, #4
 800495e:	e79a      	b.n	8004896 <__multiply+0x7a>
 8004960:	3e01      	subs	r6, #1
 8004962:	e79c      	b.n	800489e <__multiply+0x82>
 8004964:	08006e37 	.word	0x08006e37
 8004968:	08006e48 	.word	0x08006e48

0800496c <__pow5mult>:
 800496c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004970:	4615      	mov	r5, r2
 8004972:	f012 0203 	ands.w	r2, r2, #3
 8004976:	4607      	mov	r7, r0
 8004978:	460e      	mov	r6, r1
 800497a:	d007      	beq.n	800498c <__pow5mult+0x20>
 800497c:	4c25      	ldr	r4, [pc, #148]	@ (8004a14 <__pow5mult+0xa8>)
 800497e:	3a01      	subs	r2, #1
 8004980:	2300      	movs	r3, #0
 8004982:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004986:	f7ff fe57 	bl	8004638 <__multadd>
 800498a:	4606      	mov	r6, r0
 800498c:	10ad      	asrs	r5, r5, #2
 800498e:	d03d      	beq.n	8004a0c <__pow5mult+0xa0>
 8004990:	69fc      	ldr	r4, [r7, #28]
 8004992:	b97c      	cbnz	r4, 80049b4 <__pow5mult+0x48>
 8004994:	2010      	movs	r0, #16
 8004996:	f7ff fd37 	bl	8004408 <malloc>
 800499a:	4602      	mov	r2, r0
 800499c:	61f8      	str	r0, [r7, #28]
 800499e:	b928      	cbnz	r0, 80049ac <__pow5mult+0x40>
 80049a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80049a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004a18 <__pow5mult+0xac>)
 80049a6:	481d      	ldr	r0, [pc, #116]	@ (8004a1c <__pow5mult+0xb0>)
 80049a8:	f001 fb58 	bl	800605c <__assert_func>
 80049ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80049b0:	6004      	str	r4, [r0, #0]
 80049b2:	60c4      	str	r4, [r0, #12]
 80049b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80049b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80049bc:	b94c      	cbnz	r4, 80049d2 <__pow5mult+0x66>
 80049be:	f240 2171 	movw	r1, #625	@ 0x271
 80049c2:	4638      	mov	r0, r7
 80049c4:	f7ff ff14 	bl	80047f0 <__i2b>
 80049c8:	2300      	movs	r3, #0
 80049ca:	4604      	mov	r4, r0
 80049cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80049d0:	6003      	str	r3, [r0, #0]
 80049d2:	f04f 0900 	mov.w	r9, #0
 80049d6:	07eb      	lsls	r3, r5, #31
 80049d8:	d50a      	bpl.n	80049f0 <__pow5mult+0x84>
 80049da:	4631      	mov	r1, r6
 80049dc:	4622      	mov	r2, r4
 80049de:	4638      	mov	r0, r7
 80049e0:	f7ff ff1c 	bl	800481c <__multiply>
 80049e4:	4680      	mov	r8, r0
 80049e6:	4631      	mov	r1, r6
 80049e8:	4638      	mov	r0, r7
 80049ea:	f7ff fe03 	bl	80045f4 <_Bfree>
 80049ee:	4646      	mov	r6, r8
 80049f0:	106d      	asrs	r5, r5, #1
 80049f2:	d00b      	beq.n	8004a0c <__pow5mult+0xa0>
 80049f4:	6820      	ldr	r0, [r4, #0]
 80049f6:	b938      	cbnz	r0, 8004a08 <__pow5mult+0x9c>
 80049f8:	4622      	mov	r2, r4
 80049fa:	4621      	mov	r1, r4
 80049fc:	4638      	mov	r0, r7
 80049fe:	f7ff ff0d 	bl	800481c <__multiply>
 8004a02:	6020      	str	r0, [r4, #0]
 8004a04:	f8c0 9000 	str.w	r9, [r0]
 8004a08:	4604      	mov	r4, r0
 8004a0a:	e7e4      	b.n	80049d6 <__pow5mult+0x6a>
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a12:	bf00      	nop
 8004a14:	08006ea4 	.word	0x08006ea4
 8004a18:	08006dc8 	.word	0x08006dc8
 8004a1c:	08006e48 	.word	0x08006e48

08004a20 <__lshift>:
 8004a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a24:	460c      	mov	r4, r1
 8004a26:	4607      	mov	r7, r0
 8004a28:	4691      	mov	r9, r2
 8004a2a:	6923      	ldr	r3, [r4, #16]
 8004a2c:	6849      	ldr	r1, [r1, #4]
 8004a2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004a32:	68a3      	ldr	r3, [r4, #8]
 8004a34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004a38:	f108 0601 	add.w	r6, r8, #1
 8004a3c:	42b3      	cmp	r3, r6
 8004a3e:	db0b      	blt.n	8004a58 <__lshift+0x38>
 8004a40:	4638      	mov	r0, r7
 8004a42:	f7ff fd97 	bl	8004574 <_Balloc>
 8004a46:	4605      	mov	r5, r0
 8004a48:	b948      	cbnz	r0, 8004a5e <__lshift+0x3e>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004a50:	4b27      	ldr	r3, [pc, #156]	@ (8004af0 <__lshift+0xd0>)
 8004a52:	4828      	ldr	r0, [pc, #160]	@ (8004af4 <__lshift+0xd4>)
 8004a54:	f001 fb02 	bl	800605c <__assert_func>
 8004a58:	3101      	adds	r1, #1
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	e7ee      	b.n	8004a3c <__lshift+0x1c>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f100 0114 	add.w	r1, r0, #20
 8004a64:	f100 0210 	add.w	r2, r0, #16
 8004a68:	4618      	mov	r0, r3
 8004a6a:	4553      	cmp	r3, sl
 8004a6c:	db33      	blt.n	8004ad6 <__lshift+0xb6>
 8004a6e:	6920      	ldr	r0, [r4, #16]
 8004a70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004a74:	f104 0314 	add.w	r3, r4, #20
 8004a78:	f019 091f 	ands.w	r9, r9, #31
 8004a7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004a80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004a84:	d02b      	beq.n	8004ade <__lshift+0xbe>
 8004a86:	468a      	mov	sl, r1
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f1c9 0e20 	rsb	lr, r9, #32
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	fa00 f009 	lsl.w	r0, r0, r9
 8004a94:	4310      	orrs	r0, r2
 8004a96:	f84a 0b04 	str.w	r0, [sl], #4
 8004a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a9e:	459c      	cmp	ip, r3
 8004aa0:	fa22 f20e 	lsr.w	r2, r2, lr
 8004aa4:	d8f3      	bhi.n	8004a8e <__lshift+0x6e>
 8004aa6:	ebac 0304 	sub.w	r3, ip, r4
 8004aaa:	3b15      	subs	r3, #21
 8004aac:	f023 0303 	bic.w	r3, r3, #3
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	f104 0015 	add.w	r0, r4, #21
 8004ab6:	4584      	cmp	ip, r0
 8004ab8:	bf38      	it	cc
 8004aba:	2304      	movcc	r3, #4
 8004abc:	50ca      	str	r2, [r1, r3]
 8004abe:	b10a      	cbz	r2, 8004ac4 <__lshift+0xa4>
 8004ac0:	f108 0602 	add.w	r6, r8, #2
 8004ac4:	3e01      	subs	r6, #1
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	4621      	mov	r1, r4
 8004aca:	612e      	str	r6, [r5, #16]
 8004acc:	f7ff fd92 	bl	80045f4 <_Bfree>
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad6:	f842 0f04 	str.w	r0, [r2, #4]!
 8004ada:	3301      	adds	r3, #1
 8004adc:	e7c5      	b.n	8004a6a <__lshift+0x4a>
 8004ade:	3904      	subs	r1, #4
 8004ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ae4:	459c      	cmp	ip, r3
 8004ae6:	f841 2f04 	str.w	r2, [r1, #4]!
 8004aea:	d8f9      	bhi.n	8004ae0 <__lshift+0xc0>
 8004aec:	e7ea      	b.n	8004ac4 <__lshift+0xa4>
 8004aee:	bf00      	nop
 8004af0:	08006e37 	.word	0x08006e37
 8004af4:	08006e48 	.word	0x08006e48

08004af8 <__mcmp>:
 8004af8:	4603      	mov	r3, r0
 8004afa:	690a      	ldr	r2, [r1, #16]
 8004afc:	6900      	ldr	r0, [r0, #16]
 8004afe:	b530      	push	{r4, r5, lr}
 8004b00:	1a80      	subs	r0, r0, r2
 8004b02:	d10e      	bne.n	8004b22 <__mcmp+0x2a>
 8004b04:	3314      	adds	r3, #20
 8004b06:	3114      	adds	r1, #20
 8004b08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004b0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004b10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004b14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004b18:	4295      	cmp	r5, r2
 8004b1a:	d003      	beq.n	8004b24 <__mcmp+0x2c>
 8004b1c:	d205      	bcs.n	8004b2a <__mcmp+0x32>
 8004b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b22:	bd30      	pop	{r4, r5, pc}
 8004b24:	42a3      	cmp	r3, r4
 8004b26:	d3f3      	bcc.n	8004b10 <__mcmp+0x18>
 8004b28:	e7fb      	b.n	8004b22 <__mcmp+0x2a>
 8004b2a:	2001      	movs	r0, #1
 8004b2c:	e7f9      	b.n	8004b22 <__mcmp+0x2a>
	...

08004b30 <__mdiff>:
 8004b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b34:	4689      	mov	r9, r1
 8004b36:	4606      	mov	r6, r0
 8004b38:	4611      	mov	r1, r2
 8004b3a:	4648      	mov	r0, r9
 8004b3c:	4614      	mov	r4, r2
 8004b3e:	f7ff ffdb 	bl	8004af8 <__mcmp>
 8004b42:	1e05      	subs	r5, r0, #0
 8004b44:	d112      	bne.n	8004b6c <__mdiff+0x3c>
 8004b46:	4629      	mov	r1, r5
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f7ff fd13 	bl	8004574 <_Balloc>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	b928      	cbnz	r0, 8004b5e <__mdiff+0x2e>
 8004b52:	f240 2137 	movw	r1, #567	@ 0x237
 8004b56:	4b3e      	ldr	r3, [pc, #248]	@ (8004c50 <__mdiff+0x120>)
 8004b58:	483e      	ldr	r0, [pc, #248]	@ (8004c54 <__mdiff+0x124>)
 8004b5a:	f001 fa7f 	bl	800605c <__assert_func>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004b64:	4610      	mov	r0, r2
 8004b66:	b003      	add	sp, #12
 8004b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6c:	bfbc      	itt	lt
 8004b6e:	464b      	movlt	r3, r9
 8004b70:	46a1      	movlt	r9, r4
 8004b72:	4630      	mov	r0, r6
 8004b74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004b78:	bfba      	itte	lt
 8004b7a:	461c      	movlt	r4, r3
 8004b7c:	2501      	movlt	r5, #1
 8004b7e:	2500      	movge	r5, #0
 8004b80:	f7ff fcf8 	bl	8004574 <_Balloc>
 8004b84:	4602      	mov	r2, r0
 8004b86:	b918      	cbnz	r0, 8004b90 <__mdiff+0x60>
 8004b88:	f240 2145 	movw	r1, #581	@ 0x245
 8004b8c:	4b30      	ldr	r3, [pc, #192]	@ (8004c50 <__mdiff+0x120>)
 8004b8e:	e7e3      	b.n	8004b58 <__mdiff+0x28>
 8004b90:	f100 0b14 	add.w	fp, r0, #20
 8004b94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004b98:	f109 0310 	add.w	r3, r9, #16
 8004b9c:	60c5      	str	r5, [r0, #12]
 8004b9e:	f04f 0c00 	mov.w	ip, #0
 8004ba2:	f109 0514 	add.w	r5, r9, #20
 8004ba6:	46d9      	mov	r9, fp
 8004ba8:	6926      	ldr	r6, [r4, #16]
 8004baa:	f104 0e14 	add.w	lr, r4, #20
 8004bae:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004bb2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	9b01      	ldr	r3, [sp, #4]
 8004bba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004bbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004bc2:	b281      	uxth	r1, r0
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	fa1f f38a 	uxth.w	r3, sl
 8004bca:	1a5b      	subs	r3, r3, r1
 8004bcc:	0c00      	lsrs	r0, r0, #16
 8004bce:	4463      	add	r3, ip
 8004bd0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004bd4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004bde:	4576      	cmp	r6, lr
 8004be0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004be4:	f849 3b04 	str.w	r3, [r9], #4
 8004be8:	d8e6      	bhi.n	8004bb8 <__mdiff+0x88>
 8004bea:	1b33      	subs	r3, r6, r4
 8004bec:	3b15      	subs	r3, #21
 8004bee:	f023 0303 	bic.w	r3, r3, #3
 8004bf2:	3415      	adds	r4, #21
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	42a6      	cmp	r6, r4
 8004bf8:	bf38      	it	cc
 8004bfa:	2304      	movcc	r3, #4
 8004bfc:	441d      	add	r5, r3
 8004bfe:	445b      	add	r3, fp
 8004c00:	461e      	mov	r6, r3
 8004c02:	462c      	mov	r4, r5
 8004c04:	4544      	cmp	r4, r8
 8004c06:	d30e      	bcc.n	8004c26 <__mdiff+0xf6>
 8004c08:	f108 0103 	add.w	r1, r8, #3
 8004c0c:	1b49      	subs	r1, r1, r5
 8004c0e:	f021 0103 	bic.w	r1, r1, #3
 8004c12:	3d03      	subs	r5, #3
 8004c14:	45a8      	cmp	r8, r5
 8004c16:	bf38      	it	cc
 8004c18:	2100      	movcc	r1, #0
 8004c1a:	440b      	add	r3, r1
 8004c1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004c20:	b199      	cbz	r1, 8004c4a <__mdiff+0x11a>
 8004c22:	6117      	str	r7, [r2, #16]
 8004c24:	e79e      	b.n	8004b64 <__mdiff+0x34>
 8004c26:	46e6      	mov	lr, ip
 8004c28:	f854 1b04 	ldr.w	r1, [r4], #4
 8004c2c:	fa1f fc81 	uxth.w	ip, r1
 8004c30:	44f4      	add	ip, lr
 8004c32:	0c08      	lsrs	r0, r1, #16
 8004c34:	4471      	add	r1, lr
 8004c36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004c3a:	b289      	uxth	r1, r1
 8004c3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004c40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004c44:	f846 1b04 	str.w	r1, [r6], #4
 8004c48:	e7dc      	b.n	8004c04 <__mdiff+0xd4>
 8004c4a:	3f01      	subs	r7, #1
 8004c4c:	e7e6      	b.n	8004c1c <__mdiff+0xec>
 8004c4e:	bf00      	nop
 8004c50:	08006e37 	.word	0x08006e37
 8004c54:	08006e48 	.word	0x08006e48

08004c58 <__ulp>:
 8004c58:	4b0e      	ldr	r3, [pc, #56]	@ (8004c94 <__ulp+0x3c>)
 8004c5a:	400b      	ands	r3, r1
 8004c5c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	dc08      	bgt.n	8004c76 <__ulp+0x1e>
 8004c64:	425b      	negs	r3, r3
 8004c66:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8004c6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004c6e:	da04      	bge.n	8004c7a <__ulp+0x22>
 8004c70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004c74:	4113      	asrs	r3, r2
 8004c76:	2200      	movs	r2, #0
 8004c78:	e008      	b.n	8004c8c <__ulp+0x34>
 8004c7a:	f1a2 0314 	sub.w	r3, r2, #20
 8004c7e:	2b1e      	cmp	r3, #30
 8004c80:	bfd6      	itet	le
 8004c82:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8004c86:	2201      	movgt	r2, #1
 8004c88:	40da      	lsrle	r2, r3
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	7ff00000 	.word	0x7ff00000

08004c98 <__b2d>:
 8004c98:	6902      	ldr	r2, [r0, #16]
 8004c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9c:	f100 0614 	add.w	r6, r0, #20
 8004ca0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8004ca4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8004ca8:	4f1e      	ldr	r7, [pc, #120]	@ (8004d24 <__b2d+0x8c>)
 8004caa:	4620      	mov	r0, r4
 8004cac:	f7ff fd54 	bl	8004758 <__hi0bits>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f1c0 0020 	rsb	r0, r0, #32
 8004cb6:	2b0a      	cmp	r3, #10
 8004cb8:	f1a2 0504 	sub.w	r5, r2, #4
 8004cbc:	6008      	str	r0, [r1, #0]
 8004cbe:	dc12      	bgt.n	8004ce6 <__b2d+0x4e>
 8004cc0:	42ae      	cmp	r6, r5
 8004cc2:	bf2c      	ite	cs
 8004cc4:	2200      	movcs	r2, #0
 8004cc6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8004cca:	f1c3 0c0b 	rsb	ip, r3, #11
 8004cce:	3315      	adds	r3, #21
 8004cd0:	fa24 fe0c 	lsr.w	lr, r4, ip
 8004cd4:	fa04 f303 	lsl.w	r3, r4, r3
 8004cd8:	fa22 f20c 	lsr.w	r2, r2, ip
 8004cdc:	ea4e 0107 	orr.w	r1, lr, r7
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce6:	42ae      	cmp	r6, r5
 8004ce8:	bf36      	itet	cc
 8004cea:	f1a2 0508 	subcc.w	r5, r2, #8
 8004cee:	2200      	movcs	r2, #0
 8004cf0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8004cf4:	3b0b      	subs	r3, #11
 8004cf6:	d012      	beq.n	8004d1e <__b2d+0x86>
 8004cf8:	f1c3 0720 	rsb	r7, r3, #32
 8004cfc:	fa22 f107 	lsr.w	r1, r2, r7
 8004d00:	409c      	lsls	r4, r3
 8004d02:	430c      	orrs	r4, r1
 8004d04:	42b5      	cmp	r5, r6
 8004d06:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8004d0a:	bf94      	ite	ls
 8004d0c:	2400      	movls	r4, #0
 8004d0e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8004d12:	409a      	lsls	r2, r3
 8004d14:	40fc      	lsrs	r4, r7
 8004d16:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8004d1a:	4322      	orrs	r2, r4
 8004d1c:	e7e1      	b.n	8004ce2 <__b2d+0x4a>
 8004d1e:	ea44 0107 	orr.w	r1, r4, r7
 8004d22:	e7de      	b.n	8004ce2 <__b2d+0x4a>
 8004d24:	3ff00000 	.word	0x3ff00000

08004d28 <__d2b>:
 8004d28:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	4690      	mov	r8, r2
 8004d30:	4699      	mov	r9, r3
 8004d32:	9e08      	ldr	r6, [sp, #32]
 8004d34:	f7ff fc1e 	bl	8004574 <_Balloc>
 8004d38:	4604      	mov	r4, r0
 8004d3a:	b930      	cbnz	r0, 8004d4a <__d2b+0x22>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	f240 310f 	movw	r1, #783	@ 0x30f
 8004d42:	4b23      	ldr	r3, [pc, #140]	@ (8004dd0 <__d2b+0xa8>)
 8004d44:	4823      	ldr	r0, [pc, #140]	@ (8004dd4 <__d2b+0xac>)
 8004d46:	f001 f989 	bl	800605c <__assert_func>
 8004d4a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004d4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d52:	b10d      	cbz	r5, 8004d58 <__d2b+0x30>
 8004d54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d58:	9301      	str	r3, [sp, #4]
 8004d5a:	f1b8 0300 	subs.w	r3, r8, #0
 8004d5e:	d024      	beq.n	8004daa <__d2b+0x82>
 8004d60:	4668      	mov	r0, sp
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	f7ff fd17 	bl	8004796 <__lo0bits>
 8004d68:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004d6c:	b1d8      	cbz	r0, 8004da6 <__d2b+0x7e>
 8004d6e:	f1c0 0320 	rsb	r3, r0, #32
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	430b      	orrs	r3, r1
 8004d78:	40c2      	lsrs	r2, r0
 8004d7a:	6163      	str	r3, [r4, #20]
 8004d7c:	9201      	str	r2, [sp, #4]
 8004d7e:	9b01      	ldr	r3, [sp, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	bf0c      	ite	eq
 8004d84:	2201      	moveq	r2, #1
 8004d86:	2202      	movne	r2, #2
 8004d88:	61a3      	str	r3, [r4, #24]
 8004d8a:	6122      	str	r2, [r4, #16]
 8004d8c:	b1ad      	cbz	r5, 8004dba <__d2b+0x92>
 8004d8e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004d92:	4405      	add	r5, r0
 8004d94:	6035      	str	r5, [r6, #0]
 8004d96:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d9c:	6018      	str	r0, [r3, #0]
 8004d9e:	4620      	mov	r0, r4
 8004da0:	b002      	add	sp, #8
 8004da2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004da6:	6161      	str	r1, [r4, #20]
 8004da8:	e7e9      	b.n	8004d7e <__d2b+0x56>
 8004daa:	a801      	add	r0, sp, #4
 8004dac:	f7ff fcf3 	bl	8004796 <__lo0bits>
 8004db0:	9b01      	ldr	r3, [sp, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	6163      	str	r3, [r4, #20]
 8004db6:	3020      	adds	r0, #32
 8004db8:	e7e7      	b.n	8004d8a <__d2b+0x62>
 8004dba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004dbe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004dc2:	6030      	str	r0, [r6, #0]
 8004dc4:	6918      	ldr	r0, [r3, #16]
 8004dc6:	f7ff fcc7 	bl	8004758 <__hi0bits>
 8004dca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004dce:	e7e4      	b.n	8004d9a <__d2b+0x72>
 8004dd0:	08006e37 	.word	0x08006e37
 8004dd4:	08006e48 	.word	0x08006e48

08004dd8 <__ratio>:
 8004dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	e9cd 1000 	strd	r1, r0, [sp]
 8004de2:	a902      	add	r1, sp, #8
 8004de4:	f7ff ff58 	bl	8004c98 <__b2d>
 8004de8:	468b      	mov	fp, r1
 8004dea:	4606      	mov	r6, r0
 8004dec:	460f      	mov	r7, r1
 8004dee:	9800      	ldr	r0, [sp, #0]
 8004df0:	a903      	add	r1, sp, #12
 8004df2:	f7ff ff51 	bl	8004c98 <__b2d>
 8004df6:	460d      	mov	r5, r1
 8004df8:	9b01      	ldr	r3, [sp, #4]
 8004dfa:	4689      	mov	r9, r1
 8004dfc:	6919      	ldr	r1, [r3, #16]
 8004dfe:	9b00      	ldr	r3, [sp, #0]
 8004e00:	4604      	mov	r4, r0
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	4630      	mov	r0, r6
 8004e06:	1ac9      	subs	r1, r1, r3
 8004e08:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	bfcd      	iteet	gt
 8004e16:	463a      	movgt	r2, r7
 8004e18:	462a      	movle	r2, r5
 8004e1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004e1e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8004e22:	bfd8      	it	le
 8004e24:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8004e28:	464b      	mov	r3, r9
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	f7fb fc7d 	bl	800072c <__aeabi_ddiv>
 8004e32:	b005      	add	sp, #20
 8004e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004e38 <__copybits>:
 8004e38:	3901      	subs	r1, #1
 8004e3a:	b570      	push	{r4, r5, r6, lr}
 8004e3c:	1149      	asrs	r1, r1, #5
 8004e3e:	6914      	ldr	r4, [r2, #16]
 8004e40:	3101      	adds	r1, #1
 8004e42:	f102 0314 	add.w	r3, r2, #20
 8004e46:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004e4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004e4e:	1f05      	subs	r5, r0, #4
 8004e50:	42a3      	cmp	r3, r4
 8004e52:	d30c      	bcc.n	8004e6e <__copybits+0x36>
 8004e54:	1aa3      	subs	r3, r4, r2
 8004e56:	3b11      	subs	r3, #17
 8004e58:	f023 0303 	bic.w	r3, r3, #3
 8004e5c:	3211      	adds	r2, #17
 8004e5e:	42a2      	cmp	r2, r4
 8004e60:	bf88      	it	hi
 8004e62:	2300      	movhi	r3, #0
 8004e64:	4418      	add	r0, r3
 8004e66:	2300      	movs	r3, #0
 8004e68:	4288      	cmp	r0, r1
 8004e6a:	d305      	bcc.n	8004e78 <__copybits+0x40>
 8004e6c:	bd70      	pop	{r4, r5, r6, pc}
 8004e6e:	f853 6b04 	ldr.w	r6, [r3], #4
 8004e72:	f845 6f04 	str.w	r6, [r5, #4]!
 8004e76:	e7eb      	b.n	8004e50 <__copybits+0x18>
 8004e78:	f840 3b04 	str.w	r3, [r0], #4
 8004e7c:	e7f4      	b.n	8004e68 <__copybits+0x30>

08004e7e <__any_on>:
 8004e7e:	f100 0214 	add.w	r2, r0, #20
 8004e82:	6900      	ldr	r0, [r0, #16]
 8004e84:	114b      	asrs	r3, r1, #5
 8004e86:	4298      	cmp	r0, r3
 8004e88:	b510      	push	{r4, lr}
 8004e8a:	db11      	blt.n	8004eb0 <__any_on+0x32>
 8004e8c:	dd0a      	ble.n	8004ea4 <__any_on+0x26>
 8004e8e:	f011 011f 	ands.w	r1, r1, #31
 8004e92:	d007      	beq.n	8004ea4 <__any_on+0x26>
 8004e94:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004e98:	fa24 f001 	lsr.w	r0, r4, r1
 8004e9c:	fa00 f101 	lsl.w	r1, r0, r1
 8004ea0:	428c      	cmp	r4, r1
 8004ea2:	d10b      	bne.n	8004ebc <__any_on+0x3e>
 8004ea4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d803      	bhi.n	8004eb4 <__any_on+0x36>
 8004eac:	2000      	movs	r0, #0
 8004eae:	bd10      	pop	{r4, pc}
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	e7f7      	b.n	8004ea4 <__any_on+0x26>
 8004eb4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004eb8:	2900      	cmp	r1, #0
 8004eba:	d0f5      	beq.n	8004ea8 <__any_on+0x2a>
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	e7f6      	b.n	8004eae <__any_on+0x30>

08004ec0 <sulp>:
 8004ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec4:	460f      	mov	r7, r1
 8004ec6:	4690      	mov	r8, r2
 8004ec8:	f7ff fec6 	bl	8004c58 <__ulp>
 8004ecc:	4604      	mov	r4, r0
 8004ece:	460d      	mov	r5, r1
 8004ed0:	f1b8 0f00 	cmp.w	r8, #0
 8004ed4:	d011      	beq.n	8004efa <sulp+0x3a>
 8004ed6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004eda:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	dd0b      	ble.n	8004efa <sulp+0x3a>
 8004ee2:	2400      	movs	r4, #0
 8004ee4:	051b      	lsls	r3, r3, #20
 8004ee6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004eea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004eee:	4622      	mov	r2, r4
 8004ef0:	462b      	mov	r3, r5
 8004ef2:	f7fb faf1 	bl	80004d8 <__aeabi_dmul>
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	460d      	mov	r5, r1
 8004efa:	4620      	mov	r0, r4
 8004efc:	4629      	mov	r1, r5
 8004efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f02:	0000      	movs	r0, r0
 8004f04:	0000      	movs	r0, r0
	...

08004f08 <_strtod_l>:
 8004f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0c:	b09f      	sub	sp, #124	@ 0x7c
 8004f0e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004f10:	2200      	movs	r2, #0
 8004f12:	460c      	mov	r4, r1
 8004f14:	921a      	str	r2, [sp, #104]	@ 0x68
 8004f16:	f04f 0a00 	mov.w	sl, #0
 8004f1a:	f04f 0b00 	mov.w	fp, #0
 8004f1e:	460a      	mov	r2, r1
 8004f20:	9005      	str	r0, [sp, #20]
 8004f22:	9219      	str	r2, [sp, #100]	@ 0x64
 8004f24:	7811      	ldrb	r1, [r2, #0]
 8004f26:	292b      	cmp	r1, #43	@ 0x2b
 8004f28:	d048      	beq.n	8004fbc <_strtod_l+0xb4>
 8004f2a:	d836      	bhi.n	8004f9a <_strtod_l+0x92>
 8004f2c:	290d      	cmp	r1, #13
 8004f2e:	d830      	bhi.n	8004f92 <_strtod_l+0x8a>
 8004f30:	2908      	cmp	r1, #8
 8004f32:	d830      	bhi.n	8004f96 <_strtod_l+0x8e>
 8004f34:	2900      	cmp	r1, #0
 8004f36:	d039      	beq.n	8004fac <_strtod_l+0xa4>
 8004f38:	2200      	movs	r2, #0
 8004f3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004f3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004f3e:	782a      	ldrb	r2, [r5, #0]
 8004f40:	2a30      	cmp	r2, #48	@ 0x30
 8004f42:	f040 80b1 	bne.w	80050a8 <_strtod_l+0x1a0>
 8004f46:	786a      	ldrb	r2, [r5, #1]
 8004f48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004f4c:	2a58      	cmp	r2, #88	@ 0x58
 8004f4e:	d16c      	bne.n	800502a <_strtod_l+0x122>
 8004f50:	9302      	str	r3, [sp, #8]
 8004f52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f54:	4a8e      	ldr	r2, [pc, #568]	@ (8005190 <_strtod_l+0x288>)
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	ab1a      	add	r3, sp, #104	@ 0x68
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	9805      	ldr	r0, [sp, #20]
 8004f5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004f60:	a919      	add	r1, sp, #100	@ 0x64
 8004f62:	f001 f915 	bl	8006190 <__gethex>
 8004f66:	f010 060f 	ands.w	r6, r0, #15
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	d005      	beq.n	8004f7a <_strtod_l+0x72>
 8004f6e:	2e06      	cmp	r6, #6
 8004f70:	d126      	bne.n	8004fc0 <_strtod_l+0xb8>
 8004f72:	2300      	movs	r3, #0
 8004f74:	3501      	adds	r5, #1
 8004f76:	9519      	str	r5, [sp, #100]	@ 0x64
 8004f78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f040 8584 	bne.w	8005a8a <_strtod_l+0xb82>
 8004f82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f84:	b1bb      	cbz	r3, 8004fb6 <_strtod_l+0xae>
 8004f86:	4650      	mov	r0, sl
 8004f88:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8004f8c:	b01f      	add	sp, #124	@ 0x7c
 8004f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f92:	2920      	cmp	r1, #32
 8004f94:	d1d0      	bne.n	8004f38 <_strtod_l+0x30>
 8004f96:	3201      	adds	r2, #1
 8004f98:	e7c3      	b.n	8004f22 <_strtod_l+0x1a>
 8004f9a:	292d      	cmp	r1, #45	@ 0x2d
 8004f9c:	d1cc      	bne.n	8004f38 <_strtod_l+0x30>
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004fa2:	1c51      	adds	r1, r2, #1
 8004fa4:	9119      	str	r1, [sp, #100]	@ 0x64
 8004fa6:	7852      	ldrb	r2, [r2, #1]
 8004fa8:	2a00      	cmp	r2, #0
 8004faa:	d1c7      	bne.n	8004f3c <_strtod_l+0x34>
 8004fac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004fae:	9419      	str	r4, [sp, #100]	@ 0x64
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 8568 	bne.w	8005a86 <_strtod_l+0xb7e>
 8004fb6:	4650      	mov	r0, sl
 8004fb8:	4659      	mov	r1, fp
 8004fba:	e7e7      	b.n	8004f8c <_strtod_l+0x84>
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	e7ef      	b.n	8004fa0 <_strtod_l+0x98>
 8004fc0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004fc2:	b13a      	cbz	r2, 8004fd4 <_strtod_l+0xcc>
 8004fc4:	2135      	movs	r1, #53	@ 0x35
 8004fc6:	a81c      	add	r0, sp, #112	@ 0x70
 8004fc8:	f7ff ff36 	bl	8004e38 <__copybits>
 8004fcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004fce:	9805      	ldr	r0, [sp, #20]
 8004fd0:	f7ff fb10 	bl	80045f4 <_Bfree>
 8004fd4:	3e01      	subs	r6, #1
 8004fd6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004fd8:	2e04      	cmp	r6, #4
 8004fda:	d806      	bhi.n	8004fea <_strtod_l+0xe2>
 8004fdc:	e8df f006 	tbb	[pc, r6]
 8004fe0:	201d0314 	.word	0x201d0314
 8004fe4:	14          	.byte	0x14
 8004fe5:	00          	.byte	0x00
 8004fe6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004fea:	05e1      	lsls	r1, r4, #23
 8004fec:	bf48      	it	mi
 8004fee:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004ff2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004ff6:	0d1b      	lsrs	r3, r3, #20
 8004ff8:	051b      	lsls	r3, r3, #20
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1bd      	bne.n	8004f7a <_strtod_l+0x72>
 8004ffe:	f7fe fb29 	bl	8003654 <__errno>
 8005002:	2322      	movs	r3, #34	@ 0x22
 8005004:	6003      	str	r3, [r0, #0]
 8005006:	e7b8      	b.n	8004f7a <_strtod_l+0x72>
 8005008:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800500c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005010:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005014:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005018:	e7e7      	b.n	8004fea <_strtod_l+0xe2>
 800501a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005194 <_strtod_l+0x28c>
 800501e:	e7e4      	b.n	8004fea <_strtod_l+0xe2>
 8005020:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005024:	f04f 3aff 	mov.w	sl, #4294967295
 8005028:	e7df      	b.n	8004fea <_strtod_l+0xe2>
 800502a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005030:	785b      	ldrb	r3, [r3, #1]
 8005032:	2b30      	cmp	r3, #48	@ 0x30
 8005034:	d0f9      	beq.n	800502a <_strtod_l+0x122>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d09f      	beq.n	8004f7a <_strtod_l+0x72>
 800503a:	2301      	movs	r3, #1
 800503c:	9309      	str	r3, [sp, #36]	@ 0x24
 800503e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005040:	220a      	movs	r2, #10
 8005042:	930c      	str	r3, [sp, #48]	@ 0x30
 8005044:	2300      	movs	r3, #0
 8005046:	461f      	mov	r7, r3
 8005048:	9308      	str	r3, [sp, #32]
 800504a:	930a      	str	r3, [sp, #40]	@ 0x28
 800504c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800504e:	7805      	ldrb	r5, [r0, #0]
 8005050:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005054:	b2d9      	uxtb	r1, r3
 8005056:	2909      	cmp	r1, #9
 8005058:	d928      	bls.n	80050ac <_strtod_l+0x1a4>
 800505a:	2201      	movs	r2, #1
 800505c:	494e      	ldr	r1, [pc, #312]	@ (8005198 <_strtod_l+0x290>)
 800505e:	f000 ffc7 	bl	8005ff0 <strncmp>
 8005062:	2800      	cmp	r0, #0
 8005064:	d032      	beq.n	80050cc <_strtod_l+0x1c4>
 8005066:	2000      	movs	r0, #0
 8005068:	462a      	mov	r2, r5
 800506a:	4681      	mov	r9, r0
 800506c:	463d      	mov	r5, r7
 800506e:	4603      	mov	r3, r0
 8005070:	2a65      	cmp	r2, #101	@ 0x65
 8005072:	d001      	beq.n	8005078 <_strtod_l+0x170>
 8005074:	2a45      	cmp	r2, #69	@ 0x45
 8005076:	d114      	bne.n	80050a2 <_strtod_l+0x19a>
 8005078:	b91d      	cbnz	r5, 8005082 <_strtod_l+0x17a>
 800507a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800507c:	4302      	orrs	r2, r0
 800507e:	d095      	beq.n	8004fac <_strtod_l+0xa4>
 8005080:	2500      	movs	r5, #0
 8005082:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005084:	1c62      	adds	r2, r4, #1
 8005086:	9219      	str	r2, [sp, #100]	@ 0x64
 8005088:	7862      	ldrb	r2, [r4, #1]
 800508a:	2a2b      	cmp	r2, #43	@ 0x2b
 800508c:	d077      	beq.n	800517e <_strtod_l+0x276>
 800508e:	2a2d      	cmp	r2, #45	@ 0x2d
 8005090:	d07b      	beq.n	800518a <_strtod_l+0x282>
 8005092:	f04f 0c00 	mov.w	ip, #0
 8005096:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800509a:	2909      	cmp	r1, #9
 800509c:	f240 8082 	bls.w	80051a4 <_strtod_l+0x29c>
 80050a0:	9419      	str	r4, [sp, #100]	@ 0x64
 80050a2:	f04f 0800 	mov.w	r8, #0
 80050a6:	e0a2      	b.n	80051ee <_strtod_l+0x2e6>
 80050a8:	2300      	movs	r3, #0
 80050aa:	e7c7      	b.n	800503c <_strtod_l+0x134>
 80050ac:	2f08      	cmp	r7, #8
 80050ae:	bfd5      	itete	le
 80050b0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80050b2:	9908      	ldrgt	r1, [sp, #32]
 80050b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80050b8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80050bc:	f100 0001 	add.w	r0, r0, #1
 80050c0:	bfd4      	ite	le
 80050c2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80050c4:	9308      	strgt	r3, [sp, #32]
 80050c6:	3701      	adds	r7, #1
 80050c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80050ca:	e7bf      	b.n	800504c <_strtod_l+0x144>
 80050cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80050d2:	785a      	ldrb	r2, [r3, #1]
 80050d4:	b37f      	cbz	r7, 8005136 <_strtod_l+0x22e>
 80050d6:	4681      	mov	r9, r0
 80050d8:	463d      	mov	r5, r7
 80050da:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80050de:	2b09      	cmp	r3, #9
 80050e0:	d912      	bls.n	8005108 <_strtod_l+0x200>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e7c4      	b.n	8005070 <_strtod_l+0x168>
 80050e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80050e8:	3001      	adds	r0, #1
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80050ee:	785a      	ldrb	r2, [r3, #1]
 80050f0:	2a30      	cmp	r2, #48	@ 0x30
 80050f2:	d0f8      	beq.n	80050e6 <_strtod_l+0x1de>
 80050f4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	f200 84cb 	bhi.w	8005a94 <_strtod_l+0xb8c>
 80050fe:	4681      	mov	r9, r0
 8005100:	2000      	movs	r0, #0
 8005102:	4605      	mov	r5, r0
 8005104:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005106:	930c      	str	r3, [sp, #48]	@ 0x30
 8005108:	3a30      	subs	r2, #48	@ 0x30
 800510a:	f100 0301 	add.w	r3, r0, #1
 800510e:	d02a      	beq.n	8005166 <_strtod_l+0x25e>
 8005110:	4499      	add	r9, r3
 8005112:	210a      	movs	r1, #10
 8005114:	462b      	mov	r3, r5
 8005116:	eb00 0c05 	add.w	ip, r0, r5
 800511a:	4563      	cmp	r3, ip
 800511c:	d10d      	bne.n	800513a <_strtod_l+0x232>
 800511e:	1c69      	adds	r1, r5, #1
 8005120:	4401      	add	r1, r0
 8005122:	4428      	add	r0, r5
 8005124:	2808      	cmp	r0, #8
 8005126:	dc16      	bgt.n	8005156 <_strtod_l+0x24e>
 8005128:	230a      	movs	r3, #10
 800512a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800512c:	fb03 2300 	mla	r3, r3, r0, r2
 8005130:	930a      	str	r3, [sp, #40]	@ 0x28
 8005132:	2300      	movs	r3, #0
 8005134:	e018      	b.n	8005168 <_strtod_l+0x260>
 8005136:	4638      	mov	r0, r7
 8005138:	e7da      	b.n	80050f0 <_strtod_l+0x1e8>
 800513a:	2b08      	cmp	r3, #8
 800513c:	f103 0301 	add.w	r3, r3, #1
 8005140:	dc03      	bgt.n	800514a <_strtod_l+0x242>
 8005142:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005144:	434e      	muls	r6, r1
 8005146:	960a      	str	r6, [sp, #40]	@ 0x28
 8005148:	e7e7      	b.n	800511a <_strtod_l+0x212>
 800514a:	2b10      	cmp	r3, #16
 800514c:	bfde      	ittt	le
 800514e:	9e08      	ldrle	r6, [sp, #32]
 8005150:	434e      	mulle	r6, r1
 8005152:	9608      	strle	r6, [sp, #32]
 8005154:	e7e1      	b.n	800511a <_strtod_l+0x212>
 8005156:	280f      	cmp	r0, #15
 8005158:	dceb      	bgt.n	8005132 <_strtod_l+0x22a>
 800515a:	230a      	movs	r3, #10
 800515c:	9808      	ldr	r0, [sp, #32]
 800515e:	fb03 2300 	mla	r3, r3, r0, r2
 8005162:	9308      	str	r3, [sp, #32]
 8005164:	e7e5      	b.n	8005132 <_strtod_l+0x22a>
 8005166:	4629      	mov	r1, r5
 8005168:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800516a:	460d      	mov	r5, r1
 800516c:	1c50      	adds	r0, r2, #1
 800516e:	9019      	str	r0, [sp, #100]	@ 0x64
 8005170:	7852      	ldrb	r2, [r2, #1]
 8005172:	4618      	mov	r0, r3
 8005174:	e7b1      	b.n	80050da <_strtod_l+0x1d2>
 8005176:	f04f 0900 	mov.w	r9, #0
 800517a:	2301      	movs	r3, #1
 800517c:	e77d      	b.n	800507a <_strtod_l+0x172>
 800517e:	f04f 0c00 	mov.w	ip, #0
 8005182:	1ca2      	adds	r2, r4, #2
 8005184:	9219      	str	r2, [sp, #100]	@ 0x64
 8005186:	78a2      	ldrb	r2, [r4, #2]
 8005188:	e785      	b.n	8005096 <_strtod_l+0x18e>
 800518a:	f04f 0c01 	mov.w	ip, #1
 800518e:	e7f8      	b.n	8005182 <_strtod_l+0x27a>
 8005190:	08006fb8 	.word	0x08006fb8
 8005194:	7ff00000 	.word	0x7ff00000
 8005198:	08006fa0 	.word	0x08006fa0
 800519c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800519e:	1c51      	adds	r1, r2, #1
 80051a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80051a2:	7852      	ldrb	r2, [r2, #1]
 80051a4:	2a30      	cmp	r2, #48	@ 0x30
 80051a6:	d0f9      	beq.n	800519c <_strtod_l+0x294>
 80051a8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80051ac:	2908      	cmp	r1, #8
 80051ae:	f63f af78 	bhi.w	80050a2 <_strtod_l+0x19a>
 80051b2:	f04f 080a 	mov.w	r8, #10
 80051b6:	3a30      	subs	r2, #48	@ 0x30
 80051b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80051ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80051bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80051be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80051c0:	1c56      	adds	r6, r2, #1
 80051c2:	9619      	str	r6, [sp, #100]	@ 0x64
 80051c4:	7852      	ldrb	r2, [r2, #1]
 80051c6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80051ca:	f1be 0f09 	cmp.w	lr, #9
 80051ce:	d939      	bls.n	8005244 <_strtod_l+0x33c>
 80051d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80051d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80051d6:	1a76      	subs	r6, r6, r1
 80051d8:	2e08      	cmp	r6, #8
 80051da:	dc03      	bgt.n	80051e4 <_strtod_l+0x2dc>
 80051dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80051de:	4588      	cmp	r8, r1
 80051e0:	bfa8      	it	ge
 80051e2:	4688      	movge	r8, r1
 80051e4:	f1bc 0f00 	cmp.w	ip, #0
 80051e8:	d001      	beq.n	80051ee <_strtod_l+0x2e6>
 80051ea:	f1c8 0800 	rsb	r8, r8, #0
 80051ee:	2d00      	cmp	r5, #0
 80051f0:	d14e      	bne.n	8005290 <_strtod_l+0x388>
 80051f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80051f4:	4308      	orrs	r0, r1
 80051f6:	f47f aec0 	bne.w	8004f7a <_strtod_l+0x72>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f47f aed6 	bne.w	8004fac <_strtod_l+0xa4>
 8005200:	2a69      	cmp	r2, #105	@ 0x69
 8005202:	d028      	beq.n	8005256 <_strtod_l+0x34e>
 8005204:	dc25      	bgt.n	8005252 <_strtod_l+0x34a>
 8005206:	2a49      	cmp	r2, #73	@ 0x49
 8005208:	d025      	beq.n	8005256 <_strtod_l+0x34e>
 800520a:	2a4e      	cmp	r2, #78	@ 0x4e
 800520c:	f47f aece 	bne.w	8004fac <_strtod_l+0xa4>
 8005210:	499a      	ldr	r1, [pc, #616]	@ (800547c <_strtod_l+0x574>)
 8005212:	a819      	add	r0, sp, #100	@ 0x64
 8005214:	f001 f9de 	bl	80065d4 <__match>
 8005218:	2800      	cmp	r0, #0
 800521a:	f43f aec7 	beq.w	8004fac <_strtod_l+0xa4>
 800521e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b28      	cmp	r3, #40	@ 0x28
 8005224:	d12e      	bne.n	8005284 <_strtod_l+0x37c>
 8005226:	4996      	ldr	r1, [pc, #600]	@ (8005480 <_strtod_l+0x578>)
 8005228:	aa1c      	add	r2, sp, #112	@ 0x70
 800522a:	a819      	add	r0, sp, #100	@ 0x64
 800522c:	f001 f9e6 	bl	80065fc <__hexnan>
 8005230:	2805      	cmp	r0, #5
 8005232:	d127      	bne.n	8005284 <_strtod_l+0x37c>
 8005234:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005236:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800523a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800523e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005242:	e69a      	b.n	8004f7a <_strtod_l+0x72>
 8005244:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005246:	fb08 2101 	mla	r1, r8, r1, r2
 800524a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800524e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005250:	e7b5      	b.n	80051be <_strtod_l+0x2b6>
 8005252:	2a6e      	cmp	r2, #110	@ 0x6e
 8005254:	e7da      	b.n	800520c <_strtod_l+0x304>
 8005256:	498b      	ldr	r1, [pc, #556]	@ (8005484 <_strtod_l+0x57c>)
 8005258:	a819      	add	r0, sp, #100	@ 0x64
 800525a:	f001 f9bb 	bl	80065d4 <__match>
 800525e:	2800      	cmp	r0, #0
 8005260:	f43f aea4 	beq.w	8004fac <_strtod_l+0xa4>
 8005264:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005266:	4988      	ldr	r1, [pc, #544]	@ (8005488 <_strtod_l+0x580>)
 8005268:	3b01      	subs	r3, #1
 800526a:	a819      	add	r0, sp, #100	@ 0x64
 800526c:	9319      	str	r3, [sp, #100]	@ 0x64
 800526e:	f001 f9b1 	bl	80065d4 <__match>
 8005272:	b910      	cbnz	r0, 800527a <_strtod_l+0x372>
 8005274:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005276:	3301      	adds	r3, #1
 8005278:	9319      	str	r3, [sp, #100]	@ 0x64
 800527a:	f04f 0a00 	mov.w	sl, #0
 800527e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800548c <_strtod_l+0x584>
 8005282:	e67a      	b.n	8004f7a <_strtod_l+0x72>
 8005284:	4882      	ldr	r0, [pc, #520]	@ (8005490 <_strtod_l+0x588>)
 8005286:	f000 fee3 	bl	8006050 <nan>
 800528a:	4682      	mov	sl, r0
 800528c:	468b      	mov	fp, r1
 800528e:	e674      	b.n	8004f7a <_strtod_l+0x72>
 8005290:	eba8 0309 	sub.w	r3, r8, r9
 8005294:	2f00      	cmp	r7, #0
 8005296:	bf08      	it	eq
 8005298:	462f      	moveq	r7, r5
 800529a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800529c:	2d10      	cmp	r5, #16
 800529e:	462c      	mov	r4, r5
 80052a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80052a2:	bfa8      	it	ge
 80052a4:	2410      	movge	r4, #16
 80052a6:	f7fb f89d 	bl	80003e4 <__aeabi_ui2d>
 80052aa:	2d09      	cmp	r5, #9
 80052ac:	4682      	mov	sl, r0
 80052ae:	468b      	mov	fp, r1
 80052b0:	dc11      	bgt.n	80052d6 <_strtod_l+0x3ce>
 80052b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f43f ae60 	beq.w	8004f7a <_strtod_l+0x72>
 80052ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052bc:	dd76      	ble.n	80053ac <_strtod_l+0x4a4>
 80052be:	2b16      	cmp	r3, #22
 80052c0:	dc5d      	bgt.n	800537e <_strtod_l+0x476>
 80052c2:	4974      	ldr	r1, [pc, #464]	@ (8005494 <_strtod_l+0x58c>)
 80052c4:	4652      	mov	r2, sl
 80052c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80052ca:	465b      	mov	r3, fp
 80052cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052d0:	f7fb f902 	bl	80004d8 <__aeabi_dmul>
 80052d4:	e7d9      	b.n	800528a <_strtod_l+0x382>
 80052d6:	4b6f      	ldr	r3, [pc, #444]	@ (8005494 <_strtod_l+0x58c>)
 80052d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80052e0:	f7fb f8fa 	bl	80004d8 <__aeabi_dmul>
 80052e4:	4682      	mov	sl, r0
 80052e6:	9808      	ldr	r0, [sp, #32]
 80052e8:	468b      	mov	fp, r1
 80052ea:	f7fb f87b 	bl	80003e4 <__aeabi_ui2d>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4650      	mov	r0, sl
 80052f4:	4659      	mov	r1, fp
 80052f6:	f7fa ff39 	bl	800016c <__adddf3>
 80052fa:	2d0f      	cmp	r5, #15
 80052fc:	4682      	mov	sl, r0
 80052fe:	468b      	mov	fp, r1
 8005300:	ddd7      	ble.n	80052b2 <_strtod_l+0x3aa>
 8005302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005304:	1b2c      	subs	r4, r5, r4
 8005306:	441c      	add	r4, r3
 8005308:	2c00      	cmp	r4, #0
 800530a:	f340 8096 	ble.w	800543a <_strtod_l+0x532>
 800530e:	f014 030f 	ands.w	r3, r4, #15
 8005312:	d00a      	beq.n	800532a <_strtod_l+0x422>
 8005314:	495f      	ldr	r1, [pc, #380]	@ (8005494 <_strtod_l+0x58c>)
 8005316:	4652      	mov	r2, sl
 8005318:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800531c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005320:	465b      	mov	r3, fp
 8005322:	f7fb f8d9 	bl	80004d8 <__aeabi_dmul>
 8005326:	4682      	mov	sl, r0
 8005328:	468b      	mov	fp, r1
 800532a:	f034 040f 	bics.w	r4, r4, #15
 800532e:	d073      	beq.n	8005418 <_strtod_l+0x510>
 8005330:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005334:	dd48      	ble.n	80053c8 <_strtod_l+0x4c0>
 8005336:	2400      	movs	r4, #0
 8005338:	46a0      	mov	r8, r4
 800533a:	46a1      	mov	r9, r4
 800533c:	940a      	str	r4, [sp, #40]	@ 0x28
 800533e:	2322      	movs	r3, #34	@ 0x22
 8005340:	f04f 0a00 	mov.w	sl, #0
 8005344:	9a05      	ldr	r2, [sp, #20]
 8005346:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800548c <_strtod_l+0x584>
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800534e:	2b00      	cmp	r3, #0
 8005350:	f43f ae13 	beq.w	8004f7a <_strtod_l+0x72>
 8005354:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005356:	9805      	ldr	r0, [sp, #20]
 8005358:	f7ff f94c 	bl	80045f4 <_Bfree>
 800535c:	4649      	mov	r1, r9
 800535e:	9805      	ldr	r0, [sp, #20]
 8005360:	f7ff f948 	bl	80045f4 <_Bfree>
 8005364:	4641      	mov	r1, r8
 8005366:	9805      	ldr	r0, [sp, #20]
 8005368:	f7ff f944 	bl	80045f4 <_Bfree>
 800536c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800536e:	9805      	ldr	r0, [sp, #20]
 8005370:	f7ff f940 	bl	80045f4 <_Bfree>
 8005374:	4621      	mov	r1, r4
 8005376:	9805      	ldr	r0, [sp, #20]
 8005378:	f7ff f93c 	bl	80045f4 <_Bfree>
 800537c:	e5fd      	b.n	8004f7a <_strtod_l+0x72>
 800537e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005380:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005384:	4293      	cmp	r3, r2
 8005386:	dbbc      	blt.n	8005302 <_strtod_l+0x3fa>
 8005388:	4c42      	ldr	r4, [pc, #264]	@ (8005494 <_strtod_l+0x58c>)
 800538a:	f1c5 050f 	rsb	r5, r5, #15
 800538e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005392:	4652      	mov	r2, sl
 8005394:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005398:	465b      	mov	r3, fp
 800539a:	f7fb f89d 	bl	80004d8 <__aeabi_dmul>
 800539e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053a0:	1b5d      	subs	r5, r3, r5
 80053a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80053a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80053aa:	e791      	b.n	80052d0 <_strtod_l+0x3c8>
 80053ac:	3316      	adds	r3, #22
 80053ae:	dba8      	blt.n	8005302 <_strtod_l+0x3fa>
 80053b0:	4b38      	ldr	r3, [pc, #224]	@ (8005494 <_strtod_l+0x58c>)
 80053b2:	eba9 0808 	sub.w	r8, r9, r8
 80053b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80053ba:	4650      	mov	r0, sl
 80053bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80053c0:	4659      	mov	r1, fp
 80053c2:	f7fb f9b3 	bl	800072c <__aeabi_ddiv>
 80053c6:	e760      	b.n	800528a <_strtod_l+0x382>
 80053c8:	4b33      	ldr	r3, [pc, #204]	@ (8005498 <_strtod_l+0x590>)
 80053ca:	4650      	mov	r0, sl
 80053cc:	9308      	str	r3, [sp, #32]
 80053ce:	2300      	movs	r3, #0
 80053d0:	4659      	mov	r1, fp
 80053d2:	461e      	mov	r6, r3
 80053d4:	1124      	asrs	r4, r4, #4
 80053d6:	2c01      	cmp	r4, #1
 80053d8:	dc21      	bgt.n	800541e <_strtod_l+0x516>
 80053da:	b10b      	cbz	r3, 80053e0 <_strtod_l+0x4d8>
 80053dc:	4682      	mov	sl, r0
 80053de:	468b      	mov	fp, r1
 80053e0:	492d      	ldr	r1, [pc, #180]	@ (8005498 <_strtod_l+0x590>)
 80053e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80053e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80053ea:	4652      	mov	r2, sl
 80053ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053f0:	465b      	mov	r3, fp
 80053f2:	f7fb f871 	bl	80004d8 <__aeabi_dmul>
 80053f6:	4b25      	ldr	r3, [pc, #148]	@ (800548c <_strtod_l+0x584>)
 80053f8:	460a      	mov	r2, r1
 80053fa:	400b      	ands	r3, r1
 80053fc:	4927      	ldr	r1, [pc, #156]	@ (800549c <_strtod_l+0x594>)
 80053fe:	4682      	mov	sl, r0
 8005400:	428b      	cmp	r3, r1
 8005402:	d898      	bhi.n	8005336 <_strtod_l+0x42e>
 8005404:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005408:	428b      	cmp	r3, r1
 800540a:	bf86      	itte	hi
 800540c:	f04f 3aff 	movhi.w	sl, #4294967295
 8005410:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80054a0 <_strtod_l+0x598>
 8005414:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005418:	2300      	movs	r3, #0
 800541a:	9308      	str	r3, [sp, #32]
 800541c:	e07a      	b.n	8005514 <_strtod_l+0x60c>
 800541e:	07e2      	lsls	r2, r4, #31
 8005420:	d505      	bpl.n	800542e <_strtod_l+0x526>
 8005422:	9b08      	ldr	r3, [sp, #32]
 8005424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005428:	f7fb f856 	bl	80004d8 <__aeabi_dmul>
 800542c:	2301      	movs	r3, #1
 800542e:	9a08      	ldr	r2, [sp, #32]
 8005430:	3601      	adds	r6, #1
 8005432:	3208      	adds	r2, #8
 8005434:	1064      	asrs	r4, r4, #1
 8005436:	9208      	str	r2, [sp, #32]
 8005438:	e7cd      	b.n	80053d6 <_strtod_l+0x4ce>
 800543a:	d0ed      	beq.n	8005418 <_strtod_l+0x510>
 800543c:	4264      	negs	r4, r4
 800543e:	f014 020f 	ands.w	r2, r4, #15
 8005442:	d00a      	beq.n	800545a <_strtod_l+0x552>
 8005444:	4b13      	ldr	r3, [pc, #76]	@ (8005494 <_strtod_l+0x58c>)
 8005446:	4650      	mov	r0, sl
 8005448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800544c:	4659      	mov	r1, fp
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	f7fb f96b 	bl	800072c <__aeabi_ddiv>
 8005456:	4682      	mov	sl, r0
 8005458:	468b      	mov	fp, r1
 800545a:	1124      	asrs	r4, r4, #4
 800545c:	d0dc      	beq.n	8005418 <_strtod_l+0x510>
 800545e:	2c1f      	cmp	r4, #31
 8005460:	dd20      	ble.n	80054a4 <_strtod_l+0x59c>
 8005462:	2400      	movs	r4, #0
 8005464:	46a0      	mov	r8, r4
 8005466:	46a1      	mov	r9, r4
 8005468:	940a      	str	r4, [sp, #40]	@ 0x28
 800546a:	2322      	movs	r3, #34	@ 0x22
 800546c:	9a05      	ldr	r2, [sp, #20]
 800546e:	f04f 0a00 	mov.w	sl, #0
 8005472:	f04f 0b00 	mov.w	fp, #0
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	e768      	b.n	800534c <_strtod_l+0x444>
 800547a:	bf00      	nop
 800547c:	08006d8f 	.word	0x08006d8f
 8005480:	08006fa4 	.word	0x08006fa4
 8005484:	08006d87 	.word	0x08006d87
 8005488:	08006dbe 	.word	0x08006dbe
 800548c:	7ff00000 	.word	0x7ff00000
 8005490:	0800714d 	.word	0x0800714d
 8005494:	08006ed8 	.word	0x08006ed8
 8005498:	08006eb0 	.word	0x08006eb0
 800549c:	7ca00000 	.word	0x7ca00000
 80054a0:	7fefffff 	.word	0x7fefffff
 80054a4:	f014 0310 	ands.w	r3, r4, #16
 80054a8:	bf18      	it	ne
 80054aa:	236a      	movne	r3, #106	@ 0x6a
 80054ac:	4650      	mov	r0, sl
 80054ae:	9308      	str	r3, [sp, #32]
 80054b0:	4659      	mov	r1, fp
 80054b2:	2300      	movs	r3, #0
 80054b4:	4ea9      	ldr	r6, [pc, #676]	@ (800575c <_strtod_l+0x854>)
 80054b6:	07e2      	lsls	r2, r4, #31
 80054b8:	d504      	bpl.n	80054c4 <_strtod_l+0x5bc>
 80054ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054be:	f7fb f80b 	bl	80004d8 <__aeabi_dmul>
 80054c2:	2301      	movs	r3, #1
 80054c4:	1064      	asrs	r4, r4, #1
 80054c6:	f106 0608 	add.w	r6, r6, #8
 80054ca:	d1f4      	bne.n	80054b6 <_strtod_l+0x5ae>
 80054cc:	b10b      	cbz	r3, 80054d2 <_strtod_l+0x5ca>
 80054ce:	4682      	mov	sl, r0
 80054d0:	468b      	mov	fp, r1
 80054d2:	9b08      	ldr	r3, [sp, #32]
 80054d4:	b1b3      	cbz	r3, 8005504 <_strtod_l+0x5fc>
 80054d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80054da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80054de:	2b00      	cmp	r3, #0
 80054e0:	4659      	mov	r1, fp
 80054e2:	dd0f      	ble.n	8005504 <_strtod_l+0x5fc>
 80054e4:	2b1f      	cmp	r3, #31
 80054e6:	dd57      	ble.n	8005598 <_strtod_l+0x690>
 80054e8:	2b34      	cmp	r3, #52	@ 0x34
 80054ea:	bfd8      	it	le
 80054ec:	f04f 33ff 	movle.w	r3, #4294967295
 80054f0:	f04f 0a00 	mov.w	sl, #0
 80054f4:	bfcf      	iteee	gt
 80054f6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80054fa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80054fe:	4093      	lslle	r3, r2
 8005500:	ea03 0b01 	andle.w	fp, r3, r1
 8005504:	2200      	movs	r2, #0
 8005506:	2300      	movs	r3, #0
 8005508:	4650      	mov	r0, sl
 800550a:	4659      	mov	r1, fp
 800550c:	f7fb fa4c 	bl	80009a8 <__aeabi_dcmpeq>
 8005510:	2800      	cmp	r0, #0
 8005512:	d1a6      	bne.n	8005462 <_strtod_l+0x55a>
 8005514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005516:	463a      	mov	r2, r7
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800551c:	462b      	mov	r3, r5
 800551e:	9805      	ldr	r0, [sp, #20]
 8005520:	f7ff f8d0 	bl	80046c4 <__s2b>
 8005524:	900a      	str	r0, [sp, #40]	@ 0x28
 8005526:	2800      	cmp	r0, #0
 8005528:	f43f af05 	beq.w	8005336 <_strtod_l+0x42e>
 800552c:	2400      	movs	r4, #0
 800552e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005530:	eba9 0308 	sub.w	r3, r9, r8
 8005534:	2a00      	cmp	r2, #0
 8005536:	bfa8      	it	ge
 8005538:	2300      	movge	r3, #0
 800553a:	46a0      	mov	r8, r4
 800553c:	9312      	str	r3, [sp, #72]	@ 0x48
 800553e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005542:	9316      	str	r3, [sp, #88]	@ 0x58
 8005544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005546:	9805      	ldr	r0, [sp, #20]
 8005548:	6859      	ldr	r1, [r3, #4]
 800554a:	f7ff f813 	bl	8004574 <_Balloc>
 800554e:	4681      	mov	r9, r0
 8005550:	2800      	cmp	r0, #0
 8005552:	f43f aef4 	beq.w	800533e <_strtod_l+0x436>
 8005556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005558:	300c      	adds	r0, #12
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	f103 010c 	add.w	r1, r3, #12
 8005560:	3202      	adds	r2, #2
 8005562:	0092      	lsls	r2, r2, #2
 8005564:	f000 fd66 	bl	8006034 <memcpy>
 8005568:	ab1c      	add	r3, sp, #112	@ 0x70
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	4652      	mov	r2, sl
 8005572:	465b      	mov	r3, fp
 8005574:	9805      	ldr	r0, [sp, #20]
 8005576:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800557a:	f7ff fbd5 	bl	8004d28 <__d2b>
 800557e:	901a      	str	r0, [sp, #104]	@ 0x68
 8005580:	2800      	cmp	r0, #0
 8005582:	f43f aedc 	beq.w	800533e <_strtod_l+0x436>
 8005586:	2101      	movs	r1, #1
 8005588:	9805      	ldr	r0, [sp, #20]
 800558a:	f7ff f931 	bl	80047f0 <__i2b>
 800558e:	4680      	mov	r8, r0
 8005590:	b948      	cbnz	r0, 80055a6 <_strtod_l+0x69e>
 8005592:	f04f 0800 	mov.w	r8, #0
 8005596:	e6d2      	b.n	800533e <_strtod_l+0x436>
 8005598:	f04f 32ff 	mov.w	r2, #4294967295
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	ea03 0a0a 	and.w	sl, r3, sl
 80055a4:	e7ae      	b.n	8005504 <_strtod_l+0x5fc>
 80055a6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80055a8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80055aa:	2d00      	cmp	r5, #0
 80055ac:	bfab      	itete	ge
 80055ae:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80055b0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80055b2:	18ef      	addge	r7, r5, r3
 80055b4:	1b5e      	sublt	r6, r3, r5
 80055b6:	9b08      	ldr	r3, [sp, #32]
 80055b8:	bfa8      	it	ge
 80055ba:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80055bc:	eba5 0503 	sub.w	r5, r5, r3
 80055c0:	4415      	add	r5, r2
 80055c2:	4b67      	ldr	r3, [pc, #412]	@ (8005760 <_strtod_l+0x858>)
 80055c4:	f105 35ff 	add.w	r5, r5, #4294967295
 80055c8:	bfb8      	it	lt
 80055ca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80055cc:	429d      	cmp	r5, r3
 80055ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80055d2:	da50      	bge.n	8005676 <_strtod_l+0x76e>
 80055d4:	1b5b      	subs	r3, r3, r5
 80055d6:	2b1f      	cmp	r3, #31
 80055d8:	f04f 0101 	mov.w	r1, #1
 80055dc:	eba2 0203 	sub.w	r2, r2, r3
 80055e0:	dc3d      	bgt.n	800565e <_strtod_l+0x756>
 80055e2:	fa01 f303 	lsl.w	r3, r1, r3
 80055e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80055e8:	2300      	movs	r3, #0
 80055ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80055ec:	18bd      	adds	r5, r7, r2
 80055ee:	9b08      	ldr	r3, [sp, #32]
 80055f0:	42af      	cmp	r7, r5
 80055f2:	4416      	add	r6, r2
 80055f4:	441e      	add	r6, r3
 80055f6:	463b      	mov	r3, r7
 80055f8:	bfa8      	it	ge
 80055fa:	462b      	movge	r3, r5
 80055fc:	42b3      	cmp	r3, r6
 80055fe:	bfa8      	it	ge
 8005600:	4633      	movge	r3, r6
 8005602:	2b00      	cmp	r3, #0
 8005604:	bfc2      	ittt	gt
 8005606:	1aed      	subgt	r5, r5, r3
 8005608:	1af6      	subgt	r6, r6, r3
 800560a:	1aff      	subgt	r7, r7, r3
 800560c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800560e:	2b00      	cmp	r3, #0
 8005610:	dd16      	ble.n	8005640 <_strtod_l+0x738>
 8005612:	4641      	mov	r1, r8
 8005614:	461a      	mov	r2, r3
 8005616:	9805      	ldr	r0, [sp, #20]
 8005618:	f7ff f9a8 	bl	800496c <__pow5mult>
 800561c:	4680      	mov	r8, r0
 800561e:	2800      	cmp	r0, #0
 8005620:	d0b7      	beq.n	8005592 <_strtod_l+0x68a>
 8005622:	4601      	mov	r1, r0
 8005624:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005626:	9805      	ldr	r0, [sp, #20]
 8005628:	f7ff f8f8 	bl	800481c <__multiply>
 800562c:	900e      	str	r0, [sp, #56]	@ 0x38
 800562e:	2800      	cmp	r0, #0
 8005630:	f43f ae85 	beq.w	800533e <_strtod_l+0x436>
 8005634:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005636:	9805      	ldr	r0, [sp, #20]
 8005638:	f7fe ffdc 	bl	80045f4 <_Bfree>
 800563c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800563e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005640:	2d00      	cmp	r5, #0
 8005642:	dc1d      	bgt.n	8005680 <_strtod_l+0x778>
 8005644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005646:	2b00      	cmp	r3, #0
 8005648:	dd23      	ble.n	8005692 <_strtod_l+0x78a>
 800564a:	4649      	mov	r1, r9
 800564c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800564e:	9805      	ldr	r0, [sp, #20]
 8005650:	f7ff f98c 	bl	800496c <__pow5mult>
 8005654:	4681      	mov	r9, r0
 8005656:	b9e0      	cbnz	r0, 8005692 <_strtod_l+0x78a>
 8005658:	f04f 0900 	mov.w	r9, #0
 800565c:	e66f      	b.n	800533e <_strtod_l+0x436>
 800565e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005662:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005666:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800566a:	35e2      	adds	r5, #226	@ 0xe2
 800566c:	fa01 f305 	lsl.w	r3, r1, r5
 8005670:	9310      	str	r3, [sp, #64]	@ 0x40
 8005672:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005674:	e7ba      	b.n	80055ec <_strtod_l+0x6e4>
 8005676:	2300      	movs	r3, #0
 8005678:	9310      	str	r3, [sp, #64]	@ 0x40
 800567a:	2301      	movs	r3, #1
 800567c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800567e:	e7b5      	b.n	80055ec <_strtod_l+0x6e4>
 8005680:	462a      	mov	r2, r5
 8005682:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005684:	9805      	ldr	r0, [sp, #20]
 8005686:	f7ff f9cb 	bl	8004a20 <__lshift>
 800568a:	901a      	str	r0, [sp, #104]	@ 0x68
 800568c:	2800      	cmp	r0, #0
 800568e:	d1d9      	bne.n	8005644 <_strtod_l+0x73c>
 8005690:	e655      	b.n	800533e <_strtod_l+0x436>
 8005692:	2e00      	cmp	r6, #0
 8005694:	dd07      	ble.n	80056a6 <_strtod_l+0x79e>
 8005696:	4649      	mov	r1, r9
 8005698:	4632      	mov	r2, r6
 800569a:	9805      	ldr	r0, [sp, #20]
 800569c:	f7ff f9c0 	bl	8004a20 <__lshift>
 80056a0:	4681      	mov	r9, r0
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d0d8      	beq.n	8005658 <_strtod_l+0x750>
 80056a6:	2f00      	cmp	r7, #0
 80056a8:	dd08      	ble.n	80056bc <_strtod_l+0x7b4>
 80056aa:	4641      	mov	r1, r8
 80056ac:	463a      	mov	r2, r7
 80056ae:	9805      	ldr	r0, [sp, #20]
 80056b0:	f7ff f9b6 	bl	8004a20 <__lshift>
 80056b4:	4680      	mov	r8, r0
 80056b6:	2800      	cmp	r0, #0
 80056b8:	f43f ae41 	beq.w	800533e <_strtod_l+0x436>
 80056bc:	464a      	mov	r2, r9
 80056be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80056c0:	9805      	ldr	r0, [sp, #20]
 80056c2:	f7ff fa35 	bl	8004b30 <__mdiff>
 80056c6:	4604      	mov	r4, r0
 80056c8:	2800      	cmp	r0, #0
 80056ca:	f43f ae38 	beq.w	800533e <_strtod_l+0x436>
 80056ce:	68c3      	ldr	r3, [r0, #12]
 80056d0:	4641      	mov	r1, r8
 80056d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80056d4:	2300      	movs	r3, #0
 80056d6:	60c3      	str	r3, [r0, #12]
 80056d8:	f7ff fa0e 	bl	8004af8 <__mcmp>
 80056dc:	2800      	cmp	r0, #0
 80056de:	da45      	bge.n	800576c <_strtod_l+0x864>
 80056e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056e2:	ea53 030a 	orrs.w	r3, r3, sl
 80056e6:	d16b      	bne.n	80057c0 <_strtod_l+0x8b8>
 80056e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d167      	bne.n	80057c0 <_strtod_l+0x8b8>
 80056f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80056f4:	0d1b      	lsrs	r3, r3, #20
 80056f6:	051b      	lsls	r3, r3, #20
 80056f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80056fc:	d960      	bls.n	80057c0 <_strtod_l+0x8b8>
 80056fe:	6963      	ldr	r3, [r4, #20]
 8005700:	b913      	cbnz	r3, 8005708 <_strtod_l+0x800>
 8005702:	6923      	ldr	r3, [r4, #16]
 8005704:	2b01      	cmp	r3, #1
 8005706:	dd5b      	ble.n	80057c0 <_strtod_l+0x8b8>
 8005708:	4621      	mov	r1, r4
 800570a:	2201      	movs	r2, #1
 800570c:	9805      	ldr	r0, [sp, #20]
 800570e:	f7ff f987 	bl	8004a20 <__lshift>
 8005712:	4641      	mov	r1, r8
 8005714:	4604      	mov	r4, r0
 8005716:	f7ff f9ef 	bl	8004af8 <__mcmp>
 800571a:	2800      	cmp	r0, #0
 800571c:	dd50      	ble.n	80057c0 <_strtod_l+0x8b8>
 800571e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005722:	9a08      	ldr	r2, [sp, #32]
 8005724:	0d1b      	lsrs	r3, r3, #20
 8005726:	051b      	lsls	r3, r3, #20
 8005728:	2a00      	cmp	r2, #0
 800572a:	d06a      	beq.n	8005802 <_strtod_l+0x8fa>
 800572c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005730:	d867      	bhi.n	8005802 <_strtod_l+0x8fa>
 8005732:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005736:	f67f ae98 	bls.w	800546a <_strtod_l+0x562>
 800573a:	4650      	mov	r0, sl
 800573c:	4659      	mov	r1, fp
 800573e:	4b09      	ldr	r3, [pc, #36]	@ (8005764 <_strtod_l+0x85c>)
 8005740:	2200      	movs	r2, #0
 8005742:	f7fa fec9 	bl	80004d8 <__aeabi_dmul>
 8005746:	4b08      	ldr	r3, [pc, #32]	@ (8005768 <_strtod_l+0x860>)
 8005748:	4682      	mov	sl, r0
 800574a:	400b      	ands	r3, r1
 800574c:	468b      	mov	fp, r1
 800574e:	2b00      	cmp	r3, #0
 8005750:	f47f ae00 	bne.w	8005354 <_strtod_l+0x44c>
 8005754:	2322      	movs	r3, #34	@ 0x22
 8005756:	9a05      	ldr	r2, [sp, #20]
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	e5fb      	b.n	8005354 <_strtod_l+0x44c>
 800575c:	08006fd0 	.word	0x08006fd0
 8005760:	fffffc02 	.word	0xfffffc02
 8005764:	39500000 	.word	0x39500000
 8005768:	7ff00000 	.word	0x7ff00000
 800576c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005770:	d165      	bne.n	800583e <_strtod_l+0x936>
 8005772:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005774:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005778:	b35a      	cbz	r2, 80057d2 <_strtod_l+0x8ca>
 800577a:	4a99      	ldr	r2, [pc, #612]	@ (80059e0 <_strtod_l+0xad8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d12b      	bne.n	80057d8 <_strtod_l+0x8d0>
 8005780:	9b08      	ldr	r3, [sp, #32]
 8005782:	4651      	mov	r1, sl
 8005784:	b303      	cbz	r3, 80057c8 <_strtod_l+0x8c0>
 8005786:	465a      	mov	r2, fp
 8005788:	4b96      	ldr	r3, [pc, #600]	@ (80059e4 <_strtod_l+0xadc>)
 800578a:	4013      	ands	r3, r2
 800578c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005790:	f04f 32ff 	mov.w	r2, #4294967295
 8005794:	d81b      	bhi.n	80057ce <_strtod_l+0x8c6>
 8005796:	0d1b      	lsrs	r3, r3, #20
 8005798:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	4299      	cmp	r1, r3
 80057a2:	d119      	bne.n	80057d8 <_strtod_l+0x8d0>
 80057a4:	4b90      	ldr	r3, [pc, #576]	@ (80059e8 <_strtod_l+0xae0>)
 80057a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d102      	bne.n	80057b2 <_strtod_l+0x8aa>
 80057ac:	3101      	adds	r1, #1
 80057ae:	f43f adc6 	beq.w	800533e <_strtod_l+0x436>
 80057b2:	f04f 0a00 	mov.w	sl, #0
 80057b6:	4b8b      	ldr	r3, [pc, #556]	@ (80059e4 <_strtod_l+0xadc>)
 80057b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057ba:	401a      	ands	r2, r3
 80057bc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80057c0:	9b08      	ldr	r3, [sp, #32]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1b9      	bne.n	800573a <_strtod_l+0x832>
 80057c6:	e5c5      	b.n	8005354 <_strtod_l+0x44c>
 80057c8:	f04f 33ff 	mov.w	r3, #4294967295
 80057cc:	e7e8      	b.n	80057a0 <_strtod_l+0x898>
 80057ce:	4613      	mov	r3, r2
 80057d0:	e7e6      	b.n	80057a0 <_strtod_l+0x898>
 80057d2:	ea53 030a 	orrs.w	r3, r3, sl
 80057d6:	d0a2      	beq.n	800571e <_strtod_l+0x816>
 80057d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80057da:	b1db      	cbz	r3, 8005814 <_strtod_l+0x90c>
 80057dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057de:	4213      	tst	r3, r2
 80057e0:	d0ee      	beq.n	80057c0 <_strtod_l+0x8b8>
 80057e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057e4:	4650      	mov	r0, sl
 80057e6:	4659      	mov	r1, fp
 80057e8:	9a08      	ldr	r2, [sp, #32]
 80057ea:	b1bb      	cbz	r3, 800581c <_strtod_l+0x914>
 80057ec:	f7ff fb68 	bl	8004ec0 <sulp>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057f8:	f7fa fcb8 	bl	800016c <__adddf3>
 80057fc:	4682      	mov	sl, r0
 80057fe:	468b      	mov	fp, r1
 8005800:	e7de      	b.n	80057c0 <_strtod_l+0x8b8>
 8005802:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005806:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800580a:	f04f 3aff 	mov.w	sl, #4294967295
 800580e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005812:	e7d5      	b.n	80057c0 <_strtod_l+0x8b8>
 8005814:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005816:	ea13 0f0a 	tst.w	r3, sl
 800581a:	e7e1      	b.n	80057e0 <_strtod_l+0x8d8>
 800581c:	f7ff fb50 	bl	8004ec0 <sulp>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005828:	f7fa fc9e 	bl	8000168 <__aeabi_dsub>
 800582c:	2200      	movs	r2, #0
 800582e:	2300      	movs	r3, #0
 8005830:	4682      	mov	sl, r0
 8005832:	468b      	mov	fp, r1
 8005834:	f7fb f8b8 	bl	80009a8 <__aeabi_dcmpeq>
 8005838:	2800      	cmp	r0, #0
 800583a:	d0c1      	beq.n	80057c0 <_strtod_l+0x8b8>
 800583c:	e615      	b.n	800546a <_strtod_l+0x562>
 800583e:	4641      	mov	r1, r8
 8005840:	4620      	mov	r0, r4
 8005842:	f7ff fac9 	bl	8004dd8 <__ratio>
 8005846:	2200      	movs	r2, #0
 8005848:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800584c:	4606      	mov	r6, r0
 800584e:	460f      	mov	r7, r1
 8005850:	f7fb f8be 	bl	80009d0 <__aeabi_dcmple>
 8005854:	2800      	cmp	r0, #0
 8005856:	d06d      	beq.n	8005934 <_strtod_l+0xa2c>
 8005858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d178      	bne.n	8005950 <_strtod_l+0xa48>
 800585e:	f1ba 0f00 	cmp.w	sl, #0
 8005862:	d156      	bne.n	8005912 <_strtod_l+0xa0a>
 8005864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800586a:	2b00      	cmp	r3, #0
 800586c:	d158      	bne.n	8005920 <_strtod_l+0xa18>
 800586e:	2200      	movs	r2, #0
 8005870:	4630      	mov	r0, r6
 8005872:	4639      	mov	r1, r7
 8005874:	4b5d      	ldr	r3, [pc, #372]	@ (80059ec <_strtod_l+0xae4>)
 8005876:	f7fb f8a1 	bl	80009bc <__aeabi_dcmplt>
 800587a:	2800      	cmp	r0, #0
 800587c:	d157      	bne.n	800592e <_strtod_l+0xa26>
 800587e:	4630      	mov	r0, r6
 8005880:	4639      	mov	r1, r7
 8005882:	2200      	movs	r2, #0
 8005884:	4b5a      	ldr	r3, [pc, #360]	@ (80059f0 <_strtod_l+0xae8>)
 8005886:	f7fa fe27 	bl	80004d8 <__aeabi_dmul>
 800588a:	4606      	mov	r6, r0
 800588c:	460f      	mov	r7, r1
 800588e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005892:	9606      	str	r6, [sp, #24]
 8005894:	9307      	str	r3, [sp, #28]
 8005896:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800589a:	4d52      	ldr	r5, [pc, #328]	@ (80059e4 <_strtod_l+0xadc>)
 800589c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80058a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058a2:	401d      	ands	r5, r3
 80058a4:	4b53      	ldr	r3, [pc, #332]	@ (80059f4 <_strtod_l+0xaec>)
 80058a6:	429d      	cmp	r5, r3
 80058a8:	f040 80aa 	bne.w	8005a00 <_strtod_l+0xaf8>
 80058ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058ae:	4650      	mov	r0, sl
 80058b0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80058b4:	4659      	mov	r1, fp
 80058b6:	f7ff f9cf 	bl	8004c58 <__ulp>
 80058ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058be:	f7fa fe0b 	bl	80004d8 <__aeabi_dmul>
 80058c2:	4652      	mov	r2, sl
 80058c4:	465b      	mov	r3, fp
 80058c6:	f7fa fc51 	bl	800016c <__adddf3>
 80058ca:	460b      	mov	r3, r1
 80058cc:	4945      	ldr	r1, [pc, #276]	@ (80059e4 <_strtod_l+0xadc>)
 80058ce:	4a4a      	ldr	r2, [pc, #296]	@ (80059f8 <_strtod_l+0xaf0>)
 80058d0:	4019      	ands	r1, r3
 80058d2:	4291      	cmp	r1, r2
 80058d4:	4682      	mov	sl, r0
 80058d6:	d942      	bls.n	800595e <_strtod_l+0xa56>
 80058d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80058da:	4b43      	ldr	r3, [pc, #268]	@ (80059e8 <_strtod_l+0xae0>)
 80058dc:	429a      	cmp	r2, r3
 80058de:	d103      	bne.n	80058e8 <_strtod_l+0x9e0>
 80058e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058e2:	3301      	adds	r3, #1
 80058e4:	f43f ad2b 	beq.w	800533e <_strtod_l+0x436>
 80058e8:	f04f 3aff 	mov.w	sl, #4294967295
 80058ec:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80059e8 <_strtod_l+0xae0>
 80058f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80058f2:	9805      	ldr	r0, [sp, #20]
 80058f4:	f7fe fe7e 	bl	80045f4 <_Bfree>
 80058f8:	4649      	mov	r1, r9
 80058fa:	9805      	ldr	r0, [sp, #20]
 80058fc:	f7fe fe7a 	bl	80045f4 <_Bfree>
 8005900:	4641      	mov	r1, r8
 8005902:	9805      	ldr	r0, [sp, #20]
 8005904:	f7fe fe76 	bl	80045f4 <_Bfree>
 8005908:	4621      	mov	r1, r4
 800590a:	9805      	ldr	r0, [sp, #20]
 800590c:	f7fe fe72 	bl	80045f4 <_Bfree>
 8005910:	e618      	b.n	8005544 <_strtod_l+0x63c>
 8005912:	f1ba 0f01 	cmp.w	sl, #1
 8005916:	d103      	bne.n	8005920 <_strtod_l+0xa18>
 8005918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800591a:	2b00      	cmp	r3, #0
 800591c:	f43f ada5 	beq.w	800546a <_strtod_l+0x562>
 8005920:	2200      	movs	r2, #0
 8005922:	4b36      	ldr	r3, [pc, #216]	@ (80059fc <_strtod_l+0xaf4>)
 8005924:	2600      	movs	r6, #0
 8005926:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800592a:	4f30      	ldr	r7, [pc, #192]	@ (80059ec <_strtod_l+0xae4>)
 800592c:	e7b3      	b.n	8005896 <_strtod_l+0x98e>
 800592e:	2600      	movs	r6, #0
 8005930:	4f2f      	ldr	r7, [pc, #188]	@ (80059f0 <_strtod_l+0xae8>)
 8005932:	e7ac      	b.n	800588e <_strtod_l+0x986>
 8005934:	4630      	mov	r0, r6
 8005936:	4639      	mov	r1, r7
 8005938:	4b2d      	ldr	r3, [pc, #180]	@ (80059f0 <_strtod_l+0xae8>)
 800593a:	2200      	movs	r2, #0
 800593c:	f7fa fdcc 	bl	80004d8 <__aeabi_dmul>
 8005940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005942:	4606      	mov	r6, r0
 8005944:	460f      	mov	r7, r1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0a1      	beq.n	800588e <_strtod_l+0x986>
 800594a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800594e:	e7a2      	b.n	8005896 <_strtod_l+0x98e>
 8005950:	2200      	movs	r2, #0
 8005952:	4b26      	ldr	r3, [pc, #152]	@ (80059ec <_strtod_l+0xae4>)
 8005954:	4616      	mov	r6, r2
 8005956:	461f      	mov	r7, r3
 8005958:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800595c:	e79b      	b.n	8005896 <_strtod_l+0x98e>
 800595e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005962:	9b08      	ldr	r3, [sp, #32]
 8005964:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1c1      	bne.n	80058f0 <_strtod_l+0x9e8>
 800596c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005970:	0d1b      	lsrs	r3, r3, #20
 8005972:	051b      	lsls	r3, r3, #20
 8005974:	429d      	cmp	r5, r3
 8005976:	d1bb      	bne.n	80058f0 <_strtod_l+0x9e8>
 8005978:	4630      	mov	r0, r6
 800597a:	4639      	mov	r1, r7
 800597c:	f7fb f8f4 	bl	8000b68 <__aeabi_d2lz>
 8005980:	f7fa fd7c 	bl	800047c <__aeabi_l2d>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4630      	mov	r0, r6
 800598a:	4639      	mov	r1, r7
 800598c:	f7fa fbec 	bl	8000168 <__aeabi_dsub>
 8005990:	460b      	mov	r3, r1
 8005992:	4602      	mov	r2, r0
 8005994:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005998:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800599c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800599e:	ea46 060a 	orr.w	r6, r6, sl
 80059a2:	431e      	orrs	r6, r3
 80059a4:	d069      	beq.n	8005a7a <_strtod_l+0xb72>
 80059a6:	a30a      	add	r3, pc, #40	@ (adr r3, 80059d0 <_strtod_l+0xac8>)
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	f7fb f806 	bl	80009bc <__aeabi_dcmplt>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	f47f accf 	bne.w	8005354 <_strtod_l+0x44c>
 80059b6:	a308      	add	r3, pc, #32	@ (adr r3, 80059d8 <_strtod_l+0xad0>)
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059c0:	f7fb f81a 	bl	80009f8 <__aeabi_dcmpgt>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d093      	beq.n	80058f0 <_strtod_l+0x9e8>
 80059c8:	e4c4      	b.n	8005354 <_strtod_l+0x44c>
 80059ca:	bf00      	nop
 80059cc:	f3af 8000 	nop.w
 80059d0:	94a03595 	.word	0x94a03595
 80059d4:	3fdfffff 	.word	0x3fdfffff
 80059d8:	35afe535 	.word	0x35afe535
 80059dc:	3fe00000 	.word	0x3fe00000
 80059e0:	000fffff 	.word	0x000fffff
 80059e4:	7ff00000 	.word	0x7ff00000
 80059e8:	7fefffff 	.word	0x7fefffff
 80059ec:	3ff00000 	.word	0x3ff00000
 80059f0:	3fe00000 	.word	0x3fe00000
 80059f4:	7fe00000 	.word	0x7fe00000
 80059f8:	7c9fffff 	.word	0x7c9fffff
 80059fc:	bff00000 	.word	0xbff00000
 8005a00:	9b08      	ldr	r3, [sp, #32]
 8005a02:	b323      	cbz	r3, 8005a4e <_strtod_l+0xb46>
 8005a04:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005a08:	d821      	bhi.n	8005a4e <_strtod_l+0xb46>
 8005a0a:	a327      	add	r3, pc, #156	@ (adr r3, 8005aa8 <_strtod_l+0xba0>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	4630      	mov	r0, r6
 8005a12:	4639      	mov	r1, r7
 8005a14:	f7fa ffdc 	bl	80009d0 <__aeabi_dcmple>
 8005a18:	b1a0      	cbz	r0, 8005a44 <_strtod_l+0xb3c>
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f7fb f833 	bl	8000a88 <__aeabi_d2uiz>
 8005a22:	2801      	cmp	r0, #1
 8005a24:	bf38      	it	cc
 8005a26:	2001      	movcc	r0, #1
 8005a28:	f7fa fcdc 	bl	80003e4 <__aeabi_ui2d>
 8005a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a2e:	4606      	mov	r6, r0
 8005a30:	460f      	mov	r7, r1
 8005a32:	b9fb      	cbnz	r3, 8005a74 <_strtod_l+0xb6c>
 8005a34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005a38:	9014      	str	r0, [sp, #80]	@ 0x50
 8005a3a:	9315      	str	r3, [sp, #84]	@ 0x54
 8005a3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005a40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005a44:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005a46:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005a4a:	1b5b      	subs	r3, r3, r5
 8005a4c:	9311      	str	r3, [sp, #68]	@ 0x44
 8005a4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a52:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005a56:	f7ff f8ff 	bl	8004c58 <__ulp>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4650      	mov	r0, sl
 8005a60:	4659      	mov	r1, fp
 8005a62:	f7fa fd39 	bl	80004d8 <__aeabi_dmul>
 8005a66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005a6a:	f7fa fb7f 	bl	800016c <__adddf3>
 8005a6e:	4682      	mov	sl, r0
 8005a70:	468b      	mov	fp, r1
 8005a72:	e776      	b.n	8005962 <_strtod_l+0xa5a>
 8005a74:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005a78:	e7e0      	b.n	8005a3c <_strtod_l+0xb34>
 8005a7a:	a30d      	add	r3, pc, #52	@ (adr r3, 8005ab0 <_strtod_l+0xba8>)
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	f7fa ff9c 	bl	80009bc <__aeabi_dcmplt>
 8005a84:	e79e      	b.n	80059c4 <_strtod_l+0xabc>
 8005a86:	2300      	movs	r3, #0
 8005a88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a8c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	f7ff ba77 	b.w	8004f82 <_strtod_l+0x7a>
 8005a94:	2a65      	cmp	r2, #101	@ 0x65
 8005a96:	f43f ab6e 	beq.w	8005176 <_strtod_l+0x26e>
 8005a9a:	2a45      	cmp	r2, #69	@ 0x45
 8005a9c:	f43f ab6b 	beq.w	8005176 <_strtod_l+0x26e>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f7ff bba6 	b.w	80051f2 <_strtod_l+0x2ea>
 8005aa6:	bf00      	nop
 8005aa8:	ffc00000 	.word	0xffc00000
 8005aac:	41dfffff 	.word	0x41dfffff
 8005ab0:	94a03595 	.word	0x94a03595
 8005ab4:	3fcfffff 	.word	0x3fcfffff

08005ab8 <_strtod_r>:
 8005ab8:	4b01      	ldr	r3, [pc, #4]	@ (8005ac0 <_strtod_r+0x8>)
 8005aba:	f7ff ba25 	b.w	8004f08 <_strtod_l>
 8005abe:	bf00      	nop
 8005ac0:	20000068 	.word	0x20000068

08005ac4 <_strtol_l.constprop.0>:
 8005ac4:	2b24      	cmp	r3, #36	@ 0x24
 8005ac6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aca:	4686      	mov	lr, r0
 8005acc:	4690      	mov	r8, r2
 8005ace:	d801      	bhi.n	8005ad4 <_strtol_l.constprop.0+0x10>
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d106      	bne.n	8005ae2 <_strtol_l.constprop.0+0x1e>
 8005ad4:	f7fd fdbe 	bl	8003654 <__errno>
 8005ad8:	2316      	movs	r3, #22
 8005ada:	6003      	str	r3, [r0, #0]
 8005adc:	2000      	movs	r0, #0
 8005ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae2:	460d      	mov	r5, r1
 8005ae4:	4833      	ldr	r0, [pc, #204]	@ (8005bb4 <_strtol_l.constprop.0+0xf0>)
 8005ae6:	462a      	mov	r2, r5
 8005ae8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005aec:	5d06      	ldrb	r6, [r0, r4]
 8005aee:	f016 0608 	ands.w	r6, r6, #8
 8005af2:	d1f8      	bne.n	8005ae6 <_strtol_l.constprop.0+0x22>
 8005af4:	2c2d      	cmp	r4, #45	@ 0x2d
 8005af6:	d12d      	bne.n	8005b54 <_strtol_l.constprop.0+0x90>
 8005af8:	2601      	movs	r6, #1
 8005afa:	782c      	ldrb	r4, [r5, #0]
 8005afc:	1c95      	adds	r5, r2, #2
 8005afe:	f033 0210 	bics.w	r2, r3, #16
 8005b02:	d109      	bne.n	8005b18 <_strtol_l.constprop.0+0x54>
 8005b04:	2c30      	cmp	r4, #48	@ 0x30
 8005b06:	d12a      	bne.n	8005b5e <_strtol_l.constprop.0+0x9a>
 8005b08:	782a      	ldrb	r2, [r5, #0]
 8005b0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005b0e:	2a58      	cmp	r2, #88	@ 0x58
 8005b10:	d125      	bne.n	8005b5e <_strtol_l.constprop.0+0x9a>
 8005b12:	2310      	movs	r3, #16
 8005b14:	786c      	ldrb	r4, [r5, #1]
 8005b16:	3502      	adds	r5, #2
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005b1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005b22:	fbbc f9f3 	udiv	r9, ip, r3
 8005b26:	4610      	mov	r0, r2
 8005b28:	fb03 ca19 	mls	sl, r3, r9, ip
 8005b2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005b30:	2f09      	cmp	r7, #9
 8005b32:	d81b      	bhi.n	8005b6c <_strtol_l.constprop.0+0xa8>
 8005b34:	463c      	mov	r4, r7
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	dd27      	ble.n	8005b8a <_strtol_l.constprop.0+0xc6>
 8005b3a:	1c57      	adds	r7, r2, #1
 8005b3c:	d007      	beq.n	8005b4e <_strtol_l.constprop.0+0x8a>
 8005b3e:	4581      	cmp	r9, r0
 8005b40:	d320      	bcc.n	8005b84 <_strtol_l.constprop.0+0xc0>
 8005b42:	d101      	bne.n	8005b48 <_strtol_l.constprop.0+0x84>
 8005b44:	45a2      	cmp	sl, r4
 8005b46:	db1d      	blt.n	8005b84 <_strtol_l.constprop.0+0xc0>
 8005b48:	2201      	movs	r2, #1
 8005b4a:	fb00 4003 	mla	r0, r0, r3, r4
 8005b4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b52:	e7eb      	b.n	8005b2c <_strtol_l.constprop.0+0x68>
 8005b54:	2c2b      	cmp	r4, #43	@ 0x2b
 8005b56:	bf04      	itt	eq
 8005b58:	782c      	ldrbeq	r4, [r5, #0]
 8005b5a:	1c95      	addeq	r5, r2, #2
 8005b5c:	e7cf      	b.n	8005afe <_strtol_l.constprop.0+0x3a>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1da      	bne.n	8005b18 <_strtol_l.constprop.0+0x54>
 8005b62:	2c30      	cmp	r4, #48	@ 0x30
 8005b64:	bf0c      	ite	eq
 8005b66:	2308      	moveq	r3, #8
 8005b68:	230a      	movne	r3, #10
 8005b6a:	e7d5      	b.n	8005b18 <_strtol_l.constprop.0+0x54>
 8005b6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005b70:	2f19      	cmp	r7, #25
 8005b72:	d801      	bhi.n	8005b78 <_strtol_l.constprop.0+0xb4>
 8005b74:	3c37      	subs	r4, #55	@ 0x37
 8005b76:	e7de      	b.n	8005b36 <_strtol_l.constprop.0+0x72>
 8005b78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005b7c:	2f19      	cmp	r7, #25
 8005b7e:	d804      	bhi.n	8005b8a <_strtol_l.constprop.0+0xc6>
 8005b80:	3c57      	subs	r4, #87	@ 0x57
 8005b82:	e7d8      	b.n	8005b36 <_strtol_l.constprop.0+0x72>
 8005b84:	f04f 32ff 	mov.w	r2, #4294967295
 8005b88:	e7e1      	b.n	8005b4e <_strtol_l.constprop.0+0x8a>
 8005b8a:	1c53      	adds	r3, r2, #1
 8005b8c:	d108      	bne.n	8005ba0 <_strtol_l.constprop.0+0xdc>
 8005b8e:	2322      	movs	r3, #34	@ 0x22
 8005b90:	4660      	mov	r0, ip
 8005b92:	f8ce 3000 	str.w	r3, [lr]
 8005b96:	f1b8 0f00 	cmp.w	r8, #0
 8005b9a:	d0a0      	beq.n	8005ade <_strtol_l.constprop.0+0x1a>
 8005b9c:	1e69      	subs	r1, r5, #1
 8005b9e:	e006      	b.n	8005bae <_strtol_l.constprop.0+0xea>
 8005ba0:	b106      	cbz	r6, 8005ba4 <_strtol_l.constprop.0+0xe0>
 8005ba2:	4240      	negs	r0, r0
 8005ba4:	f1b8 0f00 	cmp.w	r8, #0
 8005ba8:	d099      	beq.n	8005ade <_strtol_l.constprop.0+0x1a>
 8005baa:	2a00      	cmp	r2, #0
 8005bac:	d1f6      	bne.n	8005b9c <_strtol_l.constprop.0+0xd8>
 8005bae:	f8c8 1000 	str.w	r1, [r8]
 8005bb2:	e794      	b.n	8005ade <_strtol_l.constprop.0+0x1a>
 8005bb4:	08006ff9 	.word	0x08006ff9

08005bb8 <_strtol_r>:
 8005bb8:	f7ff bf84 	b.w	8005ac4 <_strtol_l.constprop.0>

08005bbc <__ssputs_r>:
 8005bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc0:	461f      	mov	r7, r3
 8005bc2:	688e      	ldr	r6, [r1, #8]
 8005bc4:	4682      	mov	sl, r0
 8005bc6:	42be      	cmp	r6, r7
 8005bc8:	460c      	mov	r4, r1
 8005bca:	4690      	mov	r8, r2
 8005bcc:	680b      	ldr	r3, [r1, #0]
 8005bce:	d82d      	bhi.n	8005c2c <__ssputs_r+0x70>
 8005bd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005bd8:	d026      	beq.n	8005c28 <__ssputs_r+0x6c>
 8005bda:	6965      	ldr	r5, [r4, #20]
 8005bdc:	6909      	ldr	r1, [r1, #16]
 8005bde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005be2:	eba3 0901 	sub.w	r9, r3, r1
 8005be6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bea:	1c7b      	adds	r3, r7, #1
 8005bec:	444b      	add	r3, r9
 8005bee:	106d      	asrs	r5, r5, #1
 8005bf0:	429d      	cmp	r5, r3
 8005bf2:	bf38      	it	cc
 8005bf4:	461d      	movcc	r5, r3
 8005bf6:	0553      	lsls	r3, r2, #21
 8005bf8:	d527      	bpl.n	8005c4a <__ssputs_r+0x8e>
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	f7fe fc2e 	bl	800445c <_malloc_r>
 8005c00:	4606      	mov	r6, r0
 8005c02:	b360      	cbz	r0, 8005c5e <__ssputs_r+0xa2>
 8005c04:	464a      	mov	r2, r9
 8005c06:	6921      	ldr	r1, [r4, #16]
 8005c08:	f000 fa14 	bl	8006034 <memcpy>
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c16:	81a3      	strh	r3, [r4, #12]
 8005c18:	6126      	str	r6, [r4, #16]
 8005c1a:	444e      	add	r6, r9
 8005c1c:	6026      	str	r6, [r4, #0]
 8005c1e:	463e      	mov	r6, r7
 8005c20:	6165      	str	r5, [r4, #20]
 8005c22:	eba5 0509 	sub.w	r5, r5, r9
 8005c26:	60a5      	str	r5, [r4, #8]
 8005c28:	42be      	cmp	r6, r7
 8005c2a:	d900      	bls.n	8005c2e <__ssputs_r+0x72>
 8005c2c:	463e      	mov	r6, r7
 8005c2e:	4632      	mov	r2, r6
 8005c30:	4641      	mov	r1, r8
 8005c32:	6820      	ldr	r0, [r4, #0]
 8005c34:	f000 f9c2 	bl	8005fbc <memmove>
 8005c38:	2000      	movs	r0, #0
 8005c3a:	68a3      	ldr	r3, [r4, #8]
 8005c3c:	1b9b      	subs	r3, r3, r6
 8005c3e:	60a3      	str	r3, [r4, #8]
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	4433      	add	r3, r6
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4a:	462a      	mov	r2, r5
 8005c4c:	f000 fd83 	bl	8006756 <_realloc_r>
 8005c50:	4606      	mov	r6, r0
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d1e0      	bne.n	8005c18 <__ssputs_r+0x5c>
 8005c56:	4650      	mov	r0, sl
 8005c58:	6921      	ldr	r1, [r4, #16]
 8005c5a:	f7fe fb8d 	bl	8004378 <_free_r>
 8005c5e:	230c      	movs	r3, #12
 8005c60:	f8ca 3000 	str.w	r3, [sl]
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	e7e9      	b.n	8005c46 <__ssputs_r+0x8a>
	...

08005c74 <_svfiprintf_r>:
 8005c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c78:	4698      	mov	r8, r3
 8005c7a:	898b      	ldrh	r3, [r1, #12]
 8005c7c:	4607      	mov	r7, r0
 8005c7e:	061b      	lsls	r3, r3, #24
 8005c80:	460d      	mov	r5, r1
 8005c82:	4614      	mov	r4, r2
 8005c84:	b09d      	sub	sp, #116	@ 0x74
 8005c86:	d510      	bpl.n	8005caa <_svfiprintf_r+0x36>
 8005c88:	690b      	ldr	r3, [r1, #16]
 8005c8a:	b973      	cbnz	r3, 8005caa <_svfiprintf_r+0x36>
 8005c8c:	2140      	movs	r1, #64	@ 0x40
 8005c8e:	f7fe fbe5 	bl	800445c <_malloc_r>
 8005c92:	6028      	str	r0, [r5, #0]
 8005c94:	6128      	str	r0, [r5, #16]
 8005c96:	b930      	cbnz	r0, 8005ca6 <_svfiprintf_r+0x32>
 8005c98:	230c      	movs	r3, #12
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca0:	b01d      	add	sp, #116	@ 0x74
 8005ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca6:	2340      	movs	r3, #64	@ 0x40
 8005ca8:	616b      	str	r3, [r5, #20]
 8005caa:	2300      	movs	r3, #0
 8005cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cae:	2320      	movs	r3, #32
 8005cb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cb4:	2330      	movs	r3, #48	@ 0x30
 8005cb6:	f04f 0901 	mov.w	r9, #1
 8005cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cbe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005e58 <_svfiprintf_r+0x1e4>
 8005cc2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cc6:	4623      	mov	r3, r4
 8005cc8:	469a      	mov	sl, r3
 8005cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cce:	b10a      	cbz	r2, 8005cd4 <_svfiprintf_r+0x60>
 8005cd0:	2a25      	cmp	r2, #37	@ 0x25
 8005cd2:	d1f9      	bne.n	8005cc8 <_svfiprintf_r+0x54>
 8005cd4:	ebba 0b04 	subs.w	fp, sl, r4
 8005cd8:	d00b      	beq.n	8005cf2 <_svfiprintf_r+0x7e>
 8005cda:	465b      	mov	r3, fp
 8005cdc:	4622      	mov	r2, r4
 8005cde:	4629      	mov	r1, r5
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f7ff ff6b 	bl	8005bbc <__ssputs_r>
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	f000 80a7 	beq.w	8005e3a <_svfiprintf_r+0x1c6>
 8005cec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cee:	445a      	add	r2, fp
 8005cf0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 809f 	beq.w	8005e3a <_svfiprintf_r+0x1c6>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005d02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d06:	f10a 0a01 	add.w	sl, sl, #1
 8005d0a:	9304      	str	r3, [sp, #16]
 8005d0c:	9307      	str	r3, [sp, #28]
 8005d0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d12:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d14:	4654      	mov	r4, sl
 8005d16:	2205      	movs	r2, #5
 8005d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d1c:	484e      	ldr	r0, [pc, #312]	@ (8005e58 <_svfiprintf_r+0x1e4>)
 8005d1e:	f7fd fcc6 	bl	80036ae <memchr>
 8005d22:	9a04      	ldr	r2, [sp, #16]
 8005d24:	b9d8      	cbnz	r0, 8005d5e <_svfiprintf_r+0xea>
 8005d26:	06d0      	lsls	r0, r2, #27
 8005d28:	bf44      	itt	mi
 8005d2a:	2320      	movmi	r3, #32
 8005d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d30:	0711      	lsls	r1, r2, #28
 8005d32:	bf44      	itt	mi
 8005d34:	232b      	movmi	r3, #43	@ 0x2b
 8005d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d40:	d015      	beq.n	8005d6e <_svfiprintf_r+0xfa>
 8005d42:	4654      	mov	r4, sl
 8005d44:	2000      	movs	r0, #0
 8005d46:	f04f 0c0a 	mov.w	ip, #10
 8005d4a:	9a07      	ldr	r2, [sp, #28]
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d52:	3b30      	subs	r3, #48	@ 0x30
 8005d54:	2b09      	cmp	r3, #9
 8005d56:	d94b      	bls.n	8005df0 <_svfiprintf_r+0x17c>
 8005d58:	b1b0      	cbz	r0, 8005d88 <_svfiprintf_r+0x114>
 8005d5a:	9207      	str	r2, [sp, #28]
 8005d5c:	e014      	b.n	8005d88 <_svfiprintf_r+0x114>
 8005d5e:	eba0 0308 	sub.w	r3, r0, r8
 8005d62:	fa09 f303 	lsl.w	r3, r9, r3
 8005d66:	4313      	orrs	r3, r2
 8005d68:	46a2      	mov	sl, r4
 8005d6a:	9304      	str	r3, [sp, #16]
 8005d6c:	e7d2      	b.n	8005d14 <_svfiprintf_r+0xa0>
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	1d19      	adds	r1, r3, #4
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	9103      	str	r1, [sp, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bfbb      	ittet	lt
 8005d7a:	425b      	neglt	r3, r3
 8005d7c:	f042 0202 	orrlt.w	r2, r2, #2
 8005d80:	9307      	strge	r3, [sp, #28]
 8005d82:	9307      	strlt	r3, [sp, #28]
 8005d84:	bfb8      	it	lt
 8005d86:	9204      	strlt	r2, [sp, #16]
 8005d88:	7823      	ldrb	r3, [r4, #0]
 8005d8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d8c:	d10a      	bne.n	8005da4 <_svfiprintf_r+0x130>
 8005d8e:	7863      	ldrb	r3, [r4, #1]
 8005d90:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d92:	d132      	bne.n	8005dfa <_svfiprintf_r+0x186>
 8005d94:	9b03      	ldr	r3, [sp, #12]
 8005d96:	3402      	adds	r4, #2
 8005d98:	1d1a      	adds	r2, r3, #4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	9203      	str	r2, [sp, #12]
 8005d9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005da2:	9305      	str	r3, [sp, #20]
 8005da4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005e5c <_svfiprintf_r+0x1e8>
 8005da8:	2203      	movs	r2, #3
 8005daa:	4650      	mov	r0, sl
 8005dac:	7821      	ldrb	r1, [r4, #0]
 8005dae:	f7fd fc7e 	bl	80036ae <memchr>
 8005db2:	b138      	cbz	r0, 8005dc4 <_svfiprintf_r+0x150>
 8005db4:	2240      	movs	r2, #64	@ 0x40
 8005db6:	9b04      	ldr	r3, [sp, #16]
 8005db8:	eba0 000a 	sub.w	r0, r0, sl
 8005dbc:	4082      	lsls	r2, r0
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	3401      	adds	r4, #1
 8005dc2:	9304      	str	r3, [sp, #16]
 8005dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dc8:	2206      	movs	r2, #6
 8005dca:	4825      	ldr	r0, [pc, #148]	@ (8005e60 <_svfiprintf_r+0x1ec>)
 8005dcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dd0:	f7fd fc6d 	bl	80036ae <memchr>
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	d036      	beq.n	8005e46 <_svfiprintf_r+0x1d2>
 8005dd8:	4b22      	ldr	r3, [pc, #136]	@ (8005e64 <_svfiprintf_r+0x1f0>)
 8005dda:	bb1b      	cbnz	r3, 8005e24 <_svfiprintf_r+0x1b0>
 8005ddc:	9b03      	ldr	r3, [sp, #12]
 8005dde:	3307      	adds	r3, #7
 8005de0:	f023 0307 	bic.w	r3, r3, #7
 8005de4:	3308      	adds	r3, #8
 8005de6:	9303      	str	r3, [sp, #12]
 8005de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dea:	4433      	add	r3, r6
 8005dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dee:	e76a      	b.n	8005cc6 <_svfiprintf_r+0x52>
 8005df0:	460c      	mov	r4, r1
 8005df2:	2001      	movs	r0, #1
 8005df4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005df8:	e7a8      	b.n	8005d4c <_svfiprintf_r+0xd8>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f04f 0c0a 	mov.w	ip, #10
 8005e00:	4619      	mov	r1, r3
 8005e02:	3401      	adds	r4, #1
 8005e04:	9305      	str	r3, [sp, #20]
 8005e06:	4620      	mov	r0, r4
 8005e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e0c:	3a30      	subs	r2, #48	@ 0x30
 8005e0e:	2a09      	cmp	r2, #9
 8005e10:	d903      	bls.n	8005e1a <_svfiprintf_r+0x1a6>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0c6      	beq.n	8005da4 <_svfiprintf_r+0x130>
 8005e16:	9105      	str	r1, [sp, #20]
 8005e18:	e7c4      	b.n	8005da4 <_svfiprintf_r+0x130>
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e22:	e7f0      	b.n	8005e06 <_svfiprintf_r+0x192>
 8005e24:	ab03      	add	r3, sp, #12
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	462a      	mov	r2, r5
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8005e68 <_svfiprintf_r+0x1f4>)
 8005e2e:	a904      	add	r1, sp, #16
 8005e30:	f7fc fcca 	bl	80027c8 <_printf_float>
 8005e34:	1c42      	adds	r2, r0, #1
 8005e36:	4606      	mov	r6, r0
 8005e38:	d1d6      	bne.n	8005de8 <_svfiprintf_r+0x174>
 8005e3a:	89ab      	ldrh	r3, [r5, #12]
 8005e3c:	065b      	lsls	r3, r3, #25
 8005e3e:	f53f af2d 	bmi.w	8005c9c <_svfiprintf_r+0x28>
 8005e42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e44:	e72c      	b.n	8005ca0 <_svfiprintf_r+0x2c>
 8005e46:	ab03      	add	r3, sp, #12
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	462a      	mov	r2, r5
 8005e4c:	4638      	mov	r0, r7
 8005e4e:	4b06      	ldr	r3, [pc, #24]	@ (8005e68 <_svfiprintf_r+0x1f4>)
 8005e50:	a904      	add	r1, sp, #16
 8005e52:	f7fc ff57 	bl	8002d04 <_printf_i>
 8005e56:	e7ed      	b.n	8005e34 <_svfiprintf_r+0x1c0>
 8005e58:	080070f9 	.word	0x080070f9
 8005e5c:	080070ff 	.word	0x080070ff
 8005e60:	08007103 	.word	0x08007103
 8005e64:	080027c9 	.word	0x080027c9
 8005e68:	08005bbd 	.word	0x08005bbd

08005e6c <__sflush_r>:
 8005e6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	0716      	lsls	r6, r2, #28
 8005e74:	4605      	mov	r5, r0
 8005e76:	460c      	mov	r4, r1
 8005e78:	d454      	bmi.n	8005f24 <__sflush_r+0xb8>
 8005e7a:	684b      	ldr	r3, [r1, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	dc02      	bgt.n	8005e86 <__sflush_r+0x1a>
 8005e80:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	dd48      	ble.n	8005f18 <__sflush_r+0xac>
 8005e86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e88:	2e00      	cmp	r6, #0
 8005e8a:	d045      	beq.n	8005f18 <__sflush_r+0xac>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e92:	682f      	ldr	r7, [r5, #0]
 8005e94:	6a21      	ldr	r1, [r4, #32]
 8005e96:	602b      	str	r3, [r5, #0]
 8005e98:	d030      	beq.n	8005efc <__sflush_r+0x90>
 8005e9a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	0759      	lsls	r1, r3, #29
 8005ea0:	d505      	bpl.n	8005eae <__sflush_r+0x42>
 8005ea2:	6863      	ldr	r3, [r4, #4]
 8005ea4:	1ad2      	subs	r2, r2, r3
 8005ea6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ea8:	b10b      	cbz	r3, 8005eae <__sflush_r+0x42>
 8005eaa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005eac:	1ad2      	subs	r2, r2, r3
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005eb4:	6a21      	ldr	r1, [r4, #32]
 8005eb6:	47b0      	blx	r6
 8005eb8:	1c43      	adds	r3, r0, #1
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	d106      	bne.n	8005ecc <__sflush_r+0x60>
 8005ebe:	6829      	ldr	r1, [r5, #0]
 8005ec0:	291d      	cmp	r1, #29
 8005ec2:	d82b      	bhi.n	8005f1c <__sflush_r+0xb0>
 8005ec4:	4a28      	ldr	r2, [pc, #160]	@ (8005f68 <__sflush_r+0xfc>)
 8005ec6:	410a      	asrs	r2, r1
 8005ec8:	07d6      	lsls	r6, r2, #31
 8005eca:	d427      	bmi.n	8005f1c <__sflush_r+0xb0>
 8005ecc:	2200      	movs	r2, #0
 8005ece:	6062      	str	r2, [r4, #4]
 8005ed0:	6922      	ldr	r2, [r4, #16]
 8005ed2:	04d9      	lsls	r1, r3, #19
 8005ed4:	6022      	str	r2, [r4, #0]
 8005ed6:	d504      	bpl.n	8005ee2 <__sflush_r+0x76>
 8005ed8:	1c42      	adds	r2, r0, #1
 8005eda:	d101      	bne.n	8005ee0 <__sflush_r+0x74>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	b903      	cbnz	r3, 8005ee2 <__sflush_r+0x76>
 8005ee0:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ee2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ee4:	602f      	str	r7, [r5, #0]
 8005ee6:	b1b9      	cbz	r1, 8005f18 <__sflush_r+0xac>
 8005ee8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005eec:	4299      	cmp	r1, r3
 8005eee:	d002      	beq.n	8005ef6 <__sflush_r+0x8a>
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f7fe fa41 	bl	8004378 <_free_r>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005efa:	e00d      	b.n	8005f18 <__sflush_r+0xac>
 8005efc:	2301      	movs	r3, #1
 8005efe:	4628      	mov	r0, r5
 8005f00:	47b0      	blx	r6
 8005f02:	4602      	mov	r2, r0
 8005f04:	1c50      	adds	r0, r2, #1
 8005f06:	d1c9      	bne.n	8005e9c <__sflush_r+0x30>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0c6      	beq.n	8005e9c <__sflush_r+0x30>
 8005f0e:	2b1d      	cmp	r3, #29
 8005f10:	d001      	beq.n	8005f16 <__sflush_r+0xaa>
 8005f12:	2b16      	cmp	r3, #22
 8005f14:	d11d      	bne.n	8005f52 <__sflush_r+0xe6>
 8005f16:	602f      	str	r7, [r5, #0]
 8005f18:	2000      	movs	r0, #0
 8005f1a:	e021      	b.n	8005f60 <__sflush_r+0xf4>
 8005f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f20:	b21b      	sxth	r3, r3
 8005f22:	e01a      	b.n	8005f5a <__sflush_r+0xee>
 8005f24:	690f      	ldr	r7, [r1, #16]
 8005f26:	2f00      	cmp	r7, #0
 8005f28:	d0f6      	beq.n	8005f18 <__sflush_r+0xac>
 8005f2a:	0793      	lsls	r3, r2, #30
 8005f2c:	bf18      	it	ne
 8005f2e:	2300      	movne	r3, #0
 8005f30:	680e      	ldr	r6, [r1, #0]
 8005f32:	bf08      	it	eq
 8005f34:	694b      	ldreq	r3, [r1, #20]
 8005f36:	1bf6      	subs	r6, r6, r7
 8005f38:	600f      	str	r7, [r1, #0]
 8005f3a:	608b      	str	r3, [r1, #8]
 8005f3c:	2e00      	cmp	r6, #0
 8005f3e:	ddeb      	ble.n	8005f18 <__sflush_r+0xac>
 8005f40:	4633      	mov	r3, r6
 8005f42:	463a      	mov	r2, r7
 8005f44:	4628      	mov	r0, r5
 8005f46:	6a21      	ldr	r1, [r4, #32]
 8005f48:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005f4c:	47e0      	blx	ip
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	dc07      	bgt.n	8005f62 <__sflush_r+0xf6>
 8005f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5e:	81a3      	strh	r3, [r4, #12]
 8005f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f62:	4407      	add	r7, r0
 8005f64:	1a36      	subs	r6, r6, r0
 8005f66:	e7e9      	b.n	8005f3c <__sflush_r+0xd0>
 8005f68:	dfbffffe 	.word	0xdfbffffe

08005f6c <_fflush_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	690b      	ldr	r3, [r1, #16]
 8005f70:	4605      	mov	r5, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	b913      	cbnz	r3, 8005f7c <_fflush_r+0x10>
 8005f76:	2500      	movs	r5, #0
 8005f78:	4628      	mov	r0, r5
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	b118      	cbz	r0, 8005f86 <_fflush_r+0x1a>
 8005f7e:	6a03      	ldr	r3, [r0, #32]
 8005f80:	b90b      	cbnz	r3, 8005f86 <_fflush_r+0x1a>
 8005f82:	f7fd fa7b 	bl	800347c <__sinit>
 8005f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f3      	beq.n	8005f76 <_fflush_r+0xa>
 8005f8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f90:	07d0      	lsls	r0, r2, #31
 8005f92:	d404      	bmi.n	8005f9e <_fflush_r+0x32>
 8005f94:	0599      	lsls	r1, r3, #22
 8005f96:	d402      	bmi.n	8005f9e <_fflush_r+0x32>
 8005f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f9a:	f7fd fb86 	bl	80036aa <__retarget_lock_acquire_recursive>
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	f7ff ff63 	bl	8005e6c <__sflush_r>
 8005fa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fa8:	4605      	mov	r5, r0
 8005faa:	07da      	lsls	r2, r3, #31
 8005fac:	d4e4      	bmi.n	8005f78 <_fflush_r+0xc>
 8005fae:	89a3      	ldrh	r3, [r4, #12]
 8005fb0:	059b      	lsls	r3, r3, #22
 8005fb2:	d4e1      	bmi.n	8005f78 <_fflush_r+0xc>
 8005fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fb6:	f7fd fb79 	bl	80036ac <__retarget_lock_release_recursive>
 8005fba:	e7dd      	b.n	8005f78 <_fflush_r+0xc>

08005fbc <memmove>:
 8005fbc:	4288      	cmp	r0, r1
 8005fbe:	b510      	push	{r4, lr}
 8005fc0:	eb01 0402 	add.w	r4, r1, r2
 8005fc4:	d902      	bls.n	8005fcc <memmove+0x10>
 8005fc6:	4284      	cmp	r4, r0
 8005fc8:	4623      	mov	r3, r4
 8005fca:	d807      	bhi.n	8005fdc <memmove+0x20>
 8005fcc:	1e43      	subs	r3, r0, #1
 8005fce:	42a1      	cmp	r1, r4
 8005fd0:	d008      	beq.n	8005fe4 <memmove+0x28>
 8005fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fda:	e7f8      	b.n	8005fce <memmove+0x12>
 8005fdc:	4601      	mov	r1, r0
 8005fde:	4402      	add	r2, r0
 8005fe0:	428a      	cmp	r2, r1
 8005fe2:	d100      	bne.n	8005fe6 <memmove+0x2a>
 8005fe4:	bd10      	pop	{r4, pc}
 8005fe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fee:	e7f7      	b.n	8005fe0 <memmove+0x24>

08005ff0 <strncmp>:
 8005ff0:	b510      	push	{r4, lr}
 8005ff2:	b16a      	cbz	r2, 8006010 <strncmp+0x20>
 8005ff4:	3901      	subs	r1, #1
 8005ff6:	1884      	adds	r4, r0, r2
 8005ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ffc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006000:	429a      	cmp	r2, r3
 8006002:	d103      	bne.n	800600c <strncmp+0x1c>
 8006004:	42a0      	cmp	r0, r4
 8006006:	d001      	beq.n	800600c <strncmp+0x1c>
 8006008:	2a00      	cmp	r2, #0
 800600a:	d1f5      	bne.n	8005ff8 <strncmp+0x8>
 800600c:	1ad0      	subs	r0, r2, r3
 800600e:	bd10      	pop	{r4, pc}
 8006010:	4610      	mov	r0, r2
 8006012:	e7fc      	b.n	800600e <strncmp+0x1e>

08006014 <_sbrk_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	2300      	movs	r3, #0
 8006018:	4d05      	ldr	r5, [pc, #20]	@ (8006030 <_sbrk_r+0x1c>)
 800601a:	4604      	mov	r4, r0
 800601c:	4608      	mov	r0, r1
 800601e:	602b      	str	r3, [r5, #0]
 8006020:	f7fb f812 	bl	8001048 <_sbrk>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_sbrk_r+0x1a>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_sbrk_r+0x1a>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	20000368 	.word	0x20000368

08006034 <memcpy>:
 8006034:	440a      	add	r2, r1
 8006036:	4291      	cmp	r1, r2
 8006038:	f100 33ff 	add.w	r3, r0, #4294967295
 800603c:	d100      	bne.n	8006040 <memcpy+0xc>
 800603e:	4770      	bx	lr
 8006040:	b510      	push	{r4, lr}
 8006042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006046:	4291      	cmp	r1, r2
 8006048:	f803 4f01 	strb.w	r4, [r3, #1]!
 800604c:	d1f9      	bne.n	8006042 <memcpy+0xe>
 800604e:	bd10      	pop	{r4, pc}

08006050 <nan>:
 8006050:	2000      	movs	r0, #0
 8006052:	4901      	ldr	r1, [pc, #4]	@ (8006058 <nan+0x8>)
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	7ff80000 	.word	0x7ff80000

0800605c <__assert_func>:
 800605c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800605e:	4614      	mov	r4, r2
 8006060:	461a      	mov	r2, r3
 8006062:	4b09      	ldr	r3, [pc, #36]	@ (8006088 <__assert_func+0x2c>)
 8006064:	4605      	mov	r5, r0
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68d8      	ldr	r0, [r3, #12]
 800606a:	b954      	cbnz	r4, 8006082 <__assert_func+0x26>
 800606c:	4b07      	ldr	r3, [pc, #28]	@ (800608c <__assert_func+0x30>)
 800606e:	461c      	mov	r4, r3
 8006070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006074:	9100      	str	r1, [sp, #0]
 8006076:	462b      	mov	r3, r5
 8006078:	4905      	ldr	r1, [pc, #20]	@ (8006090 <__assert_func+0x34>)
 800607a:	f000 fba7 	bl	80067cc <fiprintf>
 800607e:	f000 fbb7 	bl	80067f0 <abort>
 8006082:	4b04      	ldr	r3, [pc, #16]	@ (8006094 <__assert_func+0x38>)
 8006084:	e7f4      	b.n	8006070 <__assert_func+0x14>
 8006086:	bf00      	nop
 8006088:	20000018 	.word	0x20000018
 800608c:	0800714d 	.word	0x0800714d
 8006090:	0800711f 	.word	0x0800711f
 8006094:	08007112 	.word	0x08007112

08006098 <_calloc_r>:
 8006098:	b570      	push	{r4, r5, r6, lr}
 800609a:	fba1 5402 	umull	r5, r4, r1, r2
 800609e:	b93c      	cbnz	r4, 80060b0 <_calloc_r+0x18>
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7fe f9db 	bl	800445c <_malloc_r>
 80060a6:	4606      	mov	r6, r0
 80060a8:	b928      	cbnz	r0, 80060b6 <_calloc_r+0x1e>
 80060aa:	2600      	movs	r6, #0
 80060ac:	4630      	mov	r0, r6
 80060ae:	bd70      	pop	{r4, r5, r6, pc}
 80060b0:	220c      	movs	r2, #12
 80060b2:	6002      	str	r2, [r0, #0]
 80060b4:	e7f9      	b.n	80060aa <_calloc_r+0x12>
 80060b6:	462a      	mov	r2, r5
 80060b8:	4621      	mov	r1, r4
 80060ba:	f7fd fa78 	bl	80035ae <memset>
 80060be:	e7f5      	b.n	80060ac <_calloc_r+0x14>

080060c0 <rshift>:
 80060c0:	6903      	ldr	r3, [r0, #16]
 80060c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80060ca:	f100 0414 	add.w	r4, r0, #20
 80060ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80060d2:	dd46      	ble.n	8006162 <rshift+0xa2>
 80060d4:	f011 011f 	ands.w	r1, r1, #31
 80060d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80060dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80060e0:	d10c      	bne.n	80060fc <rshift+0x3c>
 80060e2:	4629      	mov	r1, r5
 80060e4:	f100 0710 	add.w	r7, r0, #16
 80060e8:	42b1      	cmp	r1, r6
 80060ea:	d335      	bcc.n	8006158 <rshift+0x98>
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	1eea      	subs	r2, r5, #3
 80060f2:	4296      	cmp	r6, r2
 80060f4:	bf38      	it	cc
 80060f6:	2300      	movcc	r3, #0
 80060f8:	4423      	add	r3, r4
 80060fa:	e015      	b.n	8006128 <rshift+0x68>
 80060fc:	46a1      	mov	r9, r4
 80060fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006102:	f1c1 0820 	rsb	r8, r1, #32
 8006106:	40cf      	lsrs	r7, r1
 8006108:	f105 0e04 	add.w	lr, r5, #4
 800610c:	4576      	cmp	r6, lr
 800610e:	46f4      	mov	ip, lr
 8006110:	d816      	bhi.n	8006140 <rshift+0x80>
 8006112:	1a9a      	subs	r2, r3, r2
 8006114:	0092      	lsls	r2, r2, #2
 8006116:	3a04      	subs	r2, #4
 8006118:	3501      	adds	r5, #1
 800611a:	42ae      	cmp	r6, r5
 800611c:	bf38      	it	cc
 800611e:	2200      	movcc	r2, #0
 8006120:	18a3      	adds	r3, r4, r2
 8006122:	50a7      	str	r7, [r4, r2]
 8006124:	b107      	cbz	r7, 8006128 <rshift+0x68>
 8006126:	3304      	adds	r3, #4
 8006128:	42a3      	cmp	r3, r4
 800612a:	eba3 0204 	sub.w	r2, r3, r4
 800612e:	bf08      	it	eq
 8006130:	2300      	moveq	r3, #0
 8006132:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006136:	6102      	str	r2, [r0, #16]
 8006138:	bf08      	it	eq
 800613a:	6143      	streq	r3, [r0, #20]
 800613c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006140:	f8dc c000 	ldr.w	ip, [ip]
 8006144:	fa0c fc08 	lsl.w	ip, ip, r8
 8006148:	ea4c 0707 	orr.w	r7, ip, r7
 800614c:	f849 7b04 	str.w	r7, [r9], #4
 8006150:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006154:	40cf      	lsrs	r7, r1
 8006156:	e7d9      	b.n	800610c <rshift+0x4c>
 8006158:	f851 cb04 	ldr.w	ip, [r1], #4
 800615c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006160:	e7c2      	b.n	80060e8 <rshift+0x28>
 8006162:	4623      	mov	r3, r4
 8006164:	e7e0      	b.n	8006128 <rshift+0x68>

08006166 <__hexdig_fun>:
 8006166:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800616a:	2b09      	cmp	r3, #9
 800616c:	d802      	bhi.n	8006174 <__hexdig_fun+0xe>
 800616e:	3820      	subs	r0, #32
 8006170:	b2c0      	uxtb	r0, r0
 8006172:	4770      	bx	lr
 8006174:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006178:	2b05      	cmp	r3, #5
 800617a:	d801      	bhi.n	8006180 <__hexdig_fun+0x1a>
 800617c:	3847      	subs	r0, #71	@ 0x47
 800617e:	e7f7      	b.n	8006170 <__hexdig_fun+0xa>
 8006180:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006184:	2b05      	cmp	r3, #5
 8006186:	d801      	bhi.n	800618c <__hexdig_fun+0x26>
 8006188:	3827      	subs	r0, #39	@ 0x27
 800618a:	e7f1      	b.n	8006170 <__hexdig_fun+0xa>
 800618c:	2000      	movs	r0, #0
 800618e:	4770      	bx	lr

08006190 <__gethex>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	468a      	mov	sl, r1
 8006196:	4690      	mov	r8, r2
 8006198:	b085      	sub	sp, #20
 800619a:	9302      	str	r3, [sp, #8]
 800619c:	680b      	ldr	r3, [r1, #0]
 800619e:	9001      	str	r0, [sp, #4]
 80061a0:	1c9c      	adds	r4, r3, #2
 80061a2:	46a1      	mov	r9, r4
 80061a4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80061a8:	2830      	cmp	r0, #48	@ 0x30
 80061aa:	d0fa      	beq.n	80061a2 <__gethex+0x12>
 80061ac:	eba9 0303 	sub.w	r3, r9, r3
 80061b0:	f1a3 0b02 	sub.w	fp, r3, #2
 80061b4:	f7ff ffd7 	bl	8006166 <__hexdig_fun>
 80061b8:	4605      	mov	r5, r0
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d168      	bne.n	8006290 <__gethex+0x100>
 80061be:	2201      	movs	r2, #1
 80061c0:	4648      	mov	r0, r9
 80061c2:	499f      	ldr	r1, [pc, #636]	@ (8006440 <__gethex+0x2b0>)
 80061c4:	f7ff ff14 	bl	8005ff0 <strncmp>
 80061c8:	4607      	mov	r7, r0
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d167      	bne.n	800629e <__gethex+0x10e>
 80061ce:	f899 0001 	ldrb.w	r0, [r9, #1]
 80061d2:	4626      	mov	r6, r4
 80061d4:	f7ff ffc7 	bl	8006166 <__hexdig_fun>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d062      	beq.n	80062a2 <__gethex+0x112>
 80061dc:	4623      	mov	r3, r4
 80061de:	7818      	ldrb	r0, [r3, #0]
 80061e0:	4699      	mov	r9, r3
 80061e2:	2830      	cmp	r0, #48	@ 0x30
 80061e4:	f103 0301 	add.w	r3, r3, #1
 80061e8:	d0f9      	beq.n	80061de <__gethex+0x4e>
 80061ea:	f7ff ffbc 	bl	8006166 <__hexdig_fun>
 80061ee:	fab0 f580 	clz	r5, r0
 80061f2:	f04f 0b01 	mov.w	fp, #1
 80061f6:	096d      	lsrs	r5, r5, #5
 80061f8:	464a      	mov	r2, r9
 80061fa:	4616      	mov	r6, r2
 80061fc:	7830      	ldrb	r0, [r6, #0]
 80061fe:	3201      	adds	r2, #1
 8006200:	f7ff ffb1 	bl	8006166 <__hexdig_fun>
 8006204:	2800      	cmp	r0, #0
 8006206:	d1f8      	bne.n	80061fa <__gethex+0x6a>
 8006208:	2201      	movs	r2, #1
 800620a:	4630      	mov	r0, r6
 800620c:	498c      	ldr	r1, [pc, #560]	@ (8006440 <__gethex+0x2b0>)
 800620e:	f7ff feef 	bl	8005ff0 <strncmp>
 8006212:	2800      	cmp	r0, #0
 8006214:	d13f      	bne.n	8006296 <__gethex+0x106>
 8006216:	b944      	cbnz	r4, 800622a <__gethex+0x9a>
 8006218:	1c74      	adds	r4, r6, #1
 800621a:	4622      	mov	r2, r4
 800621c:	4616      	mov	r6, r2
 800621e:	7830      	ldrb	r0, [r6, #0]
 8006220:	3201      	adds	r2, #1
 8006222:	f7ff ffa0 	bl	8006166 <__hexdig_fun>
 8006226:	2800      	cmp	r0, #0
 8006228:	d1f8      	bne.n	800621c <__gethex+0x8c>
 800622a:	1ba4      	subs	r4, r4, r6
 800622c:	00a7      	lsls	r7, r4, #2
 800622e:	7833      	ldrb	r3, [r6, #0]
 8006230:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006234:	2b50      	cmp	r3, #80	@ 0x50
 8006236:	d13e      	bne.n	80062b6 <__gethex+0x126>
 8006238:	7873      	ldrb	r3, [r6, #1]
 800623a:	2b2b      	cmp	r3, #43	@ 0x2b
 800623c:	d033      	beq.n	80062a6 <__gethex+0x116>
 800623e:	2b2d      	cmp	r3, #45	@ 0x2d
 8006240:	d034      	beq.n	80062ac <__gethex+0x11c>
 8006242:	2400      	movs	r4, #0
 8006244:	1c71      	adds	r1, r6, #1
 8006246:	7808      	ldrb	r0, [r1, #0]
 8006248:	f7ff ff8d 	bl	8006166 <__hexdig_fun>
 800624c:	1e43      	subs	r3, r0, #1
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b18      	cmp	r3, #24
 8006252:	d830      	bhi.n	80062b6 <__gethex+0x126>
 8006254:	f1a0 0210 	sub.w	r2, r0, #16
 8006258:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800625c:	f7ff ff83 	bl	8006166 <__hexdig_fun>
 8006260:	f100 3cff 	add.w	ip, r0, #4294967295
 8006264:	fa5f fc8c 	uxtb.w	ip, ip
 8006268:	f1bc 0f18 	cmp.w	ip, #24
 800626c:	f04f 030a 	mov.w	r3, #10
 8006270:	d91e      	bls.n	80062b0 <__gethex+0x120>
 8006272:	b104      	cbz	r4, 8006276 <__gethex+0xe6>
 8006274:	4252      	negs	r2, r2
 8006276:	4417      	add	r7, r2
 8006278:	f8ca 1000 	str.w	r1, [sl]
 800627c:	b1ed      	cbz	r5, 80062ba <__gethex+0x12a>
 800627e:	f1bb 0f00 	cmp.w	fp, #0
 8006282:	bf0c      	ite	eq
 8006284:	2506      	moveq	r5, #6
 8006286:	2500      	movne	r5, #0
 8006288:	4628      	mov	r0, r5
 800628a:	b005      	add	sp, #20
 800628c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006290:	2500      	movs	r5, #0
 8006292:	462c      	mov	r4, r5
 8006294:	e7b0      	b.n	80061f8 <__gethex+0x68>
 8006296:	2c00      	cmp	r4, #0
 8006298:	d1c7      	bne.n	800622a <__gethex+0x9a>
 800629a:	4627      	mov	r7, r4
 800629c:	e7c7      	b.n	800622e <__gethex+0x9e>
 800629e:	464e      	mov	r6, r9
 80062a0:	462f      	mov	r7, r5
 80062a2:	2501      	movs	r5, #1
 80062a4:	e7c3      	b.n	800622e <__gethex+0x9e>
 80062a6:	2400      	movs	r4, #0
 80062a8:	1cb1      	adds	r1, r6, #2
 80062aa:	e7cc      	b.n	8006246 <__gethex+0xb6>
 80062ac:	2401      	movs	r4, #1
 80062ae:	e7fb      	b.n	80062a8 <__gethex+0x118>
 80062b0:	fb03 0002 	mla	r0, r3, r2, r0
 80062b4:	e7ce      	b.n	8006254 <__gethex+0xc4>
 80062b6:	4631      	mov	r1, r6
 80062b8:	e7de      	b.n	8006278 <__gethex+0xe8>
 80062ba:	4629      	mov	r1, r5
 80062bc:	eba6 0309 	sub.w	r3, r6, r9
 80062c0:	3b01      	subs	r3, #1
 80062c2:	2b07      	cmp	r3, #7
 80062c4:	dc0a      	bgt.n	80062dc <__gethex+0x14c>
 80062c6:	9801      	ldr	r0, [sp, #4]
 80062c8:	f7fe f954 	bl	8004574 <_Balloc>
 80062cc:	4604      	mov	r4, r0
 80062ce:	b940      	cbnz	r0, 80062e2 <__gethex+0x152>
 80062d0:	4602      	mov	r2, r0
 80062d2:	21e4      	movs	r1, #228	@ 0xe4
 80062d4:	4b5b      	ldr	r3, [pc, #364]	@ (8006444 <__gethex+0x2b4>)
 80062d6:	485c      	ldr	r0, [pc, #368]	@ (8006448 <__gethex+0x2b8>)
 80062d8:	f7ff fec0 	bl	800605c <__assert_func>
 80062dc:	3101      	adds	r1, #1
 80062de:	105b      	asrs	r3, r3, #1
 80062e0:	e7ef      	b.n	80062c2 <__gethex+0x132>
 80062e2:	2300      	movs	r3, #0
 80062e4:	f100 0a14 	add.w	sl, r0, #20
 80062e8:	4655      	mov	r5, sl
 80062ea:	469b      	mov	fp, r3
 80062ec:	45b1      	cmp	r9, r6
 80062ee:	d337      	bcc.n	8006360 <__gethex+0x1d0>
 80062f0:	f845 bb04 	str.w	fp, [r5], #4
 80062f4:	eba5 050a 	sub.w	r5, r5, sl
 80062f8:	10ad      	asrs	r5, r5, #2
 80062fa:	6125      	str	r5, [r4, #16]
 80062fc:	4658      	mov	r0, fp
 80062fe:	f7fe fa2b 	bl	8004758 <__hi0bits>
 8006302:	016d      	lsls	r5, r5, #5
 8006304:	f8d8 6000 	ldr.w	r6, [r8]
 8006308:	1a2d      	subs	r5, r5, r0
 800630a:	42b5      	cmp	r5, r6
 800630c:	dd54      	ble.n	80063b8 <__gethex+0x228>
 800630e:	1bad      	subs	r5, r5, r6
 8006310:	4629      	mov	r1, r5
 8006312:	4620      	mov	r0, r4
 8006314:	f7fe fdb3 	bl	8004e7e <__any_on>
 8006318:	4681      	mov	r9, r0
 800631a:	b178      	cbz	r0, 800633c <__gethex+0x1ac>
 800631c:	f04f 0901 	mov.w	r9, #1
 8006320:	1e6b      	subs	r3, r5, #1
 8006322:	1159      	asrs	r1, r3, #5
 8006324:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006328:	f003 021f 	and.w	r2, r3, #31
 800632c:	fa09 f202 	lsl.w	r2, r9, r2
 8006330:	420a      	tst	r2, r1
 8006332:	d003      	beq.n	800633c <__gethex+0x1ac>
 8006334:	454b      	cmp	r3, r9
 8006336:	dc36      	bgt.n	80063a6 <__gethex+0x216>
 8006338:	f04f 0902 	mov.w	r9, #2
 800633c:	4629      	mov	r1, r5
 800633e:	4620      	mov	r0, r4
 8006340:	f7ff febe 	bl	80060c0 <rshift>
 8006344:	442f      	add	r7, r5
 8006346:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800634a:	42bb      	cmp	r3, r7
 800634c:	da42      	bge.n	80063d4 <__gethex+0x244>
 800634e:	4621      	mov	r1, r4
 8006350:	9801      	ldr	r0, [sp, #4]
 8006352:	f7fe f94f 	bl	80045f4 <_Bfree>
 8006356:	2300      	movs	r3, #0
 8006358:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800635a:	25a3      	movs	r5, #163	@ 0xa3
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	e793      	b.n	8006288 <__gethex+0xf8>
 8006360:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006364:	2a2e      	cmp	r2, #46	@ 0x2e
 8006366:	d012      	beq.n	800638e <__gethex+0x1fe>
 8006368:	2b20      	cmp	r3, #32
 800636a:	d104      	bne.n	8006376 <__gethex+0x1e6>
 800636c:	f845 bb04 	str.w	fp, [r5], #4
 8006370:	f04f 0b00 	mov.w	fp, #0
 8006374:	465b      	mov	r3, fp
 8006376:	7830      	ldrb	r0, [r6, #0]
 8006378:	9303      	str	r3, [sp, #12]
 800637a:	f7ff fef4 	bl	8006166 <__hexdig_fun>
 800637e:	9b03      	ldr	r3, [sp, #12]
 8006380:	f000 000f 	and.w	r0, r0, #15
 8006384:	4098      	lsls	r0, r3
 8006386:	ea4b 0b00 	orr.w	fp, fp, r0
 800638a:	3304      	adds	r3, #4
 800638c:	e7ae      	b.n	80062ec <__gethex+0x15c>
 800638e:	45b1      	cmp	r9, r6
 8006390:	d8ea      	bhi.n	8006368 <__gethex+0x1d8>
 8006392:	2201      	movs	r2, #1
 8006394:	4630      	mov	r0, r6
 8006396:	492a      	ldr	r1, [pc, #168]	@ (8006440 <__gethex+0x2b0>)
 8006398:	9303      	str	r3, [sp, #12]
 800639a:	f7ff fe29 	bl	8005ff0 <strncmp>
 800639e:	9b03      	ldr	r3, [sp, #12]
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d1e1      	bne.n	8006368 <__gethex+0x1d8>
 80063a4:	e7a2      	b.n	80062ec <__gethex+0x15c>
 80063a6:	4620      	mov	r0, r4
 80063a8:	1ea9      	subs	r1, r5, #2
 80063aa:	f7fe fd68 	bl	8004e7e <__any_on>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d0c2      	beq.n	8006338 <__gethex+0x1a8>
 80063b2:	f04f 0903 	mov.w	r9, #3
 80063b6:	e7c1      	b.n	800633c <__gethex+0x1ac>
 80063b8:	da09      	bge.n	80063ce <__gethex+0x23e>
 80063ba:	1b75      	subs	r5, r6, r5
 80063bc:	4621      	mov	r1, r4
 80063be:	462a      	mov	r2, r5
 80063c0:	9801      	ldr	r0, [sp, #4]
 80063c2:	f7fe fb2d 	bl	8004a20 <__lshift>
 80063c6:	4604      	mov	r4, r0
 80063c8:	1b7f      	subs	r7, r7, r5
 80063ca:	f100 0a14 	add.w	sl, r0, #20
 80063ce:	f04f 0900 	mov.w	r9, #0
 80063d2:	e7b8      	b.n	8006346 <__gethex+0x1b6>
 80063d4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80063d8:	42bd      	cmp	r5, r7
 80063da:	dd6f      	ble.n	80064bc <__gethex+0x32c>
 80063dc:	1bed      	subs	r5, r5, r7
 80063de:	42ae      	cmp	r6, r5
 80063e0:	dc34      	bgt.n	800644c <__gethex+0x2bc>
 80063e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d022      	beq.n	8006430 <__gethex+0x2a0>
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d024      	beq.n	8006438 <__gethex+0x2a8>
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d115      	bne.n	800641e <__gethex+0x28e>
 80063f2:	42ae      	cmp	r6, r5
 80063f4:	d113      	bne.n	800641e <__gethex+0x28e>
 80063f6:	2e01      	cmp	r6, #1
 80063f8:	d10b      	bne.n	8006412 <__gethex+0x282>
 80063fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80063fe:	9a02      	ldr	r2, [sp, #8]
 8006400:	2562      	movs	r5, #98	@ 0x62
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	2301      	movs	r3, #1
 8006406:	6123      	str	r3, [r4, #16]
 8006408:	f8ca 3000 	str.w	r3, [sl]
 800640c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800640e:	601c      	str	r4, [r3, #0]
 8006410:	e73a      	b.n	8006288 <__gethex+0xf8>
 8006412:	4620      	mov	r0, r4
 8006414:	1e71      	subs	r1, r6, #1
 8006416:	f7fe fd32 	bl	8004e7e <__any_on>
 800641a:	2800      	cmp	r0, #0
 800641c:	d1ed      	bne.n	80063fa <__gethex+0x26a>
 800641e:	4621      	mov	r1, r4
 8006420:	9801      	ldr	r0, [sp, #4]
 8006422:	f7fe f8e7 	bl	80045f4 <_Bfree>
 8006426:	2300      	movs	r3, #0
 8006428:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800642a:	2550      	movs	r5, #80	@ 0x50
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	e72b      	b.n	8006288 <__gethex+0xf8>
 8006430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1f3      	bne.n	800641e <__gethex+0x28e>
 8006436:	e7e0      	b.n	80063fa <__gethex+0x26a>
 8006438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1dd      	bne.n	80063fa <__gethex+0x26a>
 800643e:	e7ee      	b.n	800641e <__gethex+0x28e>
 8006440:	08006fa0 	.word	0x08006fa0
 8006444:	08006e37 	.word	0x08006e37
 8006448:	0800714e 	.word	0x0800714e
 800644c:	1e6f      	subs	r7, r5, #1
 800644e:	f1b9 0f00 	cmp.w	r9, #0
 8006452:	d130      	bne.n	80064b6 <__gethex+0x326>
 8006454:	b127      	cbz	r7, 8006460 <__gethex+0x2d0>
 8006456:	4639      	mov	r1, r7
 8006458:	4620      	mov	r0, r4
 800645a:	f7fe fd10 	bl	8004e7e <__any_on>
 800645e:	4681      	mov	r9, r0
 8006460:	2301      	movs	r3, #1
 8006462:	4629      	mov	r1, r5
 8006464:	1b76      	subs	r6, r6, r5
 8006466:	2502      	movs	r5, #2
 8006468:	117a      	asrs	r2, r7, #5
 800646a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800646e:	f007 071f 	and.w	r7, r7, #31
 8006472:	40bb      	lsls	r3, r7
 8006474:	4213      	tst	r3, r2
 8006476:	4620      	mov	r0, r4
 8006478:	bf18      	it	ne
 800647a:	f049 0902 	orrne.w	r9, r9, #2
 800647e:	f7ff fe1f 	bl	80060c0 <rshift>
 8006482:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006486:	f1b9 0f00 	cmp.w	r9, #0
 800648a:	d047      	beq.n	800651c <__gethex+0x38c>
 800648c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d015      	beq.n	80064c0 <__gethex+0x330>
 8006494:	2b03      	cmp	r3, #3
 8006496:	d017      	beq.n	80064c8 <__gethex+0x338>
 8006498:	2b01      	cmp	r3, #1
 800649a:	d109      	bne.n	80064b0 <__gethex+0x320>
 800649c:	f019 0f02 	tst.w	r9, #2
 80064a0:	d006      	beq.n	80064b0 <__gethex+0x320>
 80064a2:	f8da 3000 	ldr.w	r3, [sl]
 80064a6:	ea49 0903 	orr.w	r9, r9, r3
 80064aa:	f019 0f01 	tst.w	r9, #1
 80064ae:	d10e      	bne.n	80064ce <__gethex+0x33e>
 80064b0:	f045 0510 	orr.w	r5, r5, #16
 80064b4:	e032      	b.n	800651c <__gethex+0x38c>
 80064b6:	f04f 0901 	mov.w	r9, #1
 80064ba:	e7d1      	b.n	8006460 <__gethex+0x2d0>
 80064bc:	2501      	movs	r5, #1
 80064be:	e7e2      	b.n	8006486 <__gethex+0x2f6>
 80064c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064c2:	f1c3 0301 	rsb	r3, r3, #1
 80064c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80064c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0f0      	beq.n	80064b0 <__gethex+0x320>
 80064ce:	f04f 0c00 	mov.w	ip, #0
 80064d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80064d6:	f104 0314 	add.w	r3, r4, #20
 80064da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80064de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064e8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80064ec:	d01b      	beq.n	8006526 <__gethex+0x396>
 80064ee:	3201      	adds	r2, #1
 80064f0:	6002      	str	r2, [r0, #0]
 80064f2:	2d02      	cmp	r5, #2
 80064f4:	f104 0314 	add.w	r3, r4, #20
 80064f8:	d13c      	bne.n	8006574 <__gethex+0x3e4>
 80064fa:	f8d8 2000 	ldr.w	r2, [r8]
 80064fe:	3a01      	subs	r2, #1
 8006500:	42b2      	cmp	r2, r6
 8006502:	d109      	bne.n	8006518 <__gethex+0x388>
 8006504:	2201      	movs	r2, #1
 8006506:	1171      	asrs	r1, r6, #5
 8006508:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800650c:	f006 061f 	and.w	r6, r6, #31
 8006510:	fa02 f606 	lsl.w	r6, r2, r6
 8006514:	421e      	tst	r6, r3
 8006516:	d13a      	bne.n	800658e <__gethex+0x3fe>
 8006518:	f045 0520 	orr.w	r5, r5, #32
 800651c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800651e:	601c      	str	r4, [r3, #0]
 8006520:	9b02      	ldr	r3, [sp, #8]
 8006522:	601f      	str	r7, [r3, #0]
 8006524:	e6b0      	b.n	8006288 <__gethex+0xf8>
 8006526:	4299      	cmp	r1, r3
 8006528:	f843 cc04 	str.w	ip, [r3, #-4]
 800652c:	d8d9      	bhi.n	80064e2 <__gethex+0x352>
 800652e:	68a3      	ldr	r3, [r4, #8]
 8006530:	459b      	cmp	fp, r3
 8006532:	db17      	blt.n	8006564 <__gethex+0x3d4>
 8006534:	6861      	ldr	r1, [r4, #4]
 8006536:	9801      	ldr	r0, [sp, #4]
 8006538:	3101      	adds	r1, #1
 800653a:	f7fe f81b 	bl	8004574 <_Balloc>
 800653e:	4681      	mov	r9, r0
 8006540:	b918      	cbnz	r0, 800654a <__gethex+0x3ba>
 8006542:	4602      	mov	r2, r0
 8006544:	2184      	movs	r1, #132	@ 0x84
 8006546:	4b19      	ldr	r3, [pc, #100]	@ (80065ac <__gethex+0x41c>)
 8006548:	e6c5      	b.n	80062d6 <__gethex+0x146>
 800654a:	6922      	ldr	r2, [r4, #16]
 800654c:	f104 010c 	add.w	r1, r4, #12
 8006550:	3202      	adds	r2, #2
 8006552:	0092      	lsls	r2, r2, #2
 8006554:	300c      	adds	r0, #12
 8006556:	f7ff fd6d 	bl	8006034 <memcpy>
 800655a:	4621      	mov	r1, r4
 800655c:	9801      	ldr	r0, [sp, #4]
 800655e:	f7fe f849 	bl	80045f4 <_Bfree>
 8006562:	464c      	mov	r4, r9
 8006564:	6923      	ldr	r3, [r4, #16]
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	6122      	str	r2, [r4, #16]
 800656a:	2201      	movs	r2, #1
 800656c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006570:	615a      	str	r2, [r3, #20]
 8006572:	e7be      	b.n	80064f2 <__gethex+0x362>
 8006574:	6922      	ldr	r2, [r4, #16]
 8006576:	455a      	cmp	r2, fp
 8006578:	dd0b      	ble.n	8006592 <__gethex+0x402>
 800657a:	2101      	movs	r1, #1
 800657c:	4620      	mov	r0, r4
 800657e:	f7ff fd9f 	bl	80060c0 <rshift>
 8006582:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006586:	3701      	adds	r7, #1
 8006588:	42bb      	cmp	r3, r7
 800658a:	f6ff aee0 	blt.w	800634e <__gethex+0x1be>
 800658e:	2501      	movs	r5, #1
 8006590:	e7c2      	b.n	8006518 <__gethex+0x388>
 8006592:	f016 061f 	ands.w	r6, r6, #31
 8006596:	d0fa      	beq.n	800658e <__gethex+0x3fe>
 8006598:	4453      	add	r3, sl
 800659a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800659e:	f7fe f8db 	bl	8004758 <__hi0bits>
 80065a2:	f1c6 0620 	rsb	r6, r6, #32
 80065a6:	42b0      	cmp	r0, r6
 80065a8:	dbe7      	blt.n	800657a <__gethex+0x3ea>
 80065aa:	e7f0      	b.n	800658e <__gethex+0x3fe>
 80065ac:	08006e37 	.word	0x08006e37

080065b0 <L_shift>:
 80065b0:	f1c2 0208 	rsb	r2, r2, #8
 80065b4:	0092      	lsls	r2, r2, #2
 80065b6:	b570      	push	{r4, r5, r6, lr}
 80065b8:	f1c2 0620 	rsb	r6, r2, #32
 80065bc:	6843      	ldr	r3, [r0, #4]
 80065be:	6804      	ldr	r4, [r0, #0]
 80065c0:	fa03 f506 	lsl.w	r5, r3, r6
 80065c4:	432c      	orrs	r4, r5
 80065c6:	40d3      	lsrs	r3, r2
 80065c8:	6004      	str	r4, [r0, #0]
 80065ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80065ce:	4288      	cmp	r0, r1
 80065d0:	d3f4      	bcc.n	80065bc <L_shift+0xc>
 80065d2:	bd70      	pop	{r4, r5, r6, pc}

080065d4 <__match>:
 80065d4:	b530      	push	{r4, r5, lr}
 80065d6:	6803      	ldr	r3, [r0, #0]
 80065d8:	3301      	adds	r3, #1
 80065da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065de:	b914      	cbnz	r4, 80065e6 <__match+0x12>
 80065e0:	6003      	str	r3, [r0, #0]
 80065e2:	2001      	movs	r0, #1
 80065e4:	bd30      	pop	{r4, r5, pc}
 80065e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065ea:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80065ee:	2d19      	cmp	r5, #25
 80065f0:	bf98      	it	ls
 80065f2:	3220      	addls	r2, #32
 80065f4:	42a2      	cmp	r2, r4
 80065f6:	d0f0      	beq.n	80065da <__match+0x6>
 80065f8:	2000      	movs	r0, #0
 80065fa:	e7f3      	b.n	80065e4 <__match+0x10>

080065fc <__hexnan>:
 80065fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006600:	2500      	movs	r5, #0
 8006602:	680b      	ldr	r3, [r1, #0]
 8006604:	4682      	mov	sl, r0
 8006606:	115e      	asrs	r6, r3, #5
 8006608:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800660c:	f013 031f 	ands.w	r3, r3, #31
 8006610:	bf18      	it	ne
 8006612:	3604      	addne	r6, #4
 8006614:	1f37      	subs	r7, r6, #4
 8006616:	4690      	mov	r8, r2
 8006618:	46b9      	mov	r9, r7
 800661a:	463c      	mov	r4, r7
 800661c:	46ab      	mov	fp, r5
 800661e:	b087      	sub	sp, #28
 8006620:	6801      	ldr	r1, [r0, #0]
 8006622:	9301      	str	r3, [sp, #4]
 8006624:	f846 5c04 	str.w	r5, [r6, #-4]
 8006628:	9502      	str	r5, [sp, #8]
 800662a:	784a      	ldrb	r2, [r1, #1]
 800662c:	1c4b      	adds	r3, r1, #1
 800662e:	9303      	str	r3, [sp, #12]
 8006630:	b342      	cbz	r2, 8006684 <__hexnan+0x88>
 8006632:	4610      	mov	r0, r2
 8006634:	9105      	str	r1, [sp, #20]
 8006636:	9204      	str	r2, [sp, #16]
 8006638:	f7ff fd95 	bl	8006166 <__hexdig_fun>
 800663c:	2800      	cmp	r0, #0
 800663e:	d151      	bne.n	80066e4 <__hexnan+0xe8>
 8006640:	9a04      	ldr	r2, [sp, #16]
 8006642:	9905      	ldr	r1, [sp, #20]
 8006644:	2a20      	cmp	r2, #32
 8006646:	d818      	bhi.n	800667a <__hexnan+0x7e>
 8006648:	9b02      	ldr	r3, [sp, #8]
 800664a:	459b      	cmp	fp, r3
 800664c:	dd13      	ble.n	8006676 <__hexnan+0x7a>
 800664e:	454c      	cmp	r4, r9
 8006650:	d206      	bcs.n	8006660 <__hexnan+0x64>
 8006652:	2d07      	cmp	r5, #7
 8006654:	dc04      	bgt.n	8006660 <__hexnan+0x64>
 8006656:	462a      	mov	r2, r5
 8006658:	4649      	mov	r1, r9
 800665a:	4620      	mov	r0, r4
 800665c:	f7ff ffa8 	bl	80065b0 <L_shift>
 8006660:	4544      	cmp	r4, r8
 8006662:	d952      	bls.n	800670a <__hexnan+0x10e>
 8006664:	2300      	movs	r3, #0
 8006666:	f1a4 0904 	sub.w	r9, r4, #4
 800666a:	f844 3c04 	str.w	r3, [r4, #-4]
 800666e:	461d      	mov	r5, r3
 8006670:	464c      	mov	r4, r9
 8006672:	f8cd b008 	str.w	fp, [sp, #8]
 8006676:	9903      	ldr	r1, [sp, #12]
 8006678:	e7d7      	b.n	800662a <__hexnan+0x2e>
 800667a:	2a29      	cmp	r2, #41	@ 0x29
 800667c:	d157      	bne.n	800672e <__hexnan+0x132>
 800667e:	3102      	adds	r1, #2
 8006680:	f8ca 1000 	str.w	r1, [sl]
 8006684:	f1bb 0f00 	cmp.w	fp, #0
 8006688:	d051      	beq.n	800672e <__hexnan+0x132>
 800668a:	454c      	cmp	r4, r9
 800668c:	d206      	bcs.n	800669c <__hexnan+0xa0>
 800668e:	2d07      	cmp	r5, #7
 8006690:	dc04      	bgt.n	800669c <__hexnan+0xa0>
 8006692:	462a      	mov	r2, r5
 8006694:	4649      	mov	r1, r9
 8006696:	4620      	mov	r0, r4
 8006698:	f7ff ff8a 	bl	80065b0 <L_shift>
 800669c:	4544      	cmp	r4, r8
 800669e:	d936      	bls.n	800670e <__hexnan+0x112>
 80066a0:	4623      	mov	r3, r4
 80066a2:	f1a8 0204 	sub.w	r2, r8, #4
 80066a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80066aa:	429f      	cmp	r7, r3
 80066ac:	f842 1f04 	str.w	r1, [r2, #4]!
 80066b0:	d2f9      	bcs.n	80066a6 <__hexnan+0xaa>
 80066b2:	1b3b      	subs	r3, r7, r4
 80066b4:	f023 0303 	bic.w	r3, r3, #3
 80066b8:	3304      	adds	r3, #4
 80066ba:	3401      	adds	r4, #1
 80066bc:	3e03      	subs	r6, #3
 80066be:	42b4      	cmp	r4, r6
 80066c0:	bf88      	it	hi
 80066c2:	2304      	movhi	r3, #4
 80066c4:	2200      	movs	r2, #0
 80066c6:	4443      	add	r3, r8
 80066c8:	f843 2b04 	str.w	r2, [r3], #4
 80066cc:	429f      	cmp	r7, r3
 80066ce:	d2fb      	bcs.n	80066c8 <__hexnan+0xcc>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	b91b      	cbnz	r3, 80066dc <__hexnan+0xe0>
 80066d4:	4547      	cmp	r7, r8
 80066d6:	d128      	bne.n	800672a <__hexnan+0x12e>
 80066d8:	2301      	movs	r3, #1
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	2005      	movs	r0, #5
 80066de:	b007      	add	sp, #28
 80066e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e4:	3501      	adds	r5, #1
 80066e6:	2d08      	cmp	r5, #8
 80066e8:	f10b 0b01 	add.w	fp, fp, #1
 80066ec:	dd06      	ble.n	80066fc <__hexnan+0x100>
 80066ee:	4544      	cmp	r4, r8
 80066f0:	d9c1      	bls.n	8006676 <__hexnan+0x7a>
 80066f2:	2300      	movs	r3, #0
 80066f4:	2501      	movs	r5, #1
 80066f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80066fa:	3c04      	subs	r4, #4
 80066fc:	6822      	ldr	r2, [r4, #0]
 80066fe:	f000 000f 	and.w	r0, r0, #15
 8006702:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006706:	6020      	str	r0, [r4, #0]
 8006708:	e7b5      	b.n	8006676 <__hexnan+0x7a>
 800670a:	2508      	movs	r5, #8
 800670c:	e7b3      	b.n	8006676 <__hexnan+0x7a>
 800670e:	9b01      	ldr	r3, [sp, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0dd      	beq.n	80066d0 <__hexnan+0xd4>
 8006714:	f04f 32ff 	mov.w	r2, #4294967295
 8006718:	f1c3 0320 	rsb	r3, r3, #32
 800671c:	40da      	lsrs	r2, r3
 800671e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006722:	4013      	ands	r3, r2
 8006724:	f846 3c04 	str.w	r3, [r6, #-4]
 8006728:	e7d2      	b.n	80066d0 <__hexnan+0xd4>
 800672a:	3f04      	subs	r7, #4
 800672c:	e7d0      	b.n	80066d0 <__hexnan+0xd4>
 800672e:	2004      	movs	r0, #4
 8006730:	e7d5      	b.n	80066de <__hexnan+0xe2>

08006732 <__ascii_mbtowc>:
 8006732:	b082      	sub	sp, #8
 8006734:	b901      	cbnz	r1, 8006738 <__ascii_mbtowc+0x6>
 8006736:	a901      	add	r1, sp, #4
 8006738:	b142      	cbz	r2, 800674c <__ascii_mbtowc+0x1a>
 800673a:	b14b      	cbz	r3, 8006750 <__ascii_mbtowc+0x1e>
 800673c:	7813      	ldrb	r3, [r2, #0]
 800673e:	600b      	str	r3, [r1, #0]
 8006740:	7812      	ldrb	r2, [r2, #0]
 8006742:	1e10      	subs	r0, r2, #0
 8006744:	bf18      	it	ne
 8006746:	2001      	movne	r0, #1
 8006748:	b002      	add	sp, #8
 800674a:	4770      	bx	lr
 800674c:	4610      	mov	r0, r2
 800674e:	e7fb      	b.n	8006748 <__ascii_mbtowc+0x16>
 8006750:	f06f 0001 	mvn.w	r0, #1
 8006754:	e7f8      	b.n	8006748 <__ascii_mbtowc+0x16>

08006756 <_realloc_r>:
 8006756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675a:	4680      	mov	r8, r0
 800675c:	4615      	mov	r5, r2
 800675e:	460c      	mov	r4, r1
 8006760:	b921      	cbnz	r1, 800676c <_realloc_r+0x16>
 8006762:	4611      	mov	r1, r2
 8006764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006768:	f7fd be78 	b.w	800445c <_malloc_r>
 800676c:	b92a      	cbnz	r2, 800677a <_realloc_r+0x24>
 800676e:	f7fd fe03 	bl	8004378 <_free_r>
 8006772:	2400      	movs	r4, #0
 8006774:	4620      	mov	r0, r4
 8006776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800677a:	f000 f840 	bl	80067fe <_malloc_usable_size_r>
 800677e:	4285      	cmp	r5, r0
 8006780:	4606      	mov	r6, r0
 8006782:	d802      	bhi.n	800678a <_realloc_r+0x34>
 8006784:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006788:	d8f4      	bhi.n	8006774 <_realloc_r+0x1e>
 800678a:	4629      	mov	r1, r5
 800678c:	4640      	mov	r0, r8
 800678e:	f7fd fe65 	bl	800445c <_malloc_r>
 8006792:	4607      	mov	r7, r0
 8006794:	2800      	cmp	r0, #0
 8006796:	d0ec      	beq.n	8006772 <_realloc_r+0x1c>
 8006798:	42b5      	cmp	r5, r6
 800679a:	462a      	mov	r2, r5
 800679c:	4621      	mov	r1, r4
 800679e:	bf28      	it	cs
 80067a0:	4632      	movcs	r2, r6
 80067a2:	f7ff fc47 	bl	8006034 <memcpy>
 80067a6:	4621      	mov	r1, r4
 80067a8:	4640      	mov	r0, r8
 80067aa:	f7fd fde5 	bl	8004378 <_free_r>
 80067ae:	463c      	mov	r4, r7
 80067b0:	e7e0      	b.n	8006774 <_realloc_r+0x1e>

080067b2 <__ascii_wctomb>:
 80067b2:	4603      	mov	r3, r0
 80067b4:	4608      	mov	r0, r1
 80067b6:	b141      	cbz	r1, 80067ca <__ascii_wctomb+0x18>
 80067b8:	2aff      	cmp	r2, #255	@ 0xff
 80067ba:	d904      	bls.n	80067c6 <__ascii_wctomb+0x14>
 80067bc:	228a      	movs	r2, #138	@ 0x8a
 80067be:	f04f 30ff 	mov.w	r0, #4294967295
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	4770      	bx	lr
 80067c6:	2001      	movs	r0, #1
 80067c8:	700a      	strb	r2, [r1, #0]
 80067ca:	4770      	bx	lr

080067cc <fiprintf>:
 80067cc:	b40e      	push	{r1, r2, r3}
 80067ce:	b503      	push	{r0, r1, lr}
 80067d0:	4601      	mov	r1, r0
 80067d2:	ab03      	add	r3, sp, #12
 80067d4:	4805      	ldr	r0, [pc, #20]	@ (80067ec <fiprintf+0x20>)
 80067d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067da:	6800      	ldr	r0, [r0, #0]
 80067dc:	9301      	str	r3, [sp, #4]
 80067de:	f000 f83d 	bl	800685c <_vfiprintf_r>
 80067e2:	b002      	add	sp, #8
 80067e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067e8:	b003      	add	sp, #12
 80067ea:	4770      	bx	lr
 80067ec:	20000018 	.word	0x20000018

080067f0 <abort>:
 80067f0:	2006      	movs	r0, #6
 80067f2:	b508      	push	{r3, lr}
 80067f4:	f000 fa06 	bl	8006c04 <raise>
 80067f8:	2001      	movs	r0, #1
 80067fa:	f7fa fbb0 	bl	8000f5e <_exit>

080067fe <_malloc_usable_size_r>:
 80067fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006802:	1f18      	subs	r0, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	bfbc      	itt	lt
 8006808:	580b      	ldrlt	r3, [r1, r0]
 800680a:	18c0      	addlt	r0, r0, r3
 800680c:	4770      	bx	lr

0800680e <__sfputc_r>:
 800680e:	6893      	ldr	r3, [r2, #8]
 8006810:	b410      	push	{r4}
 8006812:	3b01      	subs	r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	6093      	str	r3, [r2, #8]
 8006818:	da07      	bge.n	800682a <__sfputc_r+0x1c>
 800681a:	6994      	ldr	r4, [r2, #24]
 800681c:	42a3      	cmp	r3, r4
 800681e:	db01      	blt.n	8006824 <__sfputc_r+0x16>
 8006820:	290a      	cmp	r1, #10
 8006822:	d102      	bne.n	800682a <__sfputc_r+0x1c>
 8006824:	bc10      	pop	{r4}
 8006826:	f000 b931 	b.w	8006a8c <__swbuf_r>
 800682a:	6813      	ldr	r3, [r2, #0]
 800682c:	1c58      	adds	r0, r3, #1
 800682e:	6010      	str	r0, [r2, #0]
 8006830:	7019      	strb	r1, [r3, #0]
 8006832:	4608      	mov	r0, r1
 8006834:	bc10      	pop	{r4}
 8006836:	4770      	bx	lr

08006838 <__sfputs_r>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	4606      	mov	r6, r0
 800683c:	460f      	mov	r7, r1
 800683e:	4614      	mov	r4, r2
 8006840:	18d5      	adds	r5, r2, r3
 8006842:	42ac      	cmp	r4, r5
 8006844:	d101      	bne.n	800684a <__sfputs_r+0x12>
 8006846:	2000      	movs	r0, #0
 8006848:	e007      	b.n	800685a <__sfputs_r+0x22>
 800684a:	463a      	mov	r2, r7
 800684c:	4630      	mov	r0, r6
 800684e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006852:	f7ff ffdc 	bl	800680e <__sfputc_r>
 8006856:	1c43      	adds	r3, r0, #1
 8006858:	d1f3      	bne.n	8006842 <__sfputs_r+0xa>
 800685a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800685c <_vfiprintf_r>:
 800685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006860:	460d      	mov	r5, r1
 8006862:	4614      	mov	r4, r2
 8006864:	4698      	mov	r8, r3
 8006866:	4606      	mov	r6, r0
 8006868:	b09d      	sub	sp, #116	@ 0x74
 800686a:	b118      	cbz	r0, 8006874 <_vfiprintf_r+0x18>
 800686c:	6a03      	ldr	r3, [r0, #32]
 800686e:	b90b      	cbnz	r3, 8006874 <_vfiprintf_r+0x18>
 8006870:	f7fc fe04 	bl	800347c <__sinit>
 8006874:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006876:	07d9      	lsls	r1, r3, #31
 8006878:	d405      	bmi.n	8006886 <_vfiprintf_r+0x2a>
 800687a:	89ab      	ldrh	r3, [r5, #12]
 800687c:	059a      	lsls	r2, r3, #22
 800687e:	d402      	bmi.n	8006886 <_vfiprintf_r+0x2a>
 8006880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006882:	f7fc ff12 	bl	80036aa <__retarget_lock_acquire_recursive>
 8006886:	89ab      	ldrh	r3, [r5, #12]
 8006888:	071b      	lsls	r3, r3, #28
 800688a:	d501      	bpl.n	8006890 <_vfiprintf_r+0x34>
 800688c:	692b      	ldr	r3, [r5, #16]
 800688e:	b99b      	cbnz	r3, 80068b8 <_vfiprintf_r+0x5c>
 8006890:	4629      	mov	r1, r5
 8006892:	4630      	mov	r0, r6
 8006894:	f000 f938 	bl	8006b08 <__swsetup_r>
 8006898:	b170      	cbz	r0, 80068b8 <_vfiprintf_r+0x5c>
 800689a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800689c:	07dc      	lsls	r4, r3, #31
 800689e:	d504      	bpl.n	80068aa <_vfiprintf_r+0x4e>
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	b01d      	add	sp, #116	@ 0x74
 80068a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068aa:	89ab      	ldrh	r3, [r5, #12]
 80068ac:	0598      	lsls	r0, r3, #22
 80068ae:	d4f7      	bmi.n	80068a0 <_vfiprintf_r+0x44>
 80068b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068b2:	f7fc fefb 	bl	80036ac <__retarget_lock_release_recursive>
 80068b6:	e7f3      	b.n	80068a0 <_vfiprintf_r+0x44>
 80068b8:	2300      	movs	r3, #0
 80068ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80068bc:	2320      	movs	r3, #32
 80068be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068c2:	2330      	movs	r3, #48	@ 0x30
 80068c4:	f04f 0901 	mov.w	r9, #1
 80068c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80068cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006a78 <_vfiprintf_r+0x21c>
 80068d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068d4:	4623      	mov	r3, r4
 80068d6:	469a      	mov	sl, r3
 80068d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068dc:	b10a      	cbz	r2, 80068e2 <_vfiprintf_r+0x86>
 80068de:	2a25      	cmp	r2, #37	@ 0x25
 80068e0:	d1f9      	bne.n	80068d6 <_vfiprintf_r+0x7a>
 80068e2:	ebba 0b04 	subs.w	fp, sl, r4
 80068e6:	d00b      	beq.n	8006900 <_vfiprintf_r+0xa4>
 80068e8:	465b      	mov	r3, fp
 80068ea:	4622      	mov	r2, r4
 80068ec:	4629      	mov	r1, r5
 80068ee:	4630      	mov	r0, r6
 80068f0:	f7ff ffa2 	bl	8006838 <__sfputs_r>
 80068f4:	3001      	adds	r0, #1
 80068f6:	f000 80a7 	beq.w	8006a48 <_vfiprintf_r+0x1ec>
 80068fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068fc:	445a      	add	r2, fp
 80068fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8006900:	f89a 3000 	ldrb.w	r3, [sl]
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 809f 	beq.w	8006a48 <_vfiprintf_r+0x1ec>
 800690a:	2300      	movs	r3, #0
 800690c:	f04f 32ff 	mov.w	r2, #4294967295
 8006910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006914:	f10a 0a01 	add.w	sl, sl, #1
 8006918:	9304      	str	r3, [sp, #16]
 800691a:	9307      	str	r3, [sp, #28]
 800691c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006920:	931a      	str	r3, [sp, #104]	@ 0x68
 8006922:	4654      	mov	r4, sl
 8006924:	2205      	movs	r2, #5
 8006926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800692a:	4853      	ldr	r0, [pc, #332]	@ (8006a78 <_vfiprintf_r+0x21c>)
 800692c:	f7fc febf 	bl	80036ae <memchr>
 8006930:	9a04      	ldr	r2, [sp, #16]
 8006932:	b9d8      	cbnz	r0, 800696c <_vfiprintf_r+0x110>
 8006934:	06d1      	lsls	r1, r2, #27
 8006936:	bf44      	itt	mi
 8006938:	2320      	movmi	r3, #32
 800693a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800693e:	0713      	lsls	r3, r2, #28
 8006940:	bf44      	itt	mi
 8006942:	232b      	movmi	r3, #43	@ 0x2b
 8006944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006948:	f89a 3000 	ldrb.w	r3, [sl]
 800694c:	2b2a      	cmp	r3, #42	@ 0x2a
 800694e:	d015      	beq.n	800697c <_vfiprintf_r+0x120>
 8006950:	4654      	mov	r4, sl
 8006952:	2000      	movs	r0, #0
 8006954:	f04f 0c0a 	mov.w	ip, #10
 8006958:	9a07      	ldr	r2, [sp, #28]
 800695a:	4621      	mov	r1, r4
 800695c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006960:	3b30      	subs	r3, #48	@ 0x30
 8006962:	2b09      	cmp	r3, #9
 8006964:	d94b      	bls.n	80069fe <_vfiprintf_r+0x1a2>
 8006966:	b1b0      	cbz	r0, 8006996 <_vfiprintf_r+0x13a>
 8006968:	9207      	str	r2, [sp, #28]
 800696a:	e014      	b.n	8006996 <_vfiprintf_r+0x13a>
 800696c:	eba0 0308 	sub.w	r3, r0, r8
 8006970:	fa09 f303 	lsl.w	r3, r9, r3
 8006974:	4313      	orrs	r3, r2
 8006976:	46a2      	mov	sl, r4
 8006978:	9304      	str	r3, [sp, #16]
 800697a:	e7d2      	b.n	8006922 <_vfiprintf_r+0xc6>
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	1d19      	adds	r1, r3, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	9103      	str	r1, [sp, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	bfbb      	ittet	lt
 8006988:	425b      	neglt	r3, r3
 800698a:	f042 0202 	orrlt.w	r2, r2, #2
 800698e:	9307      	strge	r3, [sp, #28]
 8006990:	9307      	strlt	r3, [sp, #28]
 8006992:	bfb8      	it	lt
 8006994:	9204      	strlt	r2, [sp, #16]
 8006996:	7823      	ldrb	r3, [r4, #0]
 8006998:	2b2e      	cmp	r3, #46	@ 0x2e
 800699a:	d10a      	bne.n	80069b2 <_vfiprintf_r+0x156>
 800699c:	7863      	ldrb	r3, [r4, #1]
 800699e:	2b2a      	cmp	r3, #42	@ 0x2a
 80069a0:	d132      	bne.n	8006a08 <_vfiprintf_r+0x1ac>
 80069a2:	9b03      	ldr	r3, [sp, #12]
 80069a4:	3402      	adds	r4, #2
 80069a6:	1d1a      	adds	r2, r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	9203      	str	r2, [sp, #12]
 80069ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069b0:	9305      	str	r3, [sp, #20]
 80069b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006a7c <_vfiprintf_r+0x220>
 80069b6:	2203      	movs	r2, #3
 80069b8:	4650      	mov	r0, sl
 80069ba:	7821      	ldrb	r1, [r4, #0]
 80069bc:	f7fc fe77 	bl	80036ae <memchr>
 80069c0:	b138      	cbz	r0, 80069d2 <_vfiprintf_r+0x176>
 80069c2:	2240      	movs	r2, #64	@ 0x40
 80069c4:	9b04      	ldr	r3, [sp, #16]
 80069c6:	eba0 000a 	sub.w	r0, r0, sl
 80069ca:	4082      	lsls	r2, r0
 80069cc:	4313      	orrs	r3, r2
 80069ce:	3401      	adds	r4, #1
 80069d0:	9304      	str	r3, [sp, #16]
 80069d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d6:	2206      	movs	r2, #6
 80069d8:	4829      	ldr	r0, [pc, #164]	@ (8006a80 <_vfiprintf_r+0x224>)
 80069da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069de:	f7fc fe66 	bl	80036ae <memchr>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d03f      	beq.n	8006a66 <_vfiprintf_r+0x20a>
 80069e6:	4b27      	ldr	r3, [pc, #156]	@ (8006a84 <_vfiprintf_r+0x228>)
 80069e8:	bb1b      	cbnz	r3, 8006a32 <_vfiprintf_r+0x1d6>
 80069ea:	9b03      	ldr	r3, [sp, #12]
 80069ec:	3307      	adds	r3, #7
 80069ee:	f023 0307 	bic.w	r3, r3, #7
 80069f2:	3308      	adds	r3, #8
 80069f4:	9303      	str	r3, [sp, #12]
 80069f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f8:	443b      	add	r3, r7
 80069fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80069fc:	e76a      	b.n	80068d4 <_vfiprintf_r+0x78>
 80069fe:	460c      	mov	r4, r1
 8006a00:	2001      	movs	r0, #1
 8006a02:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a06:	e7a8      	b.n	800695a <_vfiprintf_r+0xfe>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f04f 0c0a 	mov.w	ip, #10
 8006a0e:	4619      	mov	r1, r3
 8006a10:	3401      	adds	r4, #1
 8006a12:	9305      	str	r3, [sp, #20]
 8006a14:	4620      	mov	r0, r4
 8006a16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a1a:	3a30      	subs	r2, #48	@ 0x30
 8006a1c:	2a09      	cmp	r2, #9
 8006a1e:	d903      	bls.n	8006a28 <_vfiprintf_r+0x1cc>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0c6      	beq.n	80069b2 <_vfiprintf_r+0x156>
 8006a24:	9105      	str	r1, [sp, #20]
 8006a26:	e7c4      	b.n	80069b2 <_vfiprintf_r+0x156>
 8006a28:	4604      	mov	r4, r0
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a30:	e7f0      	b.n	8006a14 <_vfiprintf_r+0x1b8>
 8006a32:	ab03      	add	r3, sp, #12
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	462a      	mov	r2, r5
 8006a38:	4630      	mov	r0, r6
 8006a3a:	4b13      	ldr	r3, [pc, #76]	@ (8006a88 <_vfiprintf_r+0x22c>)
 8006a3c:	a904      	add	r1, sp, #16
 8006a3e:	f7fb fec3 	bl	80027c8 <_printf_float>
 8006a42:	4607      	mov	r7, r0
 8006a44:	1c78      	adds	r0, r7, #1
 8006a46:	d1d6      	bne.n	80069f6 <_vfiprintf_r+0x19a>
 8006a48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a4a:	07d9      	lsls	r1, r3, #31
 8006a4c:	d405      	bmi.n	8006a5a <_vfiprintf_r+0x1fe>
 8006a4e:	89ab      	ldrh	r3, [r5, #12]
 8006a50:	059a      	lsls	r2, r3, #22
 8006a52:	d402      	bmi.n	8006a5a <_vfiprintf_r+0x1fe>
 8006a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a56:	f7fc fe29 	bl	80036ac <__retarget_lock_release_recursive>
 8006a5a:	89ab      	ldrh	r3, [r5, #12]
 8006a5c:	065b      	lsls	r3, r3, #25
 8006a5e:	f53f af1f 	bmi.w	80068a0 <_vfiprintf_r+0x44>
 8006a62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a64:	e71e      	b.n	80068a4 <_vfiprintf_r+0x48>
 8006a66:	ab03      	add	r3, sp, #12
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	462a      	mov	r2, r5
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	4b06      	ldr	r3, [pc, #24]	@ (8006a88 <_vfiprintf_r+0x22c>)
 8006a70:	a904      	add	r1, sp, #16
 8006a72:	f7fc f947 	bl	8002d04 <_printf_i>
 8006a76:	e7e4      	b.n	8006a42 <_vfiprintf_r+0x1e6>
 8006a78:	080070f9 	.word	0x080070f9
 8006a7c:	080070ff 	.word	0x080070ff
 8006a80:	08007103 	.word	0x08007103
 8006a84:	080027c9 	.word	0x080027c9
 8006a88:	08006839 	.word	0x08006839

08006a8c <__swbuf_r>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	460e      	mov	r6, r1
 8006a90:	4614      	mov	r4, r2
 8006a92:	4605      	mov	r5, r0
 8006a94:	b118      	cbz	r0, 8006a9e <__swbuf_r+0x12>
 8006a96:	6a03      	ldr	r3, [r0, #32]
 8006a98:	b90b      	cbnz	r3, 8006a9e <__swbuf_r+0x12>
 8006a9a:	f7fc fcef 	bl	800347c <__sinit>
 8006a9e:	69a3      	ldr	r3, [r4, #24]
 8006aa0:	60a3      	str	r3, [r4, #8]
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	071a      	lsls	r2, r3, #28
 8006aa6:	d501      	bpl.n	8006aac <__swbuf_r+0x20>
 8006aa8:	6923      	ldr	r3, [r4, #16]
 8006aaa:	b943      	cbnz	r3, 8006abe <__swbuf_r+0x32>
 8006aac:	4621      	mov	r1, r4
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 f82a 	bl	8006b08 <__swsetup_r>
 8006ab4:	b118      	cbz	r0, 8006abe <__swbuf_r+0x32>
 8006ab6:	f04f 37ff 	mov.w	r7, #4294967295
 8006aba:	4638      	mov	r0, r7
 8006abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	6922      	ldr	r2, [r4, #16]
 8006ac2:	b2f6      	uxtb	r6, r6
 8006ac4:	1a98      	subs	r0, r3, r2
 8006ac6:	6963      	ldr	r3, [r4, #20]
 8006ac8:	4637      	mov	r7, r6
 8006aca:	4283      	cmp	r3, r0
 8006acc:	dc05      	bgt.n	8006ada <__swbuf_r+0x4e>
 8006ace:	4621      	mov	r1, r4
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f7ff fa4b 	bl	8005f6c <_fflush_r>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d1ed      	bne.n	8006ab6 <__swbuf_r+0x2a>
 8006ada:	68a3      	ldr	r3, [r4, #8]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	60a3      	str	r3, [r4, #8]
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	6022      	str	r2, [r4, #0]
 8006ae6:	701e      	strb	r6, [r3, #0]
 8006ae8:	6962      	ldr	r2, [r4, #20]
 8006aea:	1c43      	adds	r3, r0, #1
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d004      	beq.n	8006afa <__swbuf_r+0x6e>
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	07db      	lsls	r3, r3, #31
 8006af4:	d5e1      	bpl.n	8006aba <__swbuf_r+0x2e>
 8006af6:	2e0a      	cmp	r6, #10
 8006af8:	d1df      	bne.n	8006aba <__swbuf_r+0x2e>
 8006afa:	4621      	mov	r1, r4
 8006afc:	4628      	mov	r0, r5
 8006afe:	f7ff fa35 	bl	8005f6c <_fflush_r>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d0d9      	beq.n	8006aba <__swbuf_r+0x2e>
 8006b06:	e7d6      	b.n	8006ab6 <__swbuf_r+0x2a>

08006b08 <__swsetup_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	4b29      	ldr	r3, [pc, #164]	@ (8006bb0 <__swsetup_r+0xa8>)
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	460c      	mov	r4, r1
 8006b12:	b118      	cbz	r0, 8006b1c <__swsetup_r+0x14>
 8006b14:	6a03      	ldr	r3, [r0, #32]
 8006b16:	b90b      	cbnz	r3, 8006b1c <__swsetup_r+0x14>
 8006b18:	f7fc fcb0 	bl	800347c <__sinit>
 8006b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b20:	0719      	lsls	r1, r3, #28
 8006b22:	d422      	bmi.n	8006b6a <__swsetup_r+0x62>
 8006b24:	06da      	lsls	r2, r3, #27
 8006b26:	d407      	bmi.n	8006b38 <__swsetup_r+0x30>
 8006b28:	2209      	movs	r2, #9
 8006b2a:	602a      	str	r2, [r5, #0]
 8006b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	e033      	b.n	8006ba0 <__swsetup_r+0x98>
 8006b38:	0758      	lsls	r0, r3, #29
 8006b3a:	d512      	bpl.n	8006b62 <__swsetup_r+0x5a>
 8006b3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b3e:	b141      	cbz	r1, 8006b52 <__swsetup_r+0x4a>
 8006b40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b44:	4299      	cmp	r1, r3
 8006b46:	d002      	beq.n	8006b4e <__swsetup_r+0x46>
 8006b48:	4628      	mov	r0, r5
 8006b4a:	f7fd fc15 	bl	8004378 <_free_r>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b58:	81a3      	strh	r3, [r4, #12]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	6063      	str	r3, [r4, #4]
 8006b5e:	6923      	ldr	r3, [r4, #16]
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	89a3      	ldrh	r3, [r4, #12]
 8006b64:	f043 0308 	orr.w	r3, r3, #8
 8006b68:	81a3      	strh	r3, [r4, #12]
 8006b6a:	6923      	ldr	r3, [r4, #16]
 8006b6c:	b94b      	cbnz	r3, 8006b82 <__swsetup_r+0x7a>
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b78:	d003      	beq.n	8006b82 <__swsetup_r+0x7a>
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f000 f882 	bl	8006c86 <__smakebuf_r>
 8006b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b86:	f013 0201 	ands.w	r2, r3, #1
 8006b8a:	d00a      	beq.n	8006ba2 <__swsetup_r+0x9a>
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	60a2      	str	r2, [r4, #8]
 8006b90:	6962      	ldr	r2, [r4, #20]
 8006b92:	4252      	negs	r2, r2
 8006b94:	61a2      	str	r2, [r4, #24]
 8006b96:	6922      	ldr	r2, [r4, #16]
 8006b98:	b942      	cbnz	r2, 8006bac <__swsetup_r+0xa4>
 8006b9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b9e:	d1c5      	bne.n	8006b2c <__swsetup_r+0x24>
 8006ba0:	bd38      	pop	{r3, r4, r5, pc}
 8006ba2:	0799      	lsls	r1, r3, #30
 8006ba4:	bf58      	it	pl
 8006ba6:	6962      	ldrpl	r2, [r4, #20]
 8006ba8:	60a2      	str	r2, [r4, #8]
 8006baa:	e7f4      	b.n	8006b96 <__swsetup_r+0x8e>
 8006bac:	2000      	movs	r0, #0
 8006bae:	e7f7      	b.n	8006ba0 <__swsetup_r+0x98>
 8006bb0:	20000018 	.word	0x20000018

08006bb4 <_raise_r>:
 8006bb4:	291f      	cmp	r1, #31
 8006bb6:	b538      	push	{r3, r4, r5, lr}
 8006bb8:	4605      	mov	r5, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	d904      	bls.n	8006bc8 <_raise_r+0x14>
 8006bbe:	2316      	movs	r3, #22
 8006bc0:	6003      	str	r3, [r0, #0]
 8006bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc6:	bd38      	pop	{r3, r4, r5, pc}
 8006bc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006bca:	b112      	cbz	r2, 8006bd2 <_raise_r+0x1e>
 8006bcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006bd0:	b94b      	cbnz	r3, 8006be6 <_raise_r+0x32>
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 f830 	bl	8006c38 <_getpid_r>
 8006bd8:	4622      	mov	r2, r4
 8006bda:	4601      	mov	r1, r0
 8006bdc:	4628      	mov	r0, r5
 8006bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006be2:	f000 b817 	b.w	8006c14 <_kill_r>
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d00a      	beq.n	8006c00 <_raise_r+0x4c>
 8006bea:	1c59      	adds	r1, r3, #1
 8006bec:	d103      	bne.n	8006bf6 <_raise_r+0x42>
 8006bee:	2316      	movs	r3, #22
 8006bf0:	6003      	str	r3, [r0, #0]
 8006bf2:	2001      	movs	r0, #1
 8006bf4:	e7e7      	b.n	8006bc6 <_raise_r+0x12>
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006bfe:	4798      	blx	r3
 8006c00:	2000      	movs	r0, #0
 8006c02:	e7e0      	b.n	8006bc6 <_raise_r+0x12>

08006c04 <raise>:
 8006c04:	4b02      	ldr	r3, [pc, #8]	@ (8006c10 <raise+0xc>)
 8006c06:	4601      	mov	r1, r0
 8006c08:	6818      	ldr	r0, [r3, #0]
 8006c0a:	f7ff bfd3 	b.w	8006bb4 <_raise_r>
 8006c0e:	bf00      	nop
 8006c10:	20000018 	.word	0x20000018

08006c14 <_kill_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	2300      	movs	r3, #0
 8006c18:	4d06      	ldr	r5, [pc, #24]	@ (8006c34 <_kill_r+0x20>)
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	4611      	mov	r1, r2
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	f7fa f98c 	bl	8000f3e <_kill>
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	d102      	bne.n	8006c30 <_kill_r+0x1c>
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	b103      	cbz	r3, 8006c30 <_kill_r+0x1c>
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	bd38      	pop	{r3, r4, r5, pc}
 8006c32:	bf00      	nop
 8006c34:	20000368 	.word	0x20000368

08006c38 <_getpid_r>:
 8006c38:	f7fa b97a 	b.w	8000f30 <_getpid>

08006c3c <__swhatbuf_r>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	460c      	mov	r4, r1
 8006c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c44:	4615      	mov	r5, r2
 8006c46:	2900      	cmp	r1, #0
 8006c48:	461e      	mov	r6, r3
 8006c4a:	b096      	sub	sp, #88	@ 0x58
 8006c4c:	da0c      	bge.n	8006c68 <__swhatbuf_r+0x2c>
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	2100      	movs	r1, #0
 8006c52:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c56:	bf14      	ite	ne
 8006c58:	2340      	movne	r3, #64	@ 0x40
 8006c5a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c5e:	2000      	movs	r0, #0
 8006c60:	6031      	str	r1, [r6, #0]
 8006c62:	602b      	str	r3, [r5, #0]
 8006c64:	b016      	add	sp, #88	@ 0x58
 8006c66:	bd70      	pop	{r4, r5, r6, pc}
 8006c68:	466a      	mov	r2, sp
 8006c6a:	f000 f849 	bl	8006d00 <_fstat_r>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	dbed      	blt.n	8006c4e <__swhatbuf_r+0x12>
 8006c72:	9901      	ldr	r1, [sp, #4]
 8006c74:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c78:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c7c:	4259      	negs	r1, r3
 8006c7e:	4159      	adcs	r1, r3
 8006c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c84:	e7eb      	b.n	8006c5e <__swhatbuf_r+0x22>

08006c86 <__smakebuf_r>:
 8006c86:	898b      	ldrh	r3, [r1, #12]
 8006c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c8a:	079d      	lsls	r5, r3, #30
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	460c      	mov	r4, r1
 8006c90:	d507      	bpl.n	8006ca2 <__smakebuf_r+0x1c>
 8006c92:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	6123      	str	r3, [r4, #16]
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	6163      	str	r3, [r4, #20]
 8006c9e:	b003      	add	sp, #12
 8006ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ca2:	466a      	mov	r2, sp
 8006ca4:	ab01      	add	r3, sp, #4
 8006ca6:	f7ff ffc9 	bl	8006c3c <__swhatbuf_r>
 8006caa:	9f00      	ldr	r7, [sp, #0]
 8006cac:	4605      	mov	r5, r0
 8006cae:	4639      	mov	r1, r7
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f7fd fbd3 	bl	800445c <_malloc_r>
 8006cb6:	b948      	cbnz	r0, 8006ccc <__smakebuf_r+0x46>
 8006cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cbc:	059a      	lsls	r2, r3, #22
 8006cbe:	d4ee      	bmi.n	8006c9e <__smakebuf_r+0x18>
 8006cc0:	f023 0303 	bic.w	r3, r3, #3
 8006cc4:	f043 0302 	orr.w	r3, r3, #2
 8006cc8:	81a3      	strh	r3, [r4, #12]
 8006cca:	e7e2      	b.n	8006c92 <__smakebuf_r+0xc>
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cd6:	81a3      	strh	r3, [r4, #12]
 8006cd8:	9b01      	ldr	r3, [sp, #4]
 8006cda:	6020      	str	r0, [r4, #0]
 8006cdc:	b15b      	cbz	r3, 8006cf6 <__smakebuf_r+0x70>
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce4:	f000 f81e 	bl	8006d24 <_isatty_r>
 8006ce8:	b128      	cbz	r0, 8006cf6 <__smakebuf_r+0x70>
 8006cea:	89a3      	ldrh	r3, [r4, #12]
 8006cec:	f023 0303 	bic.w	r3, r3, #3
 8006cf0:	f043 0301 	orr.w	r3, r3, #1
 8006cf4:	81a3      	strh	r3, [r4, #12]
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	431d      	orrs	r5, r3
 8006cfa:	81a5      	strh	r5, [r4, #12]
 8006cfc:	e7cf      	b.n	8006c9e <__smakebuf_r+0x18>
	...

08006d00 <_fstat_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	2300      	movs	r3, #0
 8006d04:	4d06      	ldr	r5, [pc, #24]	@ (8006d20 <_fstat_r+0x20>)
 8006d06:	4604      	mov	r4, r0
 8006d08:	4608      	mov	r0, r1
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	602b      	str	r3, [r5, #0]
 8006d0e:	f7fa f975 	bl	8000ffc <_fstat>
 8006d12:	1c43      	adds	r3, r0, #1
 8006d14:	d102      	bne.n	8006d1c <_fstat_r+0x1c>
 8006d16:	682b      	ldr	r3, [r5, #0]
 8006d18:	b103      	cbz	r3, 8006d1c <_fstat_r+0x1c>
 8006d1a:	6023      	str	r3, [r4, #0]
 8006d1c:	bd38      	pop	{r3, r4, r5, pc}
 8006d1e:	bf00      	nop
 8006d20:	20000368 	.word	0x20000368

08006d24 <_isatty_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	2300      	movs	r3, #0
 8006d28:	4d05      	ldr	r5, [pc, #20]	@ (8006d40 <_isatty_r+0x1c>)
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	4608      	mov	r0, r1
 8006d2e:	602b      	str	r3, [r5, #0]
 8006d30:	f7fa f973 	bl	800101a <_isatty>
 8006d34:	1c43      	adds	r3, r0, #1
 8006d36:	d102      	bne.n	8006d3e <_isatty_r+0x1a>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	b103      	cbz	r3, 8006d3e <_isatty_r+0x1a>
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}
 8006d40:	20000368 	.word	0x20000368

08006d44 <_init>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr

08006d50 <_fini>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr
