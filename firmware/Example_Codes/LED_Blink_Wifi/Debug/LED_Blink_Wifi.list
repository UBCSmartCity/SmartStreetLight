
LED_Blink_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008764  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08008878  08008878  00009878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e50  08008e50  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008e50  08008e50  00009e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e58  08008e58  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e58  08008e58  00009e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e5c  08008e5c  00009e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008e60  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001d4  08009034  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08009034  0000a44c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6fe  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d4  00000000  00000000  000178fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00019ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aec  00000000  00000000  0001a8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019141  00000000  00000000  0001b3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011092  00000000  00000000  000344fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009119f  00000000  00000000  0004558f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d672e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fa0  00000000  00000000  000d6774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000db714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800885c 	.word	0x0800885c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800885c 	.word	0x0800885c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b5b0      	push	{r4, r5, r7, lr}
 8000bd6:	f5ad 6df1 	sub.w	sp, sp, #1928	@ 0x788
 8000bda:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bdc:	f001 f818 	bl	8001c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be0:	f000 fc1c 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be4:	f000 fd48 	bl	8001678 <MX_GPIO_Init>
  MX_DMA_Init();
 8000be8:	f000 fd28 	bl	800163c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000bec:	f000 fcfc 	bl	80015e8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000bf0:	f000 fca2 	bl	8001538 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000bf4:	f000 fc62 	bl	80014bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8000bf8:	48c8      	ldr	r0, [pc, #800]	@ (8000f1c <main+0x348>)
 8000bfa:	f001 f967 	bl	8001ecc <HAL_ADC_Start>

   uint8_t rxBuffer[512] = {0};
 8000bfe:	f507 63f0 	add.w	r3, r7, #1920	@ 0x780
 8000c02:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f004 fa37 	bl	8005086 <memset>
   uint8_t ATisOK;
   int channel;
   int onoff;
   int led = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 3770 	str.w	r3, [r7, #1904]	@ 0x770
   int n=50*24; //no. of leds
 8000c1e:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000c22:	f8c7 3760 	str.w	r3, [r7, #1888]	@ 0x760
   char ATcommand[64];
   char ATcommandB[1024];
   char ATcommandN[100];
   char ATcommandF[100];
   char ATcommandT[64];
   float battery_status = 0;
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	f8c7 376c 	str.w	r3, [r7, #1900]	@ 0x76c
   float energy_usage = 0;
 8000c2e:	f04f 0300 	mov.w	r3, #0
 8000c32:	f8c7 375c 	str.w	r3, [r7, #1884]	@ 0x75c
   float brightness_level = 0;
 8000c36:	f04f 0300 	mov.w	r3, #0
 8000c3a:	f8c7 3768 	str.w	r3, [r7, #1896]	@ 0x768
   int sensor_health = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c7 3758 	str.w	r3, [r7, #1880]	@ 0x758
   float power_consumption = 0;
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
   </p><a class=\"button button-off\" href=\"/lightoff\">OFF</a>");
   sprintf(ATcommandF,"<p>Light is currently off\
   </p><a class=\"button button-on\" href=\"/lighton\">ON</a>");
   sprintf(ATcommandT,"</body></html>");*/

   sprintf(ATcommandB,"energy_usage: %f, light_status: OFF,brightness_level: %f,",energy_usage ,brightness_level);
 8000c4c:	f8d7 075c 	ldr.w	r0, [r7, #1884]	@ 0x75c
 8000c50:	f7ff fbea 	bl	8000428 <__aeabi_f2d>
 8000c54:	4604      	mov	r4, r0
 8000c56:	460d      	mov	r5, r1
 8000c58:	f8d7 0768 	ldr.w	r0, [r7, #1896]	@ 0x768
 8000c5c:	f7ff fbe4 	bl	8000428 <__aeabi_f2d>
 8000c60:	4602      	mov	r2, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8000c68:	e9cd 2300 	strd	r2, r3, [sp]
 8000c6c:	4622      	mov	r2, r4
 8000c6e:	462b      	mov	r3, r5
 8000c70:	49ab      	ldr	r1, [pc, #684]	@ (8000f20 <main+0x34c>)
 8000c72:	f004 f9a5 	bl	8004fc0 <siprintf>
   sprintf(ATcommandN,"power_consumption: %f, battery_status: %f, sensor_health: Excellent,",power_consumption, battery_status);
 8000c76:	f8d7 0764 	ldr.w	r0, [r7, #1892]	@ 0x764
 8000c7a:	f7ff fbd5 	bl	8000428 <__aeabi_f2d>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f8d7 076c 	ldr.w	r0, [r7, #1900]	@ 0x76c
 8000c86:	f7ff fbcf 	bl	8000428 <__aeabi_f2d>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8000c92:	e9cd 2300 	strd	r2, r3, [sp]
 8000c96:	4622      	mov	r2, r4
 8000c98:	462b      	mov	r3, r5
 8000c9a:	49a2      	ldr	r1, [pc, #648]	@ (8000f24 <main+0x350>)
 8000c9c:	f004 f990 	bl	8004fc0 <siprintf>
   sprintf(ATcommandF,"33");
 8000ca0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ca4:	49a0      	ldr	r1, [pc, #640]	@ (8000f28 <main+0x354>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f004 f98a 	bl	8004fc0 <siprintf>
   sprintf(ATcommandT," location: UBC ESC 208");
 8000cac:	463b      	mov	r3, r7
 8000cae:	499f      	ldr	r1, [pc, #636]	@ (8000f2c <main+0x358>)
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 f985 	bl	8004fc0 <siprintf>


   int countB = strlen(ATcommandB);
 8000cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fa48 	bl	8000150 <strlen>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f8c7 3754 	str.w	r3, [r7, #1876]	@ 0x754
   int countN = strlen(ATcommandN);
 8000cc6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fa40 	bl	8000150 <strlen>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f8c7 3750 	str.w	r3, [r7, #1872]	@ 0x750
   int countF = strlen(ATcommandF);
 8000cd6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fa38 	bl	8000150 <strlen>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f8c7 374c 	str.w	r3, [r7, #1868]	@ 0x74c
   int countT = strlen(ATcommandT);
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fa31 	bl	8000150 <strlen>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f8c7 3748 	str.w	r3, [r7, #1864]	@ 0x748

   sprintf(ATcommand,"AT+RST\r\n");
 8000cf4:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8000cf8:	498d      	ldr	r1, [pc, #564]	@ (8000f30 <main+0x35c>)
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 f960 	bl	8004fc0 <siprintf>
   memset(rxBuffer,0,sizeof(rxBuffer));
 8000d00:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8000d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f004 f9bb 	bl	8005086 <memset>
   HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000d10:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fa1b 	bl	8000150 <strlen>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	f507 61a1 	add.w	r1, r7, #1288	@ 0x508
 8000d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d26:	4883      	ldr	r0, [pc, #524]	@ (8000f34 <main+0x360>)
 8000d28:	f002 ffb0 	bl	8003c8c <HAL_UART_Transmit>
   HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000d2c:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 8000d30:	2364      	movs	r3, #100	@ 0x64
 8000d32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d36:	487f      	ldr	r0, [pc, #508]	@ (8000f34 <main+0x360>)
 8000d38:	f003 f833 	bl	8003da2 <HAL_UART_Receive>
   HAL_Delay(500);
 8000d3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d40:	f000 ffc8 	bl	8001cd4 <HAL_Delay>

   ATisOK = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 377f 	strb.w	r3, [r7, #1919]	@ 0x77f
   while(!ATisOK){
 8000d4a:	e034      	b.n	8000db6 <main+0x1e2>
     sprintf(ATcommand,"AT+CWJAP=\"Testing\",\"12346789\"\r\n");
 8000d4c:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8000d50:	4979      	ldr	r1, [pc, #484]	@ (8000f38 <main+0x364>)
 8000d52:	4618      	mov	r0, r3
 8000d54:	f004 f934 	bl	8004fc0 <siprintf>
     memset(rxBuffer,0,sizeof(rxBuffer));
 8000d58:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8000d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f004 f98f 	bl	8005086 <memset>
     HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000d68:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff f9ef 	bl	8000150 <strlen>
 8000d72:	4603      	mov	r3, r0
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	f507 61a1 	add.w	r1, r7, #1288	@ 0x508
 8000d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d7e:	486d      	ldr	r0, [pc, #436]	@ (8000f34 <main+0x360>)
 8000d80:	f002 ff84 	bl	8003c8c <HAL_UART_Transmit>
     HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 8000d84:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 8000d88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d90:	4868      	ldr	r0, [pc, #416]	@ (8000f34 <main+0x360>)
 8000d92:	f003 f806 	bl	8003da2 <HAL_UART_Receive>
     if(strstr((char *)rxBuffer,"OK")){
 8000d96:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8000d9a:	4968      	ldr	r1, [pc, #416]	@ (8000f3c <main+0x368>)
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f004 f987 	bl	80050b0 <strstr>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <main+0x1da>
       ATisOK = 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	f887 377f 	strb.w	r3, [r7, #1919]	@ 0x77f
     }
     HAL_Delay(500);
 8000dae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000db2:	f000 ff8f 	bl	8001cd4 <HAL_Delay>
   while(!ATisOK){
 8000db6:	f897 377f 	ldrb.w	r3, [r7, #1919]	@ 0x77f
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0c6      	beq.n	8000d4c <main+0x178>
   }


   ATisOK = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 377f 	strb.w	r3, [r7, #1919]	@ 0x77f
   while(!ATisOK){
 8000dc4:	e034      	b.n	8000e30 <main+0x25c>
     sprintf(ATcommand,"AT+CIPMUX=1\r\n");
 8000dc6:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8000dca:	495d      	ldr	r1, [pc, #372]	@ (8000f40 <main+0x36c>)
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f004 f8f7 	bl	8004fc0 <siprintf>
       memset(rxBuffer,0,sizeof(rxBuffer));
 8000dd2:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8000dd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 f952 	bl	8005086 <memset>
       HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000de2:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff f9b2 	bl	8000150 <strlen>
 8000dec:	4603      	mov	r3, r0
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	f507 61a1 	add.w	r1, r7, #1288	@ 0x508
 8000df4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df8:	484e      	ldr	r0, [pc, #312]	@ (8000f34 <main+0x360>)
 8000dfa:	f002 ff47 	bl	8003c8c <HAL_UART_Transmit>
       HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 8000dfe:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 8000e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e0a:	484a      	ldr	r0, [pc, #296]	@ (8000f34 <main+0x360>)
 8000e0c:	f002 ffc9 	bl	8003da2 <HAL_UART_Receive>
       if(strstr((char *)rxBuffer,"OK")){
 8000e10:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8000e14:	4949      	ldr	r1, [pc, #292]	@ (8000f3c <main+0x368>)
 8000e16:	4618      	mov	r0, r3
 8000e18:	f004 f94a 	bl	80050b0 <strstr>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <main+0x254>
         ATisOK = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f887 377f 	strb.w	r3, [r7, #1919]	@ 0x77f
       }
       HAL_Delay(500);
 8000e28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e2c:	f000 ff52 	bl	8001cd4 <HAL_Delay>
   while(!ATisOK){
 8000e30:	f897 377f 	ldrb.w	r3, [r7, #1919]	@ 0x77f
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0c6      	beq.n	8000dc6 <main+0x1f2>
   }

   ATisOK = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 377f 	strb.w	r3, [r7, #1919]	@ 0x77f
   while(!ATisOK){
 8000e3e:	e034      	b.n	8000eaa <main+0x2d6>
     sprintf(ATcommand,"AT+CIPSERVER=1,80\r\n");
 8000e40:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8000e44:	493f      	ldr	r1, [pc, #252]	@ (8000f44 <main+0x370>)
 8000e46:	4618      	mov	r0, r3
 8000e48:	f004 f8ba 	bl	8004fc0 <siprintf>
     memset(rxBuffer,0,sizeof(rxBuffer));
 8000e4c:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8000e50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f004 f915 	bl	8005086 <memset>
     HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000e5c:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff f975 	bl	8000150 <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	f507 61a1 	add.w	r1, r7, #1288	@ 0x508
 8000e6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e72:	4830      	ldr	r0, [pc, #192]	@ (8000f34 <main+0x360>)
 8000e74:	f002 ff0a 	bl	8003c8c <HAL_UART_Transmit>
     HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 8000e78:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 8000e7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e84:	482b      	ldr	r0, [pc, #172]	@ (8000f34 <main+0x360>)
 8000e86:	f002 ff8c 	bl	8003da2 <HAL_UART_Receive>
     if(strstr((char *)rxBuffer,"OK")){
 8000e8a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8000e8e:	492b      	ldr	r1, [pc, #172]	@ (8000f3c <main+0x368>)
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 f90d 	bl	80050b0 <strstr>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d002      	beq.n	8000ea2 <main+0x2ce>
         ATisOK = 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	f887 377f 	strb.w	r3, [r7, #1919]	@ 0x77f
     }
     HAL_Delay(500);
 8000ea2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ea6:	f000 ff15 	bl	8001cd4 <HAL_Delay>
   while(!ATisOK){
 8000eaa:	f897 377f 	ldrb.w	r3, [r7, #1919]	@ 0x77f
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0c6      	beq.n	8000e40 <main+0x26c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
      if (data > 3500 ){
 8000eb2:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <main+0x374>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	dd02      	ble.n	8000ec4 <main+0x2f0>

    	  battery_status = 3.3;
 8000ebe:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <main+0x378>)
 8000ec0:	f8c7 376c 	str.w	r3, [r7, #1900]	@ 0x76c

			//HAL_Delay(250);
	  }

      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET)
 8000ec4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ec8:	4821      	ldr	r0, [pc, #132]	@ (8000f50 <main+0x37c>)
 8000eca:	f001 fe33 	bl	8002b34 <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d104      	bne.n	8000ede <main+0x30a>
     	   		{
     	   		battery_status = 0 ;
 8000ed4:	f04f 0300 	mov.w	r3, #0
 8000ed8:	f8c7 376c 	str.w	r3, [r7, #1900]	@ 0x76c
 8000edc:	e002      	b.n	8000ee4 <main+0x310>
     	   		}
     else
     	   		{
    	 	 battery_status = 3.3;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <main+0x378>)
 8000ee0:	f8c7 376c 	str.w	r3, [r7, #1900]	@ 0x76c
     	   		}

      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET)
 8000ee4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ee8:	4819      	ldr	r0, [pc, #100]	@ (8000f50 <main+0x37c>)
 8000eea:	f001 fe23 	bl	8002b34 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d103      	bne.n	8000efc <main+0x328>
     	   		{
     	   		power_consumption = 10 ;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <main+0x380>)
 8000ef6:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
 8000efa:	e002      	b.n	8000f02 <main+0x32e>
     	   		}
     else
     	   		{
	   			power_consumption = 100 ;
 8000efc:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <main+0x384>)
 8000efe:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
     	   		}


      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000f02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f06:	4812      	ldr	r0, [pc, #72]	@ (8000f50 <main+0x37c>)
 8000f08:	f001 fe14 	bl	8002b34 <HAL_GPIO_ReadPin>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d124      	bne.n	8000f5c <main+0x388>
     	   		{
     	   		brightness_level = 0 ;
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	f8c7 3768 	str.w	r3, [r7, #1896]	@ 0x768
 8000f1a:	e022      	b.n	8000f62 <main+0x38e>
 8000f1c:	200001f0 	.word	0x200001f0
 8000f20:	08008878 	.word	0x08008878
 8000f24:	080088b4 	.word	0x080088b4
 8000f28:	080088fc 	.word	0x080088fc
 8000f2c:	08008900 	.word	0x08008900
 8000f30:	08008918 	.word	0x08008918
 8000f34:	200002ac 	.word	0x200002ac
 8000f38:	08008924 	.word	0x08008924
 8000f3c:	08008944 	.word	0x08008944
 8000f40:	08008948 	.word	0x08008948
 8000f44:	08008958 	.word	0x08008958
 8000f48:	200002f4 	.word	0x200002f4
 8000f4c:	40533333 	.word	0x40533333
 8000f50:	40010c00 	.word	0x40010c00
 8000f54:	41200000 	.word	0x41200000
 8000f58:	42c80000 	.word	0x42c80000
     	   		}
     else
     	   		{
    	 	 	 brightness_level = 53 ;
 8000f5c:	4bc8      	ldr	r3, [pc, #800]	@ (8001280 <main+0x6ac>)
 8000f5e:	f8c7 3768 	str.w	r3, [r7, #1896]	@ 0x768
     	   		}

      sprintf(ATcommandB,"energy_usage: %f, light_status: OFF,brightness_level: %f,",energy_usage ,brightness_level);
 8000f62:	f8d7 075c 	ldr.w	r0, [r7, #1884]	@ 0x75c
 8000f66:	f7ff fa5f 	bl	8000428 <__aeabi_f2d>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	460d      	mov	r5, r1
 8000f6e:	f8d7 0768 	ldr.w	r0, [r7, #1896]	@ 0x768
 8000f72:	f7ff fa59 	bl	8000428 <__aeabi_f2d>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8000f7e:	e9cd 2300 	strd	r2, r3, [sp]
 8000f82:	4622      	mov	r2, r4
 8000f84:	462b      	mov	r3, r5
 8000f86:	49bf      	ldr	r1, [pc, #764]	@ (8001284 <main+0x6b0>)
 8000f88:	f004 f81a 	bl	8004fc0 <siprintf>
      sprintf(ATcommandN,"power_consumption: %f, battery_status: %f, sensor_health: Excellent,",power_consumption, battery_status);
 8000f8c:	f8d7 0764 	ldr.w	r0, [r7, #1892]	@ 0x764
 8000f90:	f7ff fa4a 	bl	8000428 <__aeabi_f2d>
 8000f94:	4604      	mov	r4, r0
 8000f96:	460d      	mov	r5, r1
 8000f98:	f8d7 076c 	ldr.w	r0, [r7, #1900]	@ 0x76c
 8000f9c:	f7ff fa44 	bl	8000428 <__aeabi_f2d>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8000fa8:	e9cd 2300 	strd	r2, r3, [sp]
 8000fac:	4622      	mov	r2, r4
 8000fae:	462b      	mov	r3, r5
 8000fb0:	49b5      	ldr	r1, [pc, #724]	@ (8001288 <main+0x6b4>)
 8000fb2:	f004 f805 	bl	8004fc0 <siprintf>
      sprintf(ATcommandF,"33");
 8000fb6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fba:	49b4      	ldr	r1, [pc, #720]	@ (800128c <main+0x6b8>)
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 ffff 	bl	8004fc0 <siprintf>
      sprintf(ATcommandT," location: UBC ESC 208");
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	49b2      	ldr	r1, [pc, #712]	@ (8001290 <main+0x6bc>)
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f003 fffa 	bl	8004fc0 <siprintf>

      countB = strlen(ATcommandB);
 8000fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f8bd 	bl	8000150 <strlen>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	f8c7 3754 	str.w	r3, [r7, #1876]	@ 0x754
      countN = strlen(ATcommandN);
 8000fdc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff f8b5 	bl	8000150 <strlen>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f8c7 3750 	str.w	r3, [r7, #1872]	@ 0x750
      countF = strlen(ATcommandF);
 8000fec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8ad 	bl	8000150 <strlen>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f8c7 374c 	str.w	r3, [r7, #1868]	@ 0x74c
      countT = strlen(ATcommandT);
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f8a6 	bl	8000150 <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	f8c7 3748 	str.w	r3, [r7, #1864]	@ 0x748

	  memset(rxBuffer,0,sizeof(rxBuffer));
 800100a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800100e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f004 f836 	bl	8005086 <memset>
	      HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 800101a:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 800101e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001026:	489b      	ldr	r0, [pc, #620]	@ (8001294 <main+0x6c0>)
 8001028:	f002 febb 	bl	8003da2 <HAL_UART_Receive>
	      if(strstr((char *)rxBuffer,"+IPD,0")) channel = 0;
 800102c:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8001030:	4999      	ldr	r1, [pc, #612]	@ (8001298 <main+0x6c4>)
 8001032:	4618      	mov	r0, r3
 8001034:	f004 f83c 	bl	80050b0 <strstr>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <main+0x472>
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 3778 	str.w	r3, [r7, #1912]	@ 0x778
 8001044:	e05d      	b.n	8001102 <main+0x52e>
	      else if(strstr((char *)rxBuffer,"+IPD,1")) channel = 1;
 8001046:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800104a:	4994      	ldr	r1, [pc, #592]	@ (800129c <main+0x6c8>)
 800104c:	4618      	mov	r0, r3
 800104e:	f004 f82f 	bl	80050b0 <strstr>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <main+0x48c>
 8001058:	2301      	movs	r3, #1
 800105a:	f8c7 3778 	str.w	r3, [r7, #1912]	@ 0x778
 800105e:	e050      	b.n	8001102 <main+0x52e>
	      else if(strstr((char *)rxBuffer,"+IPD,2")) channel = 2;
 8001060:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8001064:	498e      	ldr	r1, [pc, #568]	@ (80012a0 <main+0x6cc>)
 8001066:	4618      	mov	r0, r3
 8001068:	f004 f822 	bl	80050b0 <strstr>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <main+0x4a6>
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 3778 	str.w	r3, [r7, #1912]	@ 0x778
 8001078:	e043      	b.n	8001102 <main+0x52e>
	      else if(strstr((char *)rxBuffer,"+IPD,3")) channel = 3;
 800107a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800107e:	4989      	ldr	r1, [pc, #548]	@ (80012a4 <main+0x6d0>)
 8001080:	4618      	mov	r0, r3
 8001082:	f004 f815 	bl	80050b0 <strstr>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <main+0x4c0>
 800108c:	2303      	movs	r3, #3
 800108e:	f8c7 3778 	str.w	r3, [r7, #1912]	@ 0x778
 8001092:	e036      	b.n	8001102 <main+0x52e>
	      else if(strstr((char *)rxBuffer,"+IPD,4")) channel = 4;
 8001094:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8001098:	4983      	ldr	r1, [pc, #524]	@ (80012a8 <main+0x6d4>)
 800109a:	4618      	mov	r0, r3
 800109c:	f004 f808 	bl	80050b0 <strstr>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <main+0x4da>
 80010a6:	2304      	movs	r3, #4
 80010a8:	f8c7 3778 	str.w	r3, [r7, #1912]	@ 0x778
 80010ac:	e029      	b.n	8001102 <main+0x52e>
	      else if(strstr((char *)rxBuffer,"+IPD,5")) channel = 5;
 80010ae:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80010b2:	497e      	ldr	r1, [pc, #504]	@ (80012ac <main+0x6d8>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 fffb 	bl	80050b0 <strstr>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <main+0x4f4>
 80010c0:	2305      	movs	r3, #5
 80010c2:	f8c7 3778 	str.w	r3, [r7, #1912]	@ 0x778
 80010c6:	e01c      	b.n	8001102 <main+0x52e>
	      else if(strstr((char *)rxBuffer,"+IPD,6")) channel = 6;
 80010c8:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80010cc:	4978      	ldr	r1, [pc, #480]	@ (80012b0 <main+0x6dc>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f003 ffee 	bl	80050b0 <strstr>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <main+0x50e>
 80010da:	2306      	movs	r3, #6
 80010dc:	f8c7 3778 	str.w	r3, [r7, #1912]	@ 0x778
 80010e0:	e00f      	b.n	8001102 <main+0x52e>
	      else if(strstr((char *)rxBuffer,"+IPD,7")) channel = 7;
 80010e2:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80010e6:	4973      	ldr	r1, [pc, #460]	@ (80012b4 <main+0x6e0>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 ffe1 	bl	80050b0 <strstr>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <main+0x528>
 80010f4:	2307      	movs	r3, #7
 80010f6:	f8c7 3778 	str.w	r3, [r7, #1912]	@ 0x778
 80010fa:	e002      	b.n	8001102 <main+0x52e>
	      else channel = 100;
 80010fc:	2364      	movs	r3, #100	@ 0x64
 80010fe:	f8c7 3778 	str.w	r3, [r7, #1912]	@ 0x778

	      if(strstr((char *)rxBuffer,"GET /lighton")) onoff = 0;
 8001102:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8001106:	496c      	ldr	r1, [pc, #432]	@ (80012b8 <main+0x6e4>)
 8001108:	4618      	mov	r0, r3
 800110a:	f003 ffd1 	bl	80050b0 <strstr>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <main+0x548>
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 3774 	str.w	r3, [r7, #1908]	@ 0x774
 800111a:	e010      	b.n	800113e <main+0x56a>
	      else if(strstr((char *)rxBuffer,"GET /lightoff")) onoff = 1;
 800111c:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8001120:	4966      	ldr	r1, [pc, #408]	@ (80012bc <main+0x6e8>)
 8001122:	4618      	mov	r0, r3
 8001124:	f003 ffc4 	bl	80050b0 <strstr>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <main+0x562>
 800112e:	2301      	movs	r3, #1
 8001130:	f8c7 3774 	str.w	r3, [r7, #1908]	@ 0x774
 8001134:	e003      	b.n	800113e <main+0x56a>
	      else onoff = led;
 8001136:	f8d7 3770 	ldr.w	r3, [r7, #1904]	@ 0x770
 800113a:	f8c7 3774 	str.w	r3, [r7, #1908]	@ 0x774

	      if(channel<8 && onoff == 1)
 800113e:	f8d7 3778 	ldr.w	r3, [r7, #1912]	@ 0x778
 8001142:	2b07      	cmp	r3, #7
 8001144:	f300 80c2 	bgt.w	80012cc <main+0x6f8>
 8001148:	f8d7 3774 	ldr.w	r3, [r7, #1908]	@ 0x774
 800114c:	2b01      	cmp	r3, #1
 800114e:	f040 80bd 	bne.w	80012cc <main+0x6f8>
	      {
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001158:	4859      	ldr	r0, [pc, #356]	@ (80012c0 <main+0x6ec>)
 800115a:	f001 fd02 	bl	8002b62 <HAL_GPIO_WritePin>
	        led = 1;
 800115e:	2301      	movs	r3, #1
 8001160:	f8c7 3770 	str.w	r3, [r7, #1904]	@ 0x770
	         ws2812Send();
	         setLED(6, 255, 255, 255); // Specific color
	         ws2812Send();
	         */

	        sprintf(ATcommand,"AT+CIPSEND=%d,%d\r\n",channel,countB+countF+countT);
 8001164:	f8d7 2754 	ldr.w	r2, [r7, #1876]	@ 0x754
 8001168:	f8d7 374c 	ldr.w	r3, [r7, #1868]	@ 0x74c
 800116c:	441a      	add	r2, r3
 800116e:	f8d7 3748 	ldr.w	r3, [r7, #1864]	@ 0x748
 8001172:	4413      	add	r3, r2
 8001174:	f507 60a1 	add.w	r0, r7, #1288	@ 0x508
 8001178:	f8d7 2778 	ldr.w	r2, [r7, #1912]	@ 0x778
 800117c:	4951      	ldr	r1, [pc, #324]	@ (80012c4 <main+0x6f0>)
 800117e:	f003 ff1f 	bl	8004fc0 <siprintf>
	        memset(rxBuffer,0,sizeof(rxBuffer));
 8001182:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8001186:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f003 ff7a 	bl	8005086 <memset>
	        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8001192:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8001196:	4618      	mov	r0, r3
 8001198:	f7fe ffda 	bl	8000150 <strlen>
 800119c:	4603      	mov	r3, r0
 800119e:	b29a      	uxth	r2, r3
 80011a0:	f507 61a1 	add.w	r1, r7, #1288	@ 0x508
 80011a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a8:	483a      	ldr	r0, [pc, #232]	@ (8001294 <main+0x6c0>)
 80011aa:	f002 fd6f 	bl	8003c8c <HAL_UART_Transmit>
	        HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 80011ae:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 80011b2:	2364      	movs	r3, #100	@ 0x64
 80011b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b8:	4836      	ldr	r0, [pc, #216]	@ (8001294 <main+0x6c0>)
 80011ba:	f002 fdf2 	bl	8003da2 <HAL_UART_Receive>
	        if(strstr((char *)rxBuffer,">"))
 80011be:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80011c2:	213e      	movs	r1, #62	@ 0x3e
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 ff66 	bl	8005096 <strchr>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d02c      	beq.n	800122a <main+0x656>
	        {
	          memset(rxBuffer,0,sizeof(rxBuffer));
 80011d0:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80011d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 ff53 	bl	8005086 <memset>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandB,countB,1000);
 80011e0:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80011ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ee:	4829      	ldr	r0, [pc, #164]	@ (8001294 <main+0x6c0>)
 80011f0:	f002 fd4c 	bl	8003c8c <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandF,countF,1000);
 80011f4:	f8d7 374c 	ldr.w	r3, [r7, #1868]	@ 0x74c
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80011fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001202:	4824      	ldr	r0, [pc, #144]	@ (8001294 <main+0x6c0>)
 8001204:	f002 fd42 	bl	8003c8c <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandT,countT,1000);
 8001208:	f8d7 3748 	ldr.w	r3, [r7, #1864]	@ 0x748
 800120c:	b29a      	uxth	r2, r3
 800120e:	4639      	mov	r1, r7
 8001210:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001214:	481f      	ldr	r0, [pc, #124]	@ (8001294 <main+0x6c0>)
 8001216:	f002 fd39 	bl	8003c8c <HAL_UART_Transmit>
	           HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 800121a:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 800121e:	2364      	movs	r3, #100	@ 0x64
 8001220:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001224:	481b      	ldr	r0, [pc, #108]	@ (8001294 <main+0x6c0>)
 8001226:	f002 fdbc 	bl	8003da2 <HAL_UART_Receive>
	        }
	        sprintf(ATcommand,"AT+CIPCLOSE=%d\r\n",channel);
 800122a:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 800122e:	f8d7 2778 	ldr.w	r2, [r7, #1912]	@ 0x778
 8001232:	4925      	ldr	r1, [pc, #148]	@ (80012c8 <main+0x6f4>)
 8001234:	4618      	mov	r0, r3
 8001236:	f003 fec3 	bl	8004fc0 <siprintf>
	        memset(rxBuffer,0,sizeof(rxBuffer));
 800123a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800123e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f003 ff1e 	bl	8005086 <memset>
	        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800124a:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 800124e:	4618      	mov	r0, r3
 8001250:	f7fe ff7e 	bl	8000150 <strlen>
 8001254:	4603      	mov	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	f507 61a1 	add.w	r1, r7, #1288	@ 0x508
 800125c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <main+0x6c0>)
 8001262:	f002 fd13 	bl	8003c8c <HAL_UART_Transmit>
	        HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8001266:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 800126a:	2364      	movs	r3, #100	@ 0x64
 800126c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001270:	4808      	ldr	r0, [pc, #32]	@ (8001294 <main+0x6c0>)
 8001272:	f002 fd96 	bl	8003da2 <HAL_UART_Receive>
	        channel=100;
 8001276:	2364      	movs	r3, #100	@ 0x64
 8001278:	f8c7 3778 	str.w	r3, [r7, #1912]	@ 0x778
 800127c:	e0c5      	b.n	800140a <main+0x836>
 800127e:	bf00      	nop
 8001280:	42540000 	.word	0x42540000
 8001284:	08008878 	.word	0x08008878
 8001288:	080088b4 	.word	0x080088b4
 800128c:	080088fc 	.word	0x080088fc
 8001290:	08008900 	.word	0x08008900
 8001294:	200002ac 	.word	0x200002ac
 8001298:	0800896c 	.word	0x0800896c
 800129c:	08008974 	.word	0x08008974
 80012a0:	0800897c 	.word	0x0800897c
 80012a4:	08008984 	.word	0x08008984
 80012a8:	0800898c 	.word	0x0800898c
 80012ac:	08008994 	.word	0x08008994
 80012b0:	0800899c 	.word	0x0800899c
 80012b4:	080089a4 	.word	0x080089a4
 80012b8:	080089ac 	.word	0x080089ac
 80012bc:	080089bc 	.word	0x080089bc
 80012c0:	40011000 	.word	0x40011000
 80012c4:	080089cc 	.word	0x080089cc
 80012c8:	080089e0 	.word	0x080089e0
	      }
	      else if(channel<8 && onoff == 0)
 80012cc:	f8d7 3778 	ldr.w	r3, [r7, #1912]	@ 0x778
 80012d0:	2b07      	cmp	r3, #7
 80012d2:	f73f adee 	bgt.w	8000eb2 <main+0x2de>
 80012d6:	f8d7 3774 	ldr.w	r3, [r7, #1908]	@ 0x774
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f47f ade9 	bne.w	8000eb2 <main+0x2de>
	      {
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012e6:	4849      	ldr	r0, [pc, #292]	@ (800140c <main+0x838>)
 80012e8:	f001 fc3b 	bl	8002b62 <HAL_GPIO_WritePin>
	        led = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 3770 	str.w	r3, [r7, #1904]	@ 0x770
	        HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
	        HAL_Delay (500);*/



	        sprintf(ATcommand,"AT+CIPSEND=%d,%d\r\n",channel,countB+countN+countT);
 80012f2:	f8d7 2754 	ldr.w	r2, [r7, #1876]	@ 0x754
 80012f6:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 80012fa:	441a      	add	r2, r3
 80012fc:	f8d7 3748 	ldr.w	r3, [r7, #1864]	@ 0x748
 8001300:	4413      	add	r3, r2
 8001302:	f507 60a1 	add.w	r0, r7, #1288	@ 0x508
 8001306:	f8d7 2778 	ldr.w	r2, [r7, #1912]	@ 0x778
 800130a:	4941      	ldr	r1, [pc, #260]	@ (8001410 <main+0x83c>)
 800130c:	f003 fe58 	bl	8004fc0 <siprintf>
	        memset(rxBuffer,0,sizeof(rxBuffer));
 8001310:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8001314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f003 feb3 	bl	8005086 <memset>
	        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8001320:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8001324:	4618      	mov	r0, r3
 8001326:	f7fe ff13 	bl	8000150 <strlen>
 800132a:	4603      	mov	r3, r0
 800132c:	b29a      	uxth	r2, r3
 800132e:	f507 61a1 	add.w	r1, r7, #1288	@ 0x508
 8001332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001336:	4837      	ldr	r0, [pc, #220]	@ (8001414 <main+0x840>)
 8001338:	f002 fca8 	bl	8003c8c <HAL_UART_Transmit>
	        HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 800133c:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 8001340:	2364      	movs	r3, #100	@ 0x64
 8001342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001346:	4833      	ldr	r0, [pc, #204]	@ (8001414 <main+0x840>)
 8001348:	f002 fd2b 	bl	8003da2 <HAL_UART_Receive>
	        if(strstr((char *)rxBuffer,">"))
 800134c:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8001350:	213e      	movs	r1, #62	@ 0x3e
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fe9f 	bl	8005096 <strchr>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d02c      	beq.n	80013b8 <main+0x7e4>
	        {
	          memset(rxBuffer,0,sizeof(rxBuffer));
 800135e:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8001362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f003 fe8c 	bl	8005086 <memset>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandB,countB,1000);
 800136e:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8001372:	b29a      	uxth	r2, r3
 8001374:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8001378:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800137c:	4825      	ldr	r0, [pc, #148]	@ (8001414 <main+0x840>)
 800137e:	f002 fc85 	bl	8003c8c <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandN,countN,1000);
 8001382:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8001386:	b29a      	uxth	r2, r3
 8001388:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800138c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001390:	4820      	ldr	r0, [pc, #128]	@ (8001414 <main+0x840>)
 8001392:	f002 fc7b 	bl	8003c8c <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandT,countT,1000);
 8001396:	f8d7 3748 	ldr.w	r3, [r7, #1864]	@ 0x748
 800139a:	b29a      	uxth	r2, r3
 800139c:	4639      	mov	r1, r7
 800139e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a2:	481c      	ldr	r0, [pc, #112]	@ (8001414 <main+0x840>)
 80013a4:	f002 fc72 	bl	8003c8c <HAL_UART_Transmit>
	            HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 80013a8:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 80013ac:	2364      	movs	r3, #100	@ 0x64
 80013ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013b2:	4818      	ldr	r0, [pc, #96]	@ (8001414 <main+0x840>)
 80013b4:	f002 fcf5 	bl	8003da2 <HAL_UART_Receive>
	        }
	        sprintf(ATcommand,"AT+CIPCLOSE=%d\r\n",channel);
 80013b8:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 80013bc:	f8d7 2778 	ldr.w	r2, [r7, #1912]	@ 0x778
 80013c0:	4915      	ldr	r1, [pc, #84]	@ (8001418 <main+0x844>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 fdfc 	bl	8004fc0 <siprintf>
	        memset(rxBuffer,0,sizeof(rxBuffer));
 80013c8:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80013cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fe57 	bl	8005086 <memset>
	        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80013d8:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 80013dc:	4618      	mov	r0, r3
 80013de:	f7fe feb7 	bl	8000150 <strlen>
 80013e2:	4603      	mov	r3, r0
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	f507 61a1 	add.w	r1, r7, #1288	@ 0x508
 80013ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ee:	4809      	ldr	r0, [pc, #36]	@ (8001414 <main+0x840>)
 80013f0:	f002 fc4c 	bl	8003c8c <HAL_UART_Transmit>
	        HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 80013f4:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 80013f8:	2364      	movs	r3, #100	@ 0x64
 80013fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <main+0x840>)
 8001400:	f002 fccf 	bl	8003da2 <HAL_UART_Receive>
	        channel=100;
 8001404:	2364      	movs	r3, #100	@ 0x64
 8001406:	f8c7 3778 	str.w	r3, [r7, #1912]	@ 0x778
      if (data > 3500 ){
 800140a:	e552      	b.n	8000eb2 <main+0x2de>
 800140c:	40011000 	.word	0x40011000
 8001410:	080089cc 	.word	0x080089cc
 8001414:	200002ac 	.word	0x200002ac
 8001418:	080089e0 	.word	0x080089e0

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	@ 0x50
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001426:	2228      	movs	r2, #40	@ 0x28
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f003 fe2b 	bl	8005086 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800144c:	2302      	movs	r3, #2
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001450:	2301      	movs	r3, #1
 8001452:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001454:	2310      	movs	r3, #16
 8001456:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001458:	2300      	movs	r3, #0
 800145a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fb97 	bl	8002b94 <HAL_RCC_OscConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800146c:	f000 f96a 	bl	8001744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001470:	230f      	movs	r3, #15
 8001472:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f001 fe04 	bl	8003098 <HAL_RCC_ClockConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001496:	f000 f955 	bl	8001744 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800149a:	2302      	movs	r3, #2
 800149c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 ff85 	bl	80033b4 <HAL_RCCEx_PeriphCLKConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014b0:	f000 f948 	bl	8001744 <Error_Handler>
  }
}
 80014b4:	bf00      	nop
 80014b6:	3750      	adds	r7, #80	@ 0x50
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014cc:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <MX_ADC1_Init+0x74>)
 80014ce:	4a19      	ldr	r2, [pc, #100]	@ (8001534 <MX_ADC1_Init+0x78>)
 80014d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <MX_ADC1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014d8:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <MX_ADC1_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <MX_ADC1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <MX_ADC1_Init+0x74>)
 80014e6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80014ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ec:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <MX_ADC1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80014f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <MX_ADC1_Init+0x74>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f8:	480d      	ldr	r0, [pc, #52]	@ (8001530 <MX_ADC1_Init+0x74>)
 80014fa:	f000 fc0f 	bl	8001d1c <HAL_ADC_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001504:	f000 f91e 	bl	8001744 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001508:	2308      	movs	r3, #8
 800150a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800150c:	2301      	movs	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_ADC1_Init+0x74>)
 800151a:	f000 fd85 	bl	8002028 <HAL_ADC_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001524:	f000 f90e 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200001f0 	.word	0x200001f0
 8001534:	40012400 	.word	0x40012400

08001538 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153e:	f107 0320 	add.w	r3, r7, #32
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]
 8001556:	615a      	str	r2, [r3, #20]
 8001558:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800155a:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <MX_TIM3_Init+0xa8>)
 800155c:	4a21      	ldr	r2, [pc, #132]	@ (80015e4 <MX_TIM3_Init+0xac>)
 800155e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 30-1;
 8001560:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <MX_TIM3_Init+0xa8>)
 8001562:	221d      	movs	r2, #29
 8001564:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001566:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <MX_TIM3_Init+0xa8>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3-1;
 800156c:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <MX_TIM3_Init+0xa8>)
 800156e:	2202      	movs	r2, #2
 8001570:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <MX_TIM3_Init+0xa8>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <MX_TIM3_Init+0xa8>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800157e:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <MX_TIM3_Init+0xa8>)
 8001580:	f001 ffce 	bl	8003520 <HAL_TIM_PWM_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800158a:	f000 f8db 	bl	8001744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001596:	f107 0320 	add.w	r3, r7, #32
 800159a:	4619      	mov	r1, r3
 800159c:	4810      	ldr	r0, [pc, #64]	@ (80015e0 <MX_TIM3_Init+0xa8>)
 800159e:	f002 fac7 	bl	8003b30 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80015a8:	f000 f8cc 	bl	8001744 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ac:	2360      	movs	r3, #96	@ 0x60
 80015ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	4807      	ldr	r0, [pc, #28]	@ (80015e0 <MX_TIM3_Init+0xa8>)
 80015c4:	f001 fffc 	bl	80035c0 <HAL_TIM_PWM_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80015ce:	f000 f8b9 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015d2:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <MX_TIM3_Init+0xa8>)
 80015d4:	f000 f97a 	bl	80018cc <HAL_TIM_MspPostInit>

}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	@ 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000220 	.word	0x20000220
 80015e4:	40000400 	.word	0x40000400

080015e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <MX_USART1_UART_Init+0x50>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <MX_USART1_UART_Init+0x4c>)
 8001620:	f002 fae4 	bl	8003bec <HAL_UART_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800162a:	f000 f88b 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200002ac 	.word	0x200002ac
 8001638:	40013800 	.word	0x40013800

0800163c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001642:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <MX_DMA_Init+0x38>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <MX_DMA_Init+0x38>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6153      	str	r3, [r2, #20]
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <MX_DMA_Init+0x38>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2010      	movs	r0, #16
 8001660:	f000 ff4d 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001664:	2010      	movs	r0, #16
 8001666:	f000 ff66 	bl	8002536 <HAL_NVIC_EnableIRQ>

}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168c:	4b2a      	ldr	r3, [pc, #168]	@ (8001738 <MX_GPIO_Init+0xc0>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a29      	ldr	r2, [pc, #164]	@ (8001738 <MX_GPIO_Init+0xc0>)
 8001692:	f043 0310 	orr.w	r3, r3, #16
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b27      	ldr	r3, [pc, #156]	@ (8001738 <MX_GPIO_Init+0xc0>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a4:	4b24      	ldr	r3, [pc, #144]	@ (8001738 <MX_GPIO_Init+0xc0>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a23      	ldr	r2, [pc, #140]	@ (8001738 <MX_GPIO_Init+0xc0>)
 80016aa:	f043 0320 	orr.w	r3, r3, #32
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <MX_GPIO_Init+0xc0>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0320 	and.w	r3, r3, #32
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001738 <MX_GPIO_Init+0xc0>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <MX_GPIO_Init+0xc0>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <MX_GPIO_Init+0xc0>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d4:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <MX_GPIO_Init+0xc0>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <MX_GPIO_Init+0xc0>)
 80016da:	f043 0308 	orr.w	r3, r3, #8
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <MX_GPIO_Init+0xc0>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016f2:	4812      	ldr	r0, [pc, #72]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016f4:	f001 fa35 	bl	8002b62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2302      	movs	r3, #2
 8001708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4619      	mov	r1, r3
 8001710:	480a      	ldr	r0, [pc, #40]	@ (800173c <MX_GPIO_Init+0xc4>)
 8001712:	f001 f88b 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001716:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800171a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	4619      	mov	r1, r3
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <MX_GPIO_Init+0xc8>)
 800172c:	f001 f87e 	bl	800282c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001730:	bf00      	nop
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	40011000 	.word	0x40011000
 8001740:	40010c00 	.word	0x40010c00

08001744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <Error_Handler+0x8>

08001750 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <HAL_MspInit+0x5c>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <HAL_MspInit+0x5c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6193      	str	r3, [r2, #24]
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <HAL_MspInit+0x5c>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a0e      	ldr	r2, [pc, #56]	@ (80017ac <HAL_MspInit+0x5c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_MspInit+0x60>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <HAL_MspInit+0x60>)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000

080017b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <HAL_ADC_MspInit+0x6c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d121      	bne.n	8001818 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017d4:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <HAL_ADC_MspInit+0x70>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a12      	ldr	r2, [pc, #72]	@ (8001824 <HAL_ADC_MspInit+0x70>)
 80017da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <HAL_ADC_MspInit+0x70>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <HAL_ADC_MspInit+0x70>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001824 <HAL_ADC_MspInit+0x70>)
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <HAL_ADC_MspInit+0x70>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001804:	2301      	movs	r3, #1
 8001806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001808:	2303      	movs	r3, #3
 800180a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <HAL_ADC_MspInit+0x74>)
 8001814:	f001 f80a 	bl	800282c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40012400 	.word	0x40012400
 8001824:	40021000 	.word	0x40021000
 8001828:	40010c00 	.word	0x40010c00

0800182c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a20      	ldr	r2, [pc, #128]	@ (80018bc <HAL_TIM_PWM_MspInit+0x90>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d139      	bne.n	80018b2 <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800183e:	4b20      	ldr	r3, [pc, #128]	@ (80018c0 <HAL_TIM_PWM_MspInit+0x94>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4a1f      	ldr	r2, [pc, #124]	@ (80018c0 <HAL_TIM_PWM_MspInit+0x94>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	61d3      	str	r3, [r2, #28]
 800184a:	4b1d      	ldr	r3, [pc, #116]	@ (80018c0 <HAL_TIM_PWM_MspInit+0x94>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001856:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <HAL_TIM_PWM_MspInit+0x98>)
 8001858:	4a1b      	ldr	r2, [pc, #108]	@ (80018c8 <HAL_TIM_PWM_MspInit+0x9c>)
 800185a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800185c:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <HAL_TIM_PWM_MspInit+0x98>)
 800185e:	2210      	movs	r2, #16
 8001860:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001862:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <HAL_TIM_PWM_MspInit+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001868:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <HAL_TIM_PWM_MspInit+0x98>)
 800186a:	2280      	movs	r2, #128	@ 0x80
 800186c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <HAL_TIM_PWM_MspInit+0x98>)
 8001870:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001874:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001876:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <HAL_TIM_PWM_MspInit+0x98>)
 8001878:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800187c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800187e:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <HAL_TIM_PWM_MspInit+0x98>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001884:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <HAL_TIM_PWM_MspInit+0x98>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800188a:	480e      	ldr	r0, [pc, #56]	@ (80018c4 <HAL_TIM_PWM_MspInit+0x98>)
 800188c:	f000 fe6e 	bl	800256c <HAL_DMA_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8001896:	f7ff ff55 	bl	8001744 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a09      	ldr	r2, [pc, #36]	@ (80018c4 <HAL_TIM_PWM_MspInit+0x98>)
 800189e:	625a      	str	r2, [r3, #36]	@ 0x24
 80018a0:	4a08      	ldr	r2, [pc, #32]	@ (80018c4 <HAL_TIM_PWM_MspInit+0x98>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a06      	ldr	r2, [pc, #24]	@ (80018c4 <HAL_TIM_PWM_MspInit+0x98>)
 80018aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80018ac:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <HAL_TIM_PWM_MspInit+0x98>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40000400 	.word	0x40000400
 80018c0:	40021000 	.word	0x40021000
 80018c4:	20000268 	.word	0x20000268
 80018c8:	4002006c 	.word	0x4002006c

080018cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001924 <HAL_TIM_MspPostInit+0x58>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d117      	bne.n	800191c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <HAL_TIM_MspPostInit+0x5c>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <HAL_TIM_MspPostInit+0x5c>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_TIM_MspPostInit+0x5c>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001904:	2340      	movs	r3, #64	@ 0x40
 8001906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2302      	movs	r3, #2
 800190e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	4619      	mov	r1, r3
 8001916:	4805      	ldr	r0, [pc, #20]	@ (800192c <HAL_TIM_MspPostInit+0x60>)
 8001918:	f000 ff88 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800191c:	bf00      	nop
 800191e:	3720      	adds	r7, #32
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40000400 	.word	0x40000400
 8001928:	40021000 	.word	0x40021000
 800192c:	40010800 	.word	0x40010800

08001930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a1c      	ldr	r2, [pc, #112]	@ (80019bc <HAL_UART_MspInit+0x8c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d131      	bne.n	80019b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001950:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <HAL_UART_MspInit+0x90>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a1a      	ldr	r2, [pc, #104]	@ (80019c0 <HAL_UART_MspInit+0x90>)
 8001956:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <HAL_UART_MspInit+0x90>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <HAL_UART_MspInit+0x90>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a14      	ldr	r2, [pc, #80]	@ (80019c0 <HAL_UART_MspInit+0x90>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_UART_MspInit+0x90>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001984:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800198a:	2303      	movs	r3, #3
 800198c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 0310 	add.w	r3, r7, #16
 8001992:	4619      	mov	r1, r3
 8001994:	480b      	ldr	r0, [pc, #44]	@ (80019c4 <HAL_UART_MspInit+0x94>)
 8001996:	f000 ff49 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800199a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800199e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4619      	mov	r1, r3
 80019ae:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <HAL_UART_MspInit+0x94>)
 80019b0:	f000 ff3c 	bl	800282c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80019b4:	bf00      	nop
 80019b6:	3720      	adds	r7, #32
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40013800 	.word	0x40013800
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010800 	.word	0x40010800

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <NMI_Handler+0x4>

080019d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <MemManage_Handler+0x4>

080019e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <UsageFault_Handler+0x4>

080019f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a18:	f000 f940 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <DMA1_Channel6_IRQHandler+0x10>)
 8001a26:	f000 fdfb 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000268 	.word	0x20000268

08001a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return 1;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <_kill>:

int _kill(int pid, int sig)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a4c:	f003 fb90 	bl	8005170 <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2216      	movs	r2, #22
 8001a54:	601a      	str	r2, [r3, #0]
  return -1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_exit>:

void _exit (int status)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffe7 	bl	8001a42 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <_exit+0x12>

08001a78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	e00a      	b.n	8001aa0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a8a:	f3af 8000 	nop.w
 8001a8e:	4601      	mov	r1, r0
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	60ba      	str	r2, [r7, #8]
 8001a96:	b2ca      	uxtb	r2, r1
 8001a98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	dbf0      	blt.n	8001a8a <_read+0x12>
  }

  return len;
 8001aa8:	687b      	ldr	r3, [r7, #4]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	e009      	b.n	8001ad8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	60ba      	str	r2, [r7, #8]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dbf1      	blt.n	8001ac4 <_write+0x12>
  }
  return len;
 8001ae0:	687b      	ldr	r3, [r7, #4]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <_close>:

int _close(int file)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b10:	605a      	str	r2, [r3, #4]
  return 0;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <_isatty>:

int _isatty(int file)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
	...

08001b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b54:	4a14      	ldr	r2, [pc, #80]	@ (8001ba8 <_sbrk+0x5c>)
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <_sbrk+0x60>)
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b60:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <_sbrk+0x64>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	@ (8001bb4 <_sbrk+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d207      	bcs.n	8001b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b7c:	f003 faf8 	bl	8005170 <__errno>
 8001b80:	4603      	mov	r3, r0
 8001b82:	220c      	movs	r2, #12
 8001b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	e009      	b.n	8001ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b92:	4b07      	ldr	r3, [pc, #28]	@ (8001bb0 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a05      	ldr	r2, [pc, #20]	@ (8001bb0 <_sbrk+0x64>)
 8001b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20005000 	.word	0x20005000
 8001bac:	00000400 	.word	0x00000400
 8001bb0:	200002f8 	.word	0x200002f8
 8001bb4:	20000450 	.word	0x20000450

08001bb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc4:	f7ff fff8 	bl	8001bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc8:	480b      	ldr	r0, [pc, #44]	@ (8001bf8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bca:	490c      	ldr	r1, [pc, #48]	@ (8001bfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a09      	ldr	r2, [pc, #36]	@ (8001c04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001be0:	4c09      	ldr	r4, [pc, #36]	@ (8001c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bee:	f003 fac5 	bl	800517c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf2:	f7fe ffef 	bl	8000bd4 <main>
  bx lr
 8001bf6:	4770      	bx	lr
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c00:	08008e60 	.word	0x08008e60
  ldr r2, =_sbss
 8001c04:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c08:	2000044c 	.word	0x2000044c

08001c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC1_2_IRQHandler>
	...

08001c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <HAL_Init+0x28>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a07      	ldr	r2, [pc, #28]	@ (8001c38 <HAL_Init+0x28>)
 8001c1a:	f043 0310 	orr.w	r3, r3, #16
 8001c1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f000 fc61 	bl	80024e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c26:	200f      	movs	r0, #15
 8001c28:	f000 f808 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2c:	f7ff fd90 	bl	8001750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40022000 	.word	0x40022000

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c44:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <HAL_InitTick+0x54>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_InitTick+0x58>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fc79 	bl	8002552 <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00e      	b.n	8001c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d80a      	bhi.n	8001c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c70:	2200      	movs	r2, #0
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f000 fc41 	bl	80024fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c7c:	4a06      	ldr	r2, [pc, #24]	@ (8001c98 <HAL_InitTick+0x5c>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000008 	.word	0x20000008
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_IncTick+0x1c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <HAL_IncTick+0x20>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a03      	ldr	r2, [pc, #12]	@ (8001cbc <HAL_IncTick+0x20>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	200002fc 	.word	0x200002fc

08001cc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	@ (8001cd0 <HAL_GetTick+0x10>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	200002fc 	.word	0x200002fc

08001cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff fff0 	bl	8001cc0 <HAL_GetTick>
 8001ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d005      	beq.n	8001cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <HAL_Delay+0x44>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfa:	bf00      	nop
 8001cfc:	f7ff ffe0 	bl	8001cc0 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f7      	bhi.n	8001cfc <HAL_Delay+0x28>
  {
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000008 	.word	0x20000008

08001d1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0be      	b.n	8001ebc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d109      	bne.n	8001d60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff fd2a 	bl	80017b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fab3 	bl	80022cc <ADC_ConversionStop_Disable>
 8001d66:	4603      	mov	r3, r0
 8001d68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 8099 	bne.w	8001eaa <HAL_ADC_Init+0x18e>
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 8095 	bne.w	8001eaa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d84:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d88:	f023 0302 	bic.w	r3, r3, #2
 8001d8c:	f043 0202 	orr.w	r2, r3, #2
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7b1b      	ldrb	r3, [r3, #12]
 8001da2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001da4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001db4:	d003      	beq.n	8001dbe <HAL_ADC_Init+0xa2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d102      	bne.n	8001dc4 <HAL_ADC_Init+0xa8>
 8001dbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dc2:	e000      	b.n	8001dc6 <HAL_ADC_Init+0xaa>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7d1b      	ldrb	r3, [r3, #20]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d119      	bne.n	8001e08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7b1b      	ldrb	r3, [r3, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	035a      	lsls	r2, r3, #13
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	e00b      	b.n	8001e08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	f043 0220 	orr.w	r2, r3, #32
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e00:	f043 0201 	orr.w	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	4b28      	ldr	r3, [pc, #160]	@ (8001ec4 <HAL_ADC_Init+0x1a8>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e38:	d003      	beq.n	8001e42 <HAL_ADC_Init+0x126>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d104      	bne.n	8001e4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	051b      	lsls	r3, r3, #20
 8001e4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e52:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <HAL_ADC_Init+0x1ac>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d10b      	bne.n	8001e88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7a:	f023 0303 	bic.w	r3, r3, #3
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e86:	e018      	b.n	8001eba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8c:	f023 0312 	bic.w	r3, r3, #18
 8001e90:	f043 0210 	orr.w	r2, r3, #16
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ea8:	e007      	b.n	8001eba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eae:	f043 0210 	orr.w	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	ffe1f7fd 	.word	0xffe1f7fd
 8001ec8:	ff1f0efe 	.word	0xff1f0efe

08001ecc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_Start+0x1a>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e098      	b.n	8002018 <HAL_ADC_Start+0x14c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f992 	bl	8002218 <ADC_Enable>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 8087 	bne.w	800200e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a41      	ldr	r2, [pc, #260]	@ (8002020 <HAL_ADC_Start+0x154>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d105      	bne.n	8001f2a <HAL_ADC_Start+0x5e>
 8001f1e:	4b41      	ldr	r3, [pc, #260]	@ (8002024 <HAL_ADC_Start+0x158>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d115      	bne.n	8001f56 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d026      	beq.n	8001f92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f48:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f4c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f54:	e01d      	b.n	8001f92 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a2f      	ldr	r2, [pc, #188]	@ (8002024 <HAL_ADC_Start+0x158>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d004      	beq.n	8001f76 <HAL_ADC_Start+0xaa>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a2b      	ldr	r2, [pc, #172]	@ (8002020 <HAL_ADC_Start+0x154>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10d      	bne.n	8001f92 <HAL_ADC_Start+0xc6>
 8001f76:	4b2b      	ldr	r3, [pc, #172]	@ (8002024 <HAL_ADC_Start+0x158>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f86:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f8a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa2:	f023 0206 	bic.w	r2, r3, #6
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001faa:	e002      	b.n	8001fb2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f06f 0202 	mvn.w	r2, #2
 8001fc2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001fce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001fd2:	d113      	bne.n	8001ffc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fd8:	4a11      	ldr	r2, [pc, #68]	@ (8002020 <HAL_ADC_Start+0x154>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d105      	bne.n	8001fea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fde:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <HAL_ADC_Start+0x158>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d108      	bne.n	8001ffc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	e00c      	b.n	8002016 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	e003      	b.n	8002016 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40012800 	.word	0x40012800
 8002024:	40012400 	.word	0x40012400

08002028 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x20>
 8002044:	2302      	movs	r3, #2
 8002046:	e0dc      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1da>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b06      	cmp	r3, #6
 8002056:	d81c      	bhi.n	8002092 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	3b05      	subs	r3, #5
 800206a:	221f      	movs	r2, #31
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	4019      	ands	r1, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	3b05      	subs	r3, #5
 8002084:	fa00 f203 	lsl.w	r2, r0, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002090:	e03c      	b.n	800210c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d81c      	bhi.n	80020d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	3b23      	subs	r3, #35	@ 0x23
 80020ac:	221f      	movs	r2, #31
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	4019      	ands	r1, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	3b23      	subs	r3, #35	@ 0x23
 80020c6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80020d2:	e01b      	b.n	800210c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	3b41      	subs	r3, #65	@ 0x41
 80020e6:	221f      	movs	r2, #31
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	4019      	ands	r1, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	3b41      	subs	r3, #65	@ 0x41
 8002100:	fa00 f203 	lsl.w	r2, r0, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b09      	cmp	r3, #9
 8002112:	d91c      	bls.n	800214e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68d9      	ldr	r1, [r3, #12]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	3b1e      	subs	r3, #30
 8002126:	2207      	movs	r2, #7
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	4019      	ands	r1, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6898      	ldr	r0, [r3, #8]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	3b1e      	subs	r3, #30
 8002140:	fa00 f203 	lsl.w	r2, r0, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	60da      	str	r2, [r3, #12]
 800214c:	e019      	b.n	8002182 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6919      	ldr	r1, [r3, #16]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	2207      	movs	r2, #7
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	4019      	ands	r1, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6898      	ldr	r0, [r3, #8]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	fa00 f203 	lsl.w	r2, r0, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b10      	cmp	r3, #16
 8002188:	d003      	beq.n	8002192 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800218e:	2b11      	cmp	r3, #17
 8002190:	d132      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1d      	ldr	r2, [pc, #116]	@ (800220c <HAL_ADC_ConfigChannel+0x1e4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d125      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d126      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80021b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d11a      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021c2:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <HAL_ADC_ConfigChannel+0x1e8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a13      	ldr	r2, [pc, #76]	@ (8002214 <HAL_ADC_ConfigChannel+0x1ec>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	0c9a      	lsrs	r2, r3, #18
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021d8:	e002      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	3b01      	subs	r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f9      	bne.n	80021da <HAL_ADC_ConfigChannel+0x1b2>
 80021e6:	e007      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	40012400 	.word	0x40012400
 8002210:	20000000 	.word	0x20000000
 8002214:	431bde83 	.word	0x431bde83

08002218 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d040      	beq.n	80022b8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002246:	4b1f      	ldr	r3, [pc, #124]	@ (80022c4 <ADC_Enable+0xac>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1f      	ldr	r2, [pc, #124]	@ (80022c8 <ADC_Enable+0xb0>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	0c9b      	lsrs	r3, r3, #18
 8002252:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002254:	e002      	b.n	800225c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3b01      	subs	r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f9      	bne.n	8002256 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002262:	f7ff fd2d 	bl	8001cc0 <HAL_GetTick>
 8002266:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002268:	e01f      	b.n	80022aa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800226a:	f7ff fd29 	bl	8001cc0 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d918      	bls.n	80022aa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d011      	beq.n	80022aa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228a:	f043 0210 	orr.w	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002296:	f043 0201 	orr.w	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e007      	b.n	80022ba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d1d8      	bne.n	800226a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000000 	.word	0x20000000
 80022c8:	431bde83 	.word	0x431bde83

080022cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d12e      	bne.n	8002344 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0201 	bic.w	r2, r2, #1
 80022f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022f6:	f7ff fce3 	bl	8001cc0 <HAL_GetTick>
 80022fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022fc:	e01b      	b.n	8002336 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022fe:	f7ff fcdf 	bl	8001cc0 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d914      	bls.n	8002336 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b01      	cmp	r3, #1
 8002318:	d10d      	bne.n	8002336 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231e:	f043 0210 	orr.w	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e007      	b.n	8002346 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b01      	cmp	r3, #1
 8002342:	d0dc      	beq.n	80022fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800237c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002382:	4a04      	ldr	r2, [pc, #16]	@ (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60d3      	str	r3, [r2, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	@ (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4906      	ldr	r1, [pc, #24]	@ (80023e8 <__NVIC_EnableIRQ+0x34>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100

080023ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	@ (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	@ (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	@ 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	@ 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b4:	d301      	bcc.n	80024ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00f      	b.n	80024da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ba:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <SysTick_Config+0x40>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c2:	210f      	movs	r1, #15
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f7ff ff90 	bl	80023ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024cc:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <SysTick_Config+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d2:	4b04      	ldr	r3, [pc, #16]	@ (80024e4 <SysTick_Config+0x40>)
 80024d4:	2207      	movs	r2, #7
 80024d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	e000e010 	.word	0xe000e010

080024e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff2d 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002510:	f7ff ff42 	bl	8002398 <__NVIC_GetPriorityGrouping>
 8002514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	6978      	ldr	r0, [r7, #20]
 800251c:	f7ff ff90 	bl	8002440 <NVIC_EncodePriority>
 8002520:	4602      	mov	r2, r0
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff5f 	bl	80023ec <__NVIC_SetPriority>
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff35 	bl	80023b4 <__NVIC_EnableIRQ>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffa2 	bl	80024a4 <SysTick_Config>
 8002560:	4603      	mov	r3, r0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e043      	b.n	800260a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	4b22      	ldr	r3, [pc, #136]	@ (8002614 <HAL_DMA_Init+0xa8>)
 800258a:	4413      	add	r3, r2
 800258c:	4a22      	ldr	r2, [pc, #136]	@ (8002618 <HAL_DMA_Init+0xac>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	009a      	lsls	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a1f      	ldr	r2, [pc, #124]	@ (800261c <HAL_DMA_Init+0xb0>)
 800259e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80025ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	bffdfff8 	.word	0xbffdfff8
 8002618:	cccccccd 	.word	0xcccccccd
 800261c:	40020000 	.word	0x40020000

08002620 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	2204      	movs	r2, #4
 800263e:	409a      	lsls	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d04f      	beq.n	80026e8 <HAL_DMA_IRQHandler+0xc8>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d04a      	beq.n	80026e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b00      	cmp	r3, #0
 800265e:	d107      	bne.n	8002670 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0204 	bic.w	r2, r2, #4
 800266e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a66      	ldr	r2, [pc, #408]	@ (8002810 <HAL_DMA_IRQHandler+0x1f0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d029      	beq.n	80026ce <HAL_DMA_IRQHandler+0xae>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a65      	ldr	r2, [pc, #404]	@ (8002814 <HAL_DMA_IRQHandler+0x1f4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d022      	beq.n	80026ca <HAL_DMA_IRQHandler+0xaa>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a63      	ldr	r2, [pc, #396]	@ (8002818 <HAL_DMA_IRQHandler+0x1f8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01a      	beq.n	80026c4 <HAL_DMA_IRQHandler+0xa4>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a62      	ldr	r2, [pc, #392]	@ (800281c <HAL_DMA_IRQHandler+0x1fc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d012      	beq.n	80026be <HAL_DMA_IRQHandler+0x9e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a60      	ldr	r2, [pc, #384]	@ (8002820 <HAL_DMA_IRQHandler+0x200>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00a      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x98>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a5f      	ldr	r2, [pc, #380]	@ (8002824 <HAL_DMA_IRQHandler+0x204>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d102      	bne.n	80026b2 <HAL_DMA_IRQHandler+0x92>
 80026ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026b0:	e00e      	b.n	80026d0 <HAL_DMA_IRQHandler+0xb0>
 80026b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80026b6:	e00b      	b.n	80026d0 <HAL_DMA_IRQHandler+0xb0>
 80026b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80026bc:	e008      	b.n	80026d0 <HAL_DMA_IRQHandler+0xb0>
 80026be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026c2:	e005      	b.n	80026d0 <HAL_DMA_IRQHandler+0xb0>
 80026c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026c8:	e002      	b.n	80026d0 <HAL_DMA_IRQHandler+0xb0>
 80026ca:	2340      	movs	r3, #64	@ 0x40
 80026cc:	e000      	b.n	80026d0 <HAL_DMA_IRQHandler+0xb0>
 80026ce:	2304      	movs	r3, #4
 80026d0:	4a55      	ldr	r2, [pc, #340]	@ (8002828 <HAL_DMA_IRQHandler+0x208>)
 80026d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8094 	beq.w	8002806 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026e6:	e08e      	b.n	8002806 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	2202      	movs	r2, #2
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d056      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x186>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d051      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 020a 	bic.w	r2, r2, #10
 800271e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a38      	ldr	r2, [pc, #224]	@ (8002810 <HAL_DMA_IRQHandler+0x1f0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d029      	beq.n	8002786 <HAL_DMA_IRQHandler+0x166>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a37      	ldr	r2, [pc, #220]	@ (8002814 <HAL_DMA_IRQHandler+0x1f4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d022      	beq.n	8002782 <HAL_DMA_IRQHandler+0x162>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a35      	ldr	r2, [pc, #212]	@ (8002818 <HAL_DMA_IRQHandler+0x1f8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01a      	beq.n	800277c <HAL_DMA_IRQHandler+0x15c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a34      	ldr	r2, [pc, #208]	@ (800281c <HAL_DMA_IRQHandler+0x1fc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d012      	beq.n	8002776 <HAL_DMA_IRQHandler+0x156>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a32      	ldr	r2, [pc, #200]	@ (8002820 <HAL_DMA_IRQHandler+0x200>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00a      	beq.n	8002770 <HAL_DMA_IRQHandler+0x150>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a31      	ldr	r2, [pc, #196]	@ (8002824 <HAL_DMA_IRQHandler+0x204>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d102      	bne.n	800276a <HAL_DMA_IRQHandler+0x14a>
 8002764:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002768:	e00e      	b.n	8002788 <HAL_DMA_IRQHandler+0x168>
 800276a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800276e:	e00b      	b.n	8002788 <HAL_DMA_IRQHandler+0x168>
 8002770:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002774:	e008      	b.n	8002788 <HAL_DMA_IRQHandler+0x168>
 8002776:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800277a:	e005      	b.n	8002788 <HAL_DMA_IRQHandler+0x168>
 800277c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002780:	e002      	b.n	8002788 <HAL_DMA_IRQHandler+0x168>
 8002782:	2320      	movs	r3, #32
 8002784:	e000      	b.n	8002788 <HAL_DMA_IRQHandler+0x168>
 8002786:	2302      	movs	r3, #2
 8002788:	4a27      	ldr	r2, [pc, #156]	@ (8002828 <HAL_DMA_IRQHandler+0x208>)
 800278a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002798:	2b00      	cmp	r3, #0
 800279a:	d034      	beq.n	8002806 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027a4:	e02f      	b.n	8002806 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	2208      	movs	r2, #8
 80027ac:	409a      	lsls	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d028      	beq.n	8002808 <HAL_DMA_IRQHandler+0x1e8>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d023      	beq.n	8002808 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 020e 	bic.w	r2, r2, #14
 80027ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f202 	lsl.w	r2, r1, r2
 80027de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d004      	beq.n	8002808 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	4798      	blx	r3
    }
  }
  return;
 8002806:	bf00      	nop
 8002808:	bf00      	nop
}
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40020008 	.word	0x40020008
 8002814:	4002001c 	.word	0x4002001c
 8002818:	40020030 	.word	0x40020030
 800281c:	40020044 	.word	0x40020044
 8002820:	40020058 	.word	0x40020058
 8002824:	4002006c 	.word	0x4002006c
 8002828:	40020000 	.word	0x40020000

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b08b      	sub	sp, #44	@ 0x2c
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800283a:	2300      	movs	r3, #0
 800283c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283e:	e169      	b.n	8002b14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002840:	2201      	movs	r2, #1
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	429a      	cmp	r2, r3
 800285a:	f040 8158 	bne.w	8002b0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4a9a      	ldr	r2, [pc, #616]	@ (8002acc <HAL_GPIO_Init+0x2a0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d05e      	beq.n	8002926 <HAL_GPIO_Init+0xfa>
 8002868:	4a98      	ldr	r2, [pc, #608]	@ (8002acc <HAL_GPIO_Init+0x2a0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d875      	bhi.n	800295a <HAL_GPIO_Init+0x12e>
 800286e:	4a98      	ldr	r2, [pc, #608]	@ (8002ad0 <HAL_GPIO_Init+0x2a4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d058      	beq.n	8002926 <HAL_GPIO_Init+0xfa>
 8002874:	4a96      	ldr	r2, [pc, #600]	@ (8002ad0 <HAL_GPIO_Init+0x2a4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d86f      	bhi.n	800295a <HAL_GPIO_Init+0x12e>
 800287a:	4a96      	ldr	r2, [pc, #600]	@ (8002ad4 <HAL_GPIO_Init+0x2a8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d052      	beq.n	8002926 <HAL_GPIO_Init+0xfa>
 8002880:	4a94      	ldr	r2, [pc, #592]	@ (8002ad4 <HAL_GPIO_Init+0x2a8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d869      	bhi.n	800295a <HAL_GPIO_Init+0x12e>
 8002886:	4a94      	ldr	r2, [pc, #592]	@ (8002ad8 <HAL_GPIO_Init+0x2ac>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d04c      	beq.n	8002926 <HAL_GPIO_Init+0xfa>
 800288c:	4a92      	ldr	r2, [pc, #584]	@ (8002ad8 <HAL_GPIO_Init+0x2ac>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d863      	bhi.n	800295a <HAL_GPIO_Init+0x12e>
 8002892:	4a92      	ldr	r2, [pc, #584]	@ (8002adc <HAL_GPIO_Init+0x2b0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d046      	beq.n	8002926 <HAL_GPIO_Init+0xfa>
 8002898:	4a90      	ldr	r2, [pc, #576]	@ (8002adc <HAL_GPIO_Init+0x2b0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d85d      	bhi.n	800295a <HAL_GPIO_Init+0x12e>
 800289e:	2b12      	cmp	r3, #18
 80028a0:	d82a      	bhi.n	80028f8 <HAL_GPIO_Init+0xcc>
 80028a2:	2b12      	cmp	r3, #18
 80028a4:	d859      	bhi.n	800295a <HAL_GPIO_Init+0x12e>
 80028a6:	a201      	add	r2, pc, #4	@ (adr r2, 80028ac <HAL_GPIO_Init+0x80>)
 80028a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ac:	08002927 	.word	0x08002927
 80028b0:	08002901 	.word	0x08002901
 80028b4:	08002913 	.word	0x08002913
 80028b8:	08002955 	.word	0x08002955
 80028bc:	0800295b 	.word	0x0800295b
 80028c0:	0800295b 	.word	0x0800295b
 80028c4:	0800295b 	.word	0x0800295b
 80028c8:	0800295b 	.word	0x0800295b
 80028cc:	0800295b 	.word	0x0800295b
 80028d0:	0800295b 	.word	0x0800295b
 80028d4:	0800295b 	.word	0x0800295b
 80028d8:	0800295b 	.word	0x0800295b
 80028dc:	0800295b 	.word	0x0800295b
 80028e0:	0800295b 	.word	0x0800295b
 80028e4:	0800295b 	.word	0x0800295b
 80028e8:	0800295b 	.word	0x0800295b
 80028ec:	0800295b 	.word	0x0800295b
 80028f0:	08002909 	.word	0x08002909
 80028f4:	0800291d 	.word	0x0800291d
 80028f8:	4a79      	ldr	r2, [pc, #484]	@ (8002ae0 <HAL_GPIO_Init+0x2b4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d013      	beq.n	8002926 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028fe:	e02c      	b.n	800295a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	623b      	str	r3, [r7, #32]
          break;
 8002906:	e029      	b.n	800295c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	3304      	adds	r3, #4
 800290e:	623b      	str	r3, [r7, #32]
          break;
 8002910:	e024      	b.n	800295c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	3308      	adds	r3, #8
 8002918:	623b      	str	r3, [r7, #32]
          break;
 800291a:	e01f      	b.n	800295c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	330c      	adds	r3, #12
 8002922:	623b      	str	r3, [r7, #32]
          break;
 8002924:	e01a      	b.n	800295c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d102      	bne.n	8002934 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800292e:	2304      	movs	r3, #4
 8002930:	623b      	str	r3, [r7, #32]
          break;
 8002932:	e013      	b.n	800295c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d105      	bne.n	8002948 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800293c:	2308      	movs	r3, #8
 800293e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	611a      	str	r2, [r3, #16]
          break;
 8002946:	e009      	b.n	800295c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002948:	2308      	movs	r3, #8
 800294a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	615a      	str	r2, [r3, #20]
          break;
 8002952:	e003      	b.n	800295c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002954:	2300      	movs	r3, #0
 8002956:	623b      	str	r3, [r7, #32]
          break;
 8002958:	e000      	b.n	800295c <HAL_GPIO_Init+0x130>
          break;
 800295a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2bff      	cmp	r3, #255	@ 0xff
 8002960:	d801      	bhi.n	8002966 <HAL_GPIO_Init+0x13a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	e001      	b.n	800296a <HAL_GPIO_Init+0x13e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3304      	adds	r3, #4
 800296a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2bff      	cmp	r3, #255	@ 0xff
 8002970:	d802      	bhi.n	8002978 <HAL_GPIO_Init+0x14c>
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	e002      	b.n	800297e <HAL_GPIO_Init+0x152>
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	3b08      	subs	r3, #8
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	210f      	movs	r1, #15
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	401a      	ands	r2, r3
 8002990:	6a39      	ldr	r1, [r7, #32]
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	431a      	orrs	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 80b1 	beq.w	8002b0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029ac:	4b4d      	ldr	r3, [pc, #308]	@ (8002ae4 <HAL_GPIO_Init+0x2b8>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	4a4c      	ldr	r2, [pc, #304]	@ (8002ae4 <HAL_GPIO_Init+0x2b8>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6193      	str	r3, [r2, #24]
 80029b8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae4 <HAL_GPIO_Init+0x2b8>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029c4:	4a48      	ldr	r2, [pc, #288]	@ (8002ae8 <HAL_GPIO_Init+0x2bc>)
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	089b      	lsrs	r3, r3, #2
 80029ca:	3302      	adds	r3, #2
 80029cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	220f      	movs	r2, #15
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4013      	ands	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a40      	ldr	r2, [pc, #256]	@ (8002aec <HAL_GPIO_Init+0x2c0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d013      	beq.n	8002a18 <HAL_GPIO_Init+0x1ec>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a3f      	ldr	r2, [pc, #252]	@ (8002af0 <HAL_GPIO_Init+0x2c4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00d      	beq.n	8002a14 <HAL_GPIO_Init+0x1e8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a3e      	ldr	r2, [pc, #248]	@ (8002af4 <HAL_GPIO_Init+0x2c8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <HAL_GPIO_Init+0x1e4>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a3d      	ldr	r2, [pc, #244]	@ (8002af8 <HAL_GPIO_Init+0x2cc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d101      	bne.n	8002a0c <HAL_GPIO_Init+0x1e0>
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e006      	b.n	8002a1a <HAL_GPIO_Init+0x1ee>
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	e004      	b.n	8002a1a <HAL_GPIO_Init+0x1ee>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e002      	b.n	8002a1a <HAL_GPIO_Init+0x1ee>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_GPIO_Init+0x1ee>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1c:	f002 0203 	and.w	r2, r2, #3
 8002a20:	0092      	lsls	r2, r2, #2
 8002a22:	4093      	lsls	r3, r2
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a2a:	492f      	ldr	r1, [pc, #188]	@ (8002ae8 <HAL_GPIO_Init+0x2bc>)
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	3302      	adds	r3, #2
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d006      	beq.n	8002a52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a44:	4b2d      	ldr	r3, [pc, #180]	@ (8002afc <HAL_GPIO_Init+0x2d0>)
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	492c      	ldr	r1, [pc, #176]	@ (8002afc <HAL_GPIO_Init+0x2d0>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	608b      	str	r3, [r1, #8]
 8002a50:	e006      	b.n	8002a60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a52:	4b2a      	ldr	r3, [pc, #168]	@ (8002afc <HAL_GPIO_Init+0x2d0>)
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	4928      	ldr	r1, [pc, #160]	@ (8002afc <HAL_GPIO_Init+0x2d0>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d006      	beq.n	8002a7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a6c:	4b23      	ldr	r3, [pc, #140]	@ (8002afc <HAL_GPIO_Init+0x2d0>)
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	4922      	ldr	r1, [pc, #136]	@ (8002afc <HAL_GPIO_Init+0x2d0>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60cb      	str	r3, [r1, #12]
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a7a:	4b20      	ldr	r3, [pc, #128]	@ (8002afc <HAL_GPIO_Init+0x2d0>)
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	491e      	ldr	r1, [pc, #120]	@ (8002afc <HAL_GPIO_Init+0x2d0>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d006      	beq.n	8002aa2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a94:	4b19      	ldr	r3, [pc, #100]	@ (8002afc <HAL_GPIO_Init+0x2d0>)
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	4918      	ldr	r1, [pc, #96]	@ (8002afc <HAL_GPIO_Init+0x2d0>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
 8002aa0:	e006      	b.n	8002ab0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aa2:	4b16      	ldr	r3, [pc, #88]	@ (8002afc <HAL_GPIO_Init+0x2d0>)
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	4914      	ldr	r1, [pc, #80]	@ (8002afc <HAL_GPIO_Init+0x2d0>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d021      	beq.n	8002b00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002abc:	4b0f      	ldr	r3, [pc, #60]	@ (8002afc <HAL_GPIO_Init+0x2d0>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	490e      	ldr	r1, [pc, #56]	@ (8002afc <HAL_GPIO_Init+0x2d0>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	600b      	str	r3, [r1, #0]
 8002ac8:	e021      	b.n	8002b0e <HAL_GPIO_Init+0x2e2>
 8002aca:	bf00      	nop
 8002acc:	10320000 	.word	0x10320000
 8002ad0:	10310000 	.word	0x10310000
 8002ad4:	10220000 	.word	0x10220000
 8002ad8:	10210000 	.word	0x10210000
 8002adc:	10120000 	.word	0x10120000
 8002ae0:	10110000 	.word	0x10110000
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	40010800 	.word	0x40010800
 8002af0:	40010c00 	.word	0x40010c00
 8002af4:	40011000 	.word	0x40011000
 8002af8:	40011400 	.word	0x40011400
 8002afc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b00:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <HAL_GPIO_Init+0x304>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	4909      	ldr	r1, [pc, #36]	@ (8002b30 <HAL_GPIO_Init+0x304>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	3301      	adds	r3, #1
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f47f ae8e 	bne.w	8002840 <HAL_GPIO_Init+0x14>
  }
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	372c      	adds	r7, #44	@ 0x2c
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	40010400 	.word	0x40010400

08002b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e001      	b.n	8002b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	807b      	strh	r3, [r7, #2]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b72:	787b      	ldrb	r3, [r7, #1]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b78:	887a      	ldrh	r2, [r7, #2]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b7e:	e003      	b.n	8002b88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	041a      	lsls	r2, r3, #16
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	611a      	str	r2, [r3, #16]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e272      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8087 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb4:	4b92      	ldr	r3, [pc, #584]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d00c      	beq.n	8002bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bc0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d112      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x5e>
 8002bcc:	4b8c      	ldr	r3, [pc, #560]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bd8:	d10b      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bda:	4b89      	ldr	r3, [pc, #548]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d06c      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x12c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d168      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e24c      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x76>
 8002bfc:	4b80      	ldr	r3, [pc, #512]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a7f      	ldr	r2, [pc, #508]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	e02e      	b.n	8002c68 <HAL_RCC_OscConfig+0xd4>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x98>
 8002c12:	4b7b      	ldr	r3, [pc, #492]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7a      	ldr	r2, [pc, #488]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b78      	ldr	r3, [pc, #480]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a77      	ldr	r2, [pc, #476]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e01d      	b.n	8002c68 <HAL_RCC_OscConfig+0xd4>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0xbc>
 8002c36:	4b72      	ldr	r3, [pc, #456]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a71      	ldr	r2, [pc, #452]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	4b6f      	ldr	r3, [pc, #444]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6e      	ldr	r2, [pc, #440]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e00b      	b.n	8002c68 <HAL_RCC_OscConfig+0xd4>
 8002c50:	4b6b      	ldr	r3, [pc, #428]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a6a      	ldr	r2, [pc, #424]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b68      	ldr	r3, [pc, #416]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a67      	ldr	r2, [pc, #412]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7ff f826 	bl	8001cc0 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7ff f822 	bl	8001cc0 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	@ 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e200      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0xe4>
 8002c96:	e014      	b.n	8002cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7ff f812 	bl	8001cc0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7ff f80e 	bl	8001cc0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	@ 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e1ec      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	4b53      	ldr	r3, [pc, #332]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x10c>
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d063      	beq.n	8002d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cce:	4b4c      	ldr	r3, [pc, #304]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cda:	4b49      	ldr	r3, [pc, #292]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d11c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x18c>
 8002ce6:	4b46      	ldr	r3, [pc, #280]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d116      	bne.n	8002d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf2:	4b43      	ldr	r3, [pc, #268]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_RCC_OscConfig+0x176>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e1c0      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4939      	ldr	r1, [pc, #228]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1e:	e03a      	b.n	8002d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d28:	4b36      	ldr	r3, [pc, #216]	@ (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fe ffc7 	bl	8001cc0 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d36:	f7fe ffc3 	bl	8001cc0 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e1a1      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d48:	4b2d      	ldr	r3, [pc, #180]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d54:	4b2a      	ldr	r3, [pc, #168]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4927      	ldr	r1, [pc, #156]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
 8002d68:	e015      	b.n	8002d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6a:	4b26      	ldr	r3, [pc, #152]	@ (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fe ffa6 	bl	8001cc0 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d78:	f7fe ffa2 	bl	8001cc0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e180      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03a      	beq.n	8002e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d019      	beq.n	8002dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002daa:	4b17      	ldr	r3, [pc, #92]	@ (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db0:	f7fe ff86 	bl	8001cc0 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db8:	f7fe ff82 	bl	8001cc0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e160      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dca:	4b0d      	ldr	r3, [pc, #52]	@ (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f000 face 	bl	8003378 <RCC_Delay>
 8002ddc:	e01c      	b.n	8002e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dde:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de4:	f7fe ff6c 	bl	8001cc0 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dea:	e00f      	b.n	8002e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dec:	f7fe ff68 	bl	8001cc0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d908      	bls.n	8002e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e146      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	42420000 	.word	0x42420000
 8002e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	4b92      	ldr	r3, [pc, #584]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e9      	bne.n	8002dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80a6 	beq.w	8002f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e26:	2300      	movs	r3, #0
 8002e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2a:	4b8b      	ldr	r3, [pc, #556]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10d      	bne.n	8002e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	4b88      	ldr	r3, [pc, #544]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4a87      	ldr	r2, [pc, #540]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e40:	61d3      	str	r3, [r2, #28]
 8002e42:	4b85      	ldr	r3, [pc, #532]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e52:	4b82      	ldr	r3, [pc, #520]	@ (800305c <HAL_RCC_OscConfig+0x4c8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d118      	bne.n	8002e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e5e:	4b7f      	ldr	r3, [pc, #508]	@ (800305c <HAL_RCC_OscConfig+0x4c8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a7e      	ldr	r2, [pc, #504]	@ (800305c <HAL_RCC_OscConfig+0x4c8>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6a:	f7fe ff29 	bl	8001cc0 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e72:	f7fe ff25 	bl	8001cc0 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b64      	cmp	r3, #100	@ 0x64
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e103      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	4b75      	ldr	r3, [pc, #468]	@ (800305c <HAL_RCC_OscConfig+0x4c8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x312>
 8002e98:	4b6f      	ldr	r3, [pc, #444]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4a6e      	ldr	r2, [pc, #440]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6213      	str	r3, [r2, #32]
 8002ea4:	e02d      	b.n	8002f02 <HAL_RCC_OscConfig+0x36e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x334>
 8002eae:	4b6a      	ldr	r3, [pc, #424]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4a69      	ldr	r2, [pc, #420]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	6213      	str	r3, [r2, #32]
 8002eba:	4b67      	ldr	r3, [pc, #412]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4a66      	ldr	r2, [pc, #408]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	6213      	str	r3, [r2, #32]
 8002ec6:	e01c      	b.n	8002f02 <HAL_RCC_OscConfig+0x36e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d10c      	bne.n	8002eea <HAL_RCC_OscConfig+0x356>
 8002ed0:	4b61      	ldr	r3, [pc, #388]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a60      	ldr	r2, [pc, #384]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	f043 0304 	orr.w	r3, r3, #4
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	4b5e      	ldr	r3, [pc, #376]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4a5d      	ldr	r2, [pc, #372]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6213      	str	r3, [r2, #32]
 8002ee8:	e00b      	b.n	8002f02 <HAL_RCC_OscConfig+0x36e>
 8002eea:	4b5b      	ldr	r3, [pc, #364]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a5a      	ldr	r2, [pc, #360]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	6213      	str	r3, [r2, #32]
 8002ef6:	4b58      	ldr	r3, [pc, #352]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4a57      	ldr	r2, [pc, #348]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d015      	beq.n	8002f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0a:	f7fe fed9 	bl	8001cc0 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fe fed5 	bl	8001cc0 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e0b1      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	4b4b      	ldr	r3, [pc, #300]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ee      	beq.n	8002f12 <HAL_RCC_OscConfig+0x37e>
 8002f34:	e014      	b.n	8002f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7fe fec3 	bl	8001cc0 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3e:	f7fe febf 	bl	8001cc0 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e09b      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f54:	4b40      	ldr	r3, [pc, #256]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ee      	bne.n	8002f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d105      	bne.n	8002f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f66:	4b3c      	ldr	r3, [pc, #240]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4a3b      	ldr	r2, [pc, #236]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8087 	beq.w	800308a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f7c:	4b36      	ldr	r3, [pc, #216]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d061      	beq.n	800304c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d146      	bne.n	800301e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f90:	4b33      	ldr	r3, [pc, #204]	@ (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7fe fe93 	bl	8001cc0 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7fe fe8f 	bl	8001cc0 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e06d      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb0:	4b29      	ldr	r3, [pc, #164]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc4:	d108      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fc6:	4b24      	ldr	r3, [pc, #144]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	4921      	ldr	r1, [pc, #132]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a19      	ldr	r1, [r3, #32]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	491b      	ldr	r1, [pc, #108]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fe63 	bl	8001cc0 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fe fe5f 	bl	8001cc0 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e03d      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003010:	4b11      	ldr	r3, [pc, #68]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x46a>
 800301c:	e035      	b.n	800308a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b10      	ldr	r3, [pc, #64]	@ (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fe fe4c 	bl	8001cc0 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fe48 	bl	8001cc0 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e026      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x498>
 800304a:	e01e      	b.n	800308a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e019      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
 8003060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003064:	4b0b      	ldr	r3, [pc, #44]	@ (8003094 <HAL_RCC_OscConfig+0x500>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	429a      	cmp	r2, r3
 8003076:	d106      	bne.n	8003086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000

08003098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0d0      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d910      	bls.n	80030dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b67      	ldr	r3, [pc, #412]	@ (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 0207 	bic.w	r2, r3, #7
 80030c2:	4965      	ldr	r1, [pc, #404]	@ (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b63      	ldr	r3, [pc, #396]	@ (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b8      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f4:	4b59      	ldr	r3, [pc, #356]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a58      	ldr	r2, [pc, #352]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800310c:	4b53      	ldr	r3, [pc, #332]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4a52      	ldr	r2, [pc, #328]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003118:	4b50      	ldr	r3, [pc, #320]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	494d      	ldr	r1, [pc, #308]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d040      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b47      	ldr	r3, [pc, #284]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d115      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e07f      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003156:	4b41      	ldr	r3, [pc, #260]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e073      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003166:	4b3d      	ldr	r3, [pc, #244]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e06b      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003176:	4b39      	ldr	r3, [pc, #228]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f023 0203 	bic.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4936      	ldr	r1, [pc, #216]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003188:	f7fe fd9a 	bl	8001cc0 <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003190:	f7fe fd96 	bl	8001cc0 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e053      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	4b2d      	ldr	r3, [pc, #180]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 020c 	and.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d1eb      	bne.n	8003190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031b8:	4b27      	ldr	r3, [pc, #156]	@ (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d210      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b24      	ldr	r3, [pc, #144]	@ (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 0207 	bic.w	r2, r3, #7
 80031ce:	4922      	ldr	r1, [pc, #136]	@ (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b20      	ldr	r3, [pc, #128]	@ (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e032      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b19      	ldr	r3, [pc, #100]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4916      	ldr	r1, [pc, #88]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003212:	4b12      	ldr	r3, [pc, #72]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	490e      	ldr	r1, [pc, #56]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003226:	f000 f821 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800322a:	4602      	mov	r2, r0
 800322c:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	490a      	ldr	r1, [pc, #40]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	5ccb      	ldrb	r3, [r1, r3]
 800323a:	fa22 f303 	lsr.w	r3, r2, r3
 800323e:	4a09      	ldr	r2, [pc, #36]	@ (8003264 <HAL_RCC_ClockConfig+0x1cc>)
 8003240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003242:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <HAL_RCC_ClockConfig+0x1d0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe fcf8 	bl	8001c3c <HAL_InitTick>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40022000 	.word	0x40022000
 800325c:	40021000 	.word	0x40021000
 8003260:	080089f4 	.word	0x080089f4
 8003264:	20000000 	.word	0x20000000
 8003268:	20000004 	.word	0x20000004

0800326c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	2300      	movs	r3, #0
 8003280:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003286:	4b1e      	ldr	r3, [pc, #120]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x94>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b04      	cmp	r3, #4
 8003294:	d002      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0x30>
 8003296:	2b08      	cmp	r3, #8
 8003298:	d003      	beq.n	80032a2 <HAL_RCC_GetSysClockFreq+0x36>
 800329a:	e027      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800329c:	4b19      	ldr	r3, [pc, #100]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x98>)
 800329e:	613b      	str	r3, [r7, #16]
      break;
 80032a0:	e027      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	0c9b      	lsrs	r3, r3, #18
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	4a17      	ldr	r2, [pc, #92]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032ac:	5cd3      	ldrb	r3, [r2, r3]
 80032ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d010      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032ba:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x94>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	0c5b      	lsrs	r3, r3, #17
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	4a11      	ldr	r2, [pc, #68]	@ (800330c <HAL_RCC_GetSysClockFreq+0xa0>)
 80032c6:	5cd3      	ldrb	r3, [r2, r3]
 80032c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x98>)
 80032ce:	fb03 f202 	mul.w	r2, r3, r2
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	e004      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a0c      	ldr	r2, [pc, #48]	@ (8003310 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032e0:	fb02 f303 	mul.w	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	613b      	str	r3, [r7, #16]
      break;
 80032ea:	e002      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x98>)
 80032ee:	613b      	str	r3, [r7, #16]
      break;
 80032f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f2:	693b      	ldr	r3, [r7, #16]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	007a1200 	.word	0x007a1200
 8003308:	08008a0c 	.word	0x08008a0c
 800330c:	08008a1c 	.word	0x08008a1c
 8003310:	003d0900 	.word	0x003d0900

08003314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003318:	4b02      	ldr	r3, [pc, #8]	@ (8003324 <HAL_RCC_GetHCLKFreq+0x10>)
 800331a:	681b      	ldr	r3, [r3, #0]
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	20000000 	.word	0x20000000

08003328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800332c:	f7ff fff2 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 8003330:	4602      	mov	r2, r0
 8003332:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	4903      	ldr	r1, [pc, #12]	@ (800334c <HAL_RCC_GetPCLK1Freq+0x24>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	08008a04 	.word	0x08008a04

08003350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003354:	f7ff ffde 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0adb      	lsrs	r3, r3, #11
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4903      	ldr	r1, [pc, #12]	@ (8003374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	08008a04 	.word	0x08008a04

08003378 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003380:	4b0a      	ldr	r3, [pc, #40]	@ (80033ac <RCC_Delay+0x34>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a0a      	ldr	r2, [pc, #40]	@ (80033b0 <RCC_Delay+0x38>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	0a5b      	lsrs	r3, r3, #9
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003394:	bf00      	nop
  }
  while (Delay --);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1e5a      	subs	r2, r3, #1
 800339a:	60fa      	str	r2, [r7, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f9      	bne.n	8003394 <RCC_Delay+0x1c>
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	20000000 	.word	0x20000000
 80033b0:	10624dd3 	.word	0x10624dd3

080033b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d07d      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033d0:	2300      	movs	r3, #0
 80033d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10d      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	61d3      	str	r3, [r2, #28]
 80033ec:	4b49      	ldr	r3, [pc, #292]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f8:	2301      	movs	r3, #1
 80033fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	4b46      	ldr	r3, [pc, #280]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d118      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003408:	4b43      	ldr	r3, [pc, #268]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a42      	ldr	r2, [pc, #264]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003412:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003414:	f7fe fc54 	bl	8001cc0 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341a:	e008      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341c:	f7fe fc50 	bl	8001cc0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	@ 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e06d      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342e:	4b3a      	ldr	r3, [pc, #232]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800343a:	4b36      	ldr	r3, [pc, #216]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003442:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d02e      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	429a      	cmp	r2, r3
 8003456:	d027      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003458:	4b2e      	ldr	r3, [pc, #184]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003460:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003462:	4b2e      	ldr	r3, [pc, #184]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003464:	2201      	movs	r2, #1
 8003466:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003468:	4b2c      	ldr	r3, [pc, #176]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800346e:	4a29      	ldr	r2, [pc, #164]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d014      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347e:	f7fe fc1f 	bl	8001cc0 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003484:	e00a      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fe fc1b 	bl	8001cc0 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e036      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349c:	4b1d      	ldr	r3, [pc, #116]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ee      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4917      	ldr	r1, [pc, #92]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d105      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c0:	4b14      	ldr	r3, [pc, #80]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	4a13      	ldr	r2, [pc, #76]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	490b      	ldr	r1, [pc, #44]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034f6:	4b07      	ldr	r3, [pc, #28]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	4904      	ldr	r1, [pc, #16]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003504:	4313      	orrs	r3, r2
 8003506:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	40007000 	.word	0x40007000
 800351c:	42420440 	.word	0x42420440

08003520 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e041      	b.n	80035b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fe f970 	bl	800182c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3304      	adds	r3, #4
 800355c:	4619      	mov	r1, r3
 800355e:	4610      	mov	r0, r2
 8003560:	f000 f8f0 	bl	8003744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035da:	2302      	movs	r3, #2
 80035dc:	e0ae      	b.n	800373c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	f200 809f 	bhi.w	800372c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035ee:	a201      	add	r2, pc, #4	@ (adr r2, 80035f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f4:	08003629 	.word	0x08003629
 80035f8:	0800372d 	.word	0x0800372d
 80035fc:	0800372d 	.word	0x0800372d
 8003600:	0800372d 	.word	0x0800372d
 8003604:	08003669 	.word	0x08003669
 8003608:	0800372d 	.word	0x0800372d
 800360c:	0800372d 	.word	0x0800372d
 8003610:	0800372d 	.word	0x0800372d
 8003614:	080036ab 	.word	0x080036ab
 8003618:	0800372d 	.word	0x0800372d
 800361c:	0800372d 	.word	0x0800372d
 8003620:	0800372d 	.word	0x0800372d
 8003624:	080036eb 	.word	0x080036eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f8f6 	bl	8003820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0208 	orr.w	r2, r2, #8
 8003642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699a      	ldr	r2, [r3, #24]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0204 	bic.w	r2, r2, #4
 8003652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6999      	ldr	r1, [r3, #24]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	619a      	str	r2, [r3, #24]
      break;
 8003666:	e064      	b.n	8003732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f93c 	bl	80038ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6999      	ldr	r1, [r3, #24]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	021a      	lsls	r2, r3, #8
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	619a      	str	r2, [r3, #24]
      break;
 80036a8:	e043      	b.n	8003732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 f985 	bl	80039c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0208 	orr.w	r2, r2, #8
 80036c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69da      	ldr	r2, [r3, #28]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0204 	bic.w	r2, r2, #4
 80036d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69d9      	ldr	r1, [r3, #28]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	61da      	str	r2, [r3, #28]
      break;
 80036e8:	e023      	b.n	8003732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f9cf 	bl	8003a94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69da      	ldr	r2, [r3, #28]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69d9      	ldr	r1, [r3, #28]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	021a      	lsls	r2, r3, #8
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	61da      	str	r2, [r3, #28]
      break;
 800372a:	e002      	b.n	8003732 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	75fb      	strb	r3, [r7, #23]
      break;
 8003730:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800373a:	7dfb      	ldrb	r3, [r7, #23]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a2f      	ldr	r2, [pc, #188]	@ (8003814 <TIM_Base_SetConfig+0xd0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00b      	beq.n	8003774 <TIM_Base_SetConfig+0x30>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003762:	d007      	beq.n	8003774 <TIM_Base_SetConfig+0x30>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a2c      	ldr	r2, [pc, #176]	@ (8003818 <TIM_Base_SetConfig+0xd4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d003      	beq.n	8003774 <TIM_Base_SetConfig+0x30>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a2b      	ldr	r2, [pc, #172]	@ (800381c <TIM_Base_SetConfig+0xd8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d108      	bne.n	8003786 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a22      	ldr	r2, [pc, #136]	@ (8003814 <TIM_Base_SetConfig+0xd0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00b      	beq.n	80037a6 <TIM_Base_SetConfig+0x62>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003794:	d007      	beq.n	80037a6 <TIM_Base_SetConfig+0x62>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1f      	ldr	r2, [pc, #124]	@ (8003818 <TIM_Base_SetConfig+0xd4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d003      	beq.n	80037a6 <TIM_Base_SetConfig+0x62>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1e      	ldr	r2, [pc, #120]	@ (800381c <TIM_Base_SetConfig+0xd8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d108      	bne.n	80037b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a0d      	ldr	r2, [pc, #52]	@ (8003814 <TIM_Base_SetConfig+0xd0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d103      	bne.n	80037ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f023 0201 	bic.w	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	611a      	str	r2, [r3, #16]
  }
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800

08003820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f023 0201 	bic.w	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800384e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f023 0302 	bic.w	r3, r3, #2
 8003868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a1c      	ldr	r2, [pc, #112]	@ (80038e8 <TIM_OC1_SetConfig+0xc8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d10c      	bne.n	8003896 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f023 0308 	bic.w	r3, r3, #8
 8003882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f023 0304 	bic.w	r3, r3, #4
 8003894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a13      	ldr	r2, [pc, #76]	@ (80038e8 <TIM_OC1_SetConfig+0xc8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d111      	bne.n	80038c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	621a      	str	r2, [r3, #32]
}
 80038dc:	bf00      	nop
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40012c00 	.word	0x40012c00

080038ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f023 0210 	bic.w	r2, r3, #16
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800391a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 0320 	bic.w	r3, r3, #32
 8003936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a1d      	ldr	r2, [pc, #116]	@ (80039bc <TIM_OC2_SetConfig+0xd0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d10d      	bne.n	8003968 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003966:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a14      	ldr	r2, [pc, #80]	@ (80039bc <TIM_OC2_SetConfig+0xd0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d113      	bne.n	8003998 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003976:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800397e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	621a      	str	r2, [r3, #32]
}
 80039b2:	bf00      	nop
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr
 80039bc:	40012c00 	.word	0x40012c00

080039c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0303 	bic.w	r3, r3, #3
 80039f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a1d      	ldr	r2, [pc, #116]	@ (8003a90 <TIM_OC3_SetConfig+0xd0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d10d      	bne.n	8003a3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a14      	ldr	r2, [pc, #80]	@ (8003a90 <TIM_OC3_SetConfig+0xd0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d113      	bne.n	8003a6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	621a      	str	r2, [r3, #32]
}
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40012c00 	.word	0x40012c00

08003a94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	031b      	lsls	r3, r3, #12
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a0f      	ldr	r2, [pc, #60]	@ (8003b2c <TIM_OC4_SetConfig+0x98>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d109      	bne.n	8003b08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003afa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	019b      	lsls	r3, r3, #6
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	621a      	str	r2, [r3, #32]
}
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	40012c00 	.word	0x40012c00

08003b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e046      	b.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a16      	ldr	r2, [pc, #88]	@ (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00e      	beq.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b94:	d009      	beq.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a12      	ldr	r2, [pc, #72]	@ (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a10      	ldr	r2, [pc, #64]	@ (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800

08003bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e042      	b.n	8003c84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd fe8c 	bl	8001930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	@ 0x24
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fa09 	bl	8004048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	@ 0x28
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d175      	bne.n	8003d98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_UART_Transmit+0x2c>
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e06e      	b.n	8003d9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2221      	movs	r2, #33	@ 0x21
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cca:	f7fd fff9 	bl	8001cc0 <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	88fa      	ldrh	r2, [r7, #6]
 8003cd4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	88fa      	ldrh	r2, [r7, #6]
 8003cda:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce4:	d108      	bne.n	8003cf8 <HAL_UART_Transmit+0x6c>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	e003      	b.n	8003d00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d00:	e02e      	b.n	8003d60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2180      	movs	r1, #128	@ 0x80
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 f8df 	bl	8003ed0 <UART_WaitOnFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e03a      	b.n	8003d9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	e007      	b.n	8003d52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1cb      	bne.n	8003d02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2140      	movs	r1, #64	@ 0x40
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f8ab 	bl	8003ed0 <UART_WaitOnFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e006      	b.n	8003d9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e000      	b.n	8003d9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
  }
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b08a      	sub	sp, #40	@ 0x28
 8003da6:	af02      	add	r7, sp, #8
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	603b      	str	r3, [r7, #0]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	f040 8081 	bne.w	8003ec6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_UART_Receive+0x2e>
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e079      	b.n	8003ec8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2222      	movs	r2, #34	@ 0x22
 8003dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003de8:	f7fd ff6a 	bl	8001cc0 <HAL_GetTick>
 8003dec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	88fa      	ldrh	r2, [r7, #6]
 8003df8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e02:	d108      	bne.n	8003e16 <HAL_UART_Receive+0x74>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d104      	bne.n	8003e16 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	e003      	b.n	8003e1e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003e1e:	e047      	b.n	8003eb0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2200      	movs	r2, #0
 8003e28:	2120      	movs	r1, #32
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f850 	bl	8003ed0 <UART_WaitOnFlagUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e042      	b.n	8003ec8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10c      	bne.n	8003e62 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	e01f      	b.n	8003ea2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6a:	d007      	beq.n	8003e7c <HAL_UART_Receive+0xda>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <HAL_UART_Receive+0xe8>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	701a      	strb	r2, [r3, #0]
 8003e88:	e008      	b.n	8003e9c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1b2      	bne.n	8003e20 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e000      	b.n	8003ec8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003ec6:	2302      	movs	r3, #2
  }
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee0:	e03b      	b.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d037      	beq.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eea:	f7fd fee9 	bl	8001cc0 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	6a3a      	ldr	r2, [r7, #32]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e03a      	b.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d023      	beq.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b80      	cmp	r3, #128	@ 0x80
 8003f16:	d020      	beq.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b40      	cmp	r3, #64	@ 0x40
 8003f1c:	d01d      	beq.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d116      	bne.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f81d 	bl	8003f82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e00f      	b.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4013      	ands	r3, r2
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	bf0c      	ite	eq
 8003f6a:	2301      	moveq	r3, #1
 8003f6c:	2300      	movne	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d0b4      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b095      	sub	sp, #84	@ 0x54
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003faa:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e5      	bne.n	8003f8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3314      	adds	r3, #20
 8003fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3314      	adds	r3, #20
 8003fdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fe4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e5      	bne.n	8003fbe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d119      	bne.n	800402e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	60bb      	str	r3, [r7, #8]
   return(result);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f023 0310 	bic.w	r3, r3, #16
 8004010:	647b      	str	r3, [r7, #68]	@ 0x44
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800401a:	61ba      	str	r2, [r7, #24]
 800401c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6979      	ldr	r1, [r7, #20]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	613b      	str	r3, [r7, #16]
   return(result);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e5      	bne.n	8003ffa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800403c:	bf00      	nop
 800403e:	3754      	adds	r7, #84	@ 0x54
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr
	...

08004048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004082:	f023 030c 	bic.w	r3, r3, #12
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	68b9      	ldr	r1, [r7, #8]
 800408c:	430b      	orrs	r3, r1
 800408e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2c      	ldr	r2, [pc, #176]	@ (800415c <UART_SetConfig+0x114>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d103      	bne.n	80040b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040b0:	f7ff f94e 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	e002      	b.n	80040be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040b8:	f7ff f936 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 80040bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	009a      	lsls	r2, r3, #2
 80040c8:	441a      	add	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d4:	4a22      	ldr	r2, [pc, #136]	@ (8004160 <UART_SetConfig+0x118>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	0119      	lsls	r1, r3, #4
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009a      	lsls	r2, r3, #2
 80040e8:	441a      	add	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004160 <UART_SetConfig+0x118>)
 80040f6:	fba3 0302 	umull	r0, r3, r3, r2
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2064      	movs	r0, #100	@ 0x64
 80040fe:	fb00 f303 	mul.w	r3, r0, r3
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	3332      	adds	r3, #50	@ 0x32
 8004108:	4a15      	ldr	r2, [pc, #84]	@ (8004160 <UART_SetConfig+0x118>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004114:	4419      	add	r1, r3
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	009a      	lsls	r2, r3, #2
 8004120:	441a      	add	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	fbb2 f2f3 	udiv	r2, r2, r3
 800412c:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <UART_SetConfig+0x118>)
 800412e:	fba3 0302 	umull	r0, r3, r3, r2
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	2064      	movs	r0, #100	@ 0x64
 8004136:	fb00 f303 	mul.w	r3, r0, r3
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	3332      	adds	r3, #50	@ 0x32
 8004140:	4a07      	ldr	r2, [pc, #28]	@ (8004160 <UART_SetConfig+0x118>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	f003 020f 	and.w	r2, r3, #15
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	440a      	add	r2, r1
 8004152:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004154:	bf00      	nop
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40013800 	.word	0x40013800
 8004160:	51eb851f 	.word	0x51eb851f

08004164 <__cvt>:
 8004164:	2b00      	cmp	r3, #0
 8004166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800416a:	461d      	mov	r5, r3
 800416c:	bfbb      	ittet	lt
 800416e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004172:	461d      	movlt	r5, r3
 8004174:	2300      	movge	r3, #0
 8004176:	232d      	movlt	r3, #45	@ 0x2d
 8004178:	b088      	sub	sp, #32
 800417a:	4614      	mov	r4, r2
 800417c:	bfb8      	it	lt
 800417e:	4614      	movlt	r4, r2
 8004180:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004182:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004184:	7013      	strb	r3, [r2, #0]
 8004186:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004188:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800418c:	f023 0820 	bic.w	r8, r3, #32
 8004190:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004194:	d005      	beq.n	80041a2 <__cvt+0x3e>
 8004196:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800419a:	d100      	bne.n	800419e <__cvt+0x3a>
 800419c:	3601      	adds	r6, #1
 800419e:	2302      	movs	r3, #2
 80041a0:	e000      	b.n	80041a4 <__cvt+0x40>
 80041a2:	2303      	movs	r3, #3
 80041a4:	aa07      	add	r2, sp, #28
 80041a6:	9204      	str	r2, [sp, #16]
 80041a8:	aa06      	add	r2, sp, #24
 80041aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80041ae:	e9cd 3600 	strd	r3, r6, [sp]
 80041b2:	4622      	mov	r2, r4
 80041b4:	462b      	mov	r3, r5
 80041b6:	f001 f8a3 	bl	8005300 <_dtoa_r>
 80041ba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80041be:	4607      	mov	r7, r0
 80041c0:	d119      	bne.n	80041f6 <__cvt+0x92>
 80041c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80041c4:	07db      	lsls	r3, r3, #31
 80041c6:	d50e      	bpl.n	80041e6 <__cvt+0x82>
 80041c8:	eb00 0906 	add.w	r9, r0, r6
 80041cc:	2200      	movs	r2, #0
 80041ce:	2300      	movs	r3, #0
 80041d0:	4620      	mov	r0, r4
 80041d2:	4629      	mov	r1, r5
 80041d4:	f7fc fbe8 	bl	80009a8 <__aeabi_dcmpeq>
 80041d8:	b108      	cbz	r0, 80041de <__cvt+0x7a>
 80041da:	f8cd 901c 	str.w	r9, [sp, #28]
 80041de:	2230      	movs	r2, #48	@ 0x30
 80041e0:	9b07      	ldr	r3, [sp, #28]
 80041e2:	454b      	cmp	r3, r9
 80041e4:	d31e      	bcc.n	8004224 <__cvt+0xc0>
 80041e6:	4638      	mov	r0, r7
 80041e8:	9b07      	ldr	r3, [sp, #28]
 80041ea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80041ec:	1bdb      	subs	r3, r3, r7
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	b008      	add	sp, #32
 80041f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80041fa:	eb00 0906 	add.w	r9, r0, r6
 80041fe:	d1e5      	bne.n	80041cc <__cvt+0x68>
 8004200:	7803      	ldrb	r3, [r0, #0]
 8004202:	2b30      	cmp	r3, #48	@ 0x30
 8004204:	d10a      	bne.n	800421c <__cvt+0xb8>
 8004206:	2200      	movs	r2, #0
 8004208:	2300      	movs	r3, #0
 800420a:	4620      	mov	r0, r4
 800420c:	4629      	mov	r1, r5
 800420e:	f7fc fbcb 	bl	80009a8 <__aeabi_dcmpeq>
 8004212:	b918      	cbnz	r0, 800421c <__cvt+0xb8>
 8004214:	f1c6 0601 	rsb	r6, r6, #1
 8004218:	f8ca 6000 	str.w	r6, [sl]
 800421c:	f8da 3000 	ldr.w	r3, [sl]
 8004220:	4499      	add	r9, r3
 8004222:	e7d3      	b.n	80041cc <__cvt+0x68>
 8004224:	1c59      	adds	r1, r3, #1
 8004226:	9107      	str	r1, [sp, #28]
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	e7d9      	b.n	80041e0 <__cvt+0x7c>

0800422c <__exponent>:
 800422c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800422e:	2900      	cmp	r1, #0
 8004230:	bfb6      	itet	lt
 8004232:	232d      	movlt	r3, #45	@ 0x2d
 8004234:	232b      	movge	r3, #43	@ 0x2b
 8004236:	4249      	neglt	r1, r1
 8004238:	2909      	cmp	r1, #9
 800423a:	7002      	strb	r2, [r0, #0]
 800423c:	7043      	strb	r3, [r0, #1]
 800423e:	dd29      	ble.n	8004294 <__exponent+0x68>
 8004240:	f10d 0307 	add.w	r3, sp, #7
 8004244:	461d      	mov	r5, r3
 8004246:	270a      	movs	r7, #10
 8004248:	fbb1 f6f7 	udiv	r6, r1, r7
 800424c:	461a      	mov	r2, r3
 800424e:	fb07 1416 	mls	r4, r7, r6, r1
 8004252:	3430      	adds	r4, #48	@ 0x30
 8004254:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004258:	460c      	mov	r4, r1
 800425a:	2c63      	cmp	r4, #99	@ 0x63
 800425c:	4631      	mov	r1, r6
 800425e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004262:	dcf1      	bgt.n	8004248 <__exponent+0x1c>
 8004264:	3130      	adds	r1, #48	@ 0x30
 8004266:	1e94      	subs	r4, r2, #2
 8004268:	f803 1c01 	strb.w	r1, [r3, #-1]
 800426c:	4623      	mov	r3, r4
 800426e:	1c41      	adds	r1, r0, #1
 8004270:	42ab      	cmp	r3, r5
 8004272:	d30a      	bcc.n	800428a <__exponent+0x5e>
 8004274:	f10d 0309 	add.w	r3, sp, #9
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	42ac      	cmp	r4, r5
 800427c:	bf88      	it	hi
 800427e:	2300      	movhi	r3, #0
 8004280:	3302      	adds	r3, #2
 8004282:	4403      	add	r3, r0
 8004284:	1a18      	subs	r0, r3, r0
 8004286:	b003      	add	sp, #12
 8004288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800428e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004292:	e7ed      	b.n	8004270 <__exponent+0x44>
 8004294:	2330      	movs	r3, #48	@ 0x30
 8004296:	3130      	adds	r1, #48	@ 0x30
 8004298:	7083      	strb	r3, [r0, #2]
 800429a:	70c1      	strb	r1, [r0, #3]
 800429c:	1d03      	adds	r3, r0, #4
 800429e:	e7f1      	b.n	8004284 <__exponent+0x58>

080042a0 <_printf_float>:
 80042a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a4:	b091      	sub	sp, #68	@ 0x44
 80042a6:	460c      	mov	r4, r1
 80042a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80042ac:	4616      	mov	r6, r2
 80042ae:	461f      	mov	r7, r3
 80042b0:	4605      	mov	r5, r0
 80042b2:	f000 ff13 	bl	80050dc <_localeconv_r>
 80042b6:	6803      	ldr	r3, [r0, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	9308      	str	r3, [sp, #32]
 80042bc:	f7fb ff48 	bl	8000150 <strlen>
 80042c0:	2300      	movs	r3, #0
 80042c2:	930e      	str	r3, [sp, #56]	@ 0x38
 80042c4:	f8d8 3000 	ldr.w	r3, [r8]
 80042c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80042ca:	3307      	adds	r3, #7
 80042cc:	f023 0307 	bic.w	r3, r3, #7
 80042d0:	f103 0208 	add.w	r2, r3, #8
 80042d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80042d8:	f8d4 b000 	ldr.w	fp, [r4]
 80042dc:	f8c8 2000 	str.w	r2, [r8]
 80042e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80042e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042ea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80042ee:	f04f 32ff 	mov.w	r2, #4294967295
 80042f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80042f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80042fa:	4b9c      	ldr	r3, [pc, #624]	@ (800456c <_printf_float+0x2cc>)
 80042fc:	f7fc fb86 	bl	8000a0c <__aeabi_dcmpun>
 8004300:	bb70      	cbnz	r0, 8004360 <_printf_float+0xc0>
 8004302:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004306:	f04f 32ff 	mov.w	r2, #4294967295
 800430a:	4b98      	ldr	r3, [pc, #608]	@ (800456c <_printf_float+0x2cc>)
 800430c:	f7fc fb60 	bl	80009d0 <__aeabi_dcmple>
 8004310:	bb30      	cbnz	r0, 8004360 <_printf_float+0xc0>
 8004312:	2200      	movs	r2, #0
 8004314:	2300      	movs	r3, #0
 8004316:	4640      	mov	r0, r8
 8004318:	4649      	mov	r1, r9
 800431a:	f7fc fb4f 	bl	80009bc <__aeabi_dcmplt>
 800431e:	b110      	cbz	r0, 8004326 <_printf_float+0x86>
 8004320:	232d      	movs	r3, #45	@ 0x2d
 8004322:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004326:	4a92      	ldr	r2, [pc, #584]	@ (8004570 <_printf_float+0x2d0>)
 8004328:	4b92      	ldr	r3, [pc, #584]	@ (8004574 <_printf_float+0x2d4>)
 800432a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800432e:	bf94      	ite	ls
 8004330:	4690      	movls	r8, r2
 8004332:	4698      	movhi	r8, r3
 8004334:	2303      	movs	r3, #3
 8004336:	f04f 0900 	mov.w	r9, #0
 800433a:	6123      	str	r3, [r4, #16]
 800433c:	f02b 0304 	bic.w	r3, fp, #4
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	4633      	mov	r3, r6
 8004344:	4621      	mov	r1, r4
 8004346:	4628      	mov	r0, r5
 8004348:	9700      	str	r7, [sp, #0]
 800434a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800434c:	f000 f9d4 	bl	80046f8 <_printf_common>
 8004350:	3001      	adds	r0, #1
 8004352:	f040 8090 	bne.w	8004476 <_printf_float+0x1d6>
 8004356:	f04f 30ff 	mov.w	r0, #4294967295
 800435a:	b011      	add	sp, #68	@ 0x44
 800435c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	4640      	mov	r0, r8
 8004366:	4649      	mov	r1, r9
 8004368:	f7fc fb50 	bl	8000a0c <__aeabi_dcmpun>
 800436c:	b148      	cbz	r0, 8004382 <_printf_float+0xe2>
 800436e:	464b      	mov	r3, r9
 8004370:	2b00      	cmp	r3, #0
 8004372:	bfb8      	it	lt
 8004374:	232d      	movlt	r3, #45	@ 0x2d
 8004376:	4a80      	ldr	r2, [pc, #512]	@ (8004578 <_printf_float+0x2d8>)
 8004378:	bfb8      	it	lt
 800437a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800437e:	4b7f      	ldr	r3, [pc, #508]	@ (800457c <_printf_float+0x2dc>)
 8004380:	e7d3      	b.n	800432a <_printf_float+0x8a>
 8004382:	6863      	ldr	r3, [r4, #4]
 8004384:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	d13f      	bne.n	800440c <_printf_float+0x16c>
 800438c:	2306      	movs	r3, #6
 800438e:	6063      	str	r3, [r4, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004396:	6023      	str	r3, [r4, #0]
 8004398:	9206      	str	r2, [sp, #24]
 800439a:	aa0e      	add	r2, sp, #56	@ 0x38
 800439c:	e9cd a204 	strd	sl, r2, [sp, #16]
 80043a0:	aa0d      	add	r2, sp, #52	@ 0x34
 80043a2:	9203      	str	r2, [sp, #12]
 80043a4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80043a8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80043ac:	6863      	ldr	r3, [r4, #4]
 80043ae:	4642      	mov	r2, r8
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	4628      	mov	r0, r5
 80043b4:	464b      	mov	r3, r9
 80043b6:	910a      	str	r1, [sp, #40]	@ 0x28
 80043b8:	f7ff fed4 	bl	8004164 <__cvt>
 80043bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80043be:	4680      	mov	r8, r0
 80043c0:	2947      	cmp	r1, #71	@ 0x47
 80043c2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80043c4:	d128      	bne.n	8004418 <_printf_float+0x178>
 80043c6:	1cc8      	adds	r0, r1, #3
 80043c8:	db02      	blt.n	80043d0 <_printf_float+0x130>
 80043ca:	6863      	ldr	r3, [r4, #4]
 80043cc:	4299      	cmp	r1, r3
 80043ce:	dd40      	ble.n	8004452 <_printf_float+0x1b2>
 80043d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80043d4:	fa5f fa8a 	uxtb.w	sl, sl
 80043d8:	4652      	mov	r2, sl
 80043da:	3901      	subs	r1, #1
 80043dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80043e0:	910d      	str	r1, [sp, #52]	@ 0x34
 80043e2:	f7ff ff23 	bl	800422c <__exponent>
 80043e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80043e8:	4681      	mov	r9, r0
 80043ea:	1813      	adds	r3, r2, r0
 80043ec:	2a01      	cmp	r2, #1
 80043ee:	6123      	str	r3, [r4, #16]
 80043f0:	dc02      	bgt.n	80043f8 <_printf_float+0x158>
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	07d2      	lsls	r2, r2, #31
 80043f6:	d501      	bpl.n	80043fc <_printf_float+0x15c>
 80043f8:	3301      	adds	r3, #1
 80043fa:	6123      	str	r3, [r4, #16]
 80043fc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004400:	2b00      	cmp	r3, #0
 8004402:	d09e      	beq.n	8004342 <_printf_float+0xa2>
 8004404:	232d      	movs	r3, #45	@ 0x2d
 8004406:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800440a:	e79a      	b.n	8004342 <_printf_float+0xa2>
 800440c:	2947      	cmp	r1, #71	@ 0x47
 800440e:	d1bf      	bne.n	8004390 <_printf_float+0xf0>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1bd      	bne.n	8004390 <_printf_float+0xf0>
 8004414:	2301      	movs	r3, #1
 8004416:	e7ba      	b.n	800438e <_printf_float+0xee>
 8004418:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800441c:	d9dc      	bls.n	80043d8 <_printf_float+0x138>
 800441e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004422:	d118      	bne.n	8004456 <_printf_float+0x1b6>
 8004424:	2900      	cmp	r1, #0
 8004426:	6863      	ldr	r3, [r4, #4]
 8004428:	dd0b      	ble.n	8004442 <_printf_float+0x1a2>
 800442a:	6121      	str	r1, [r4, #16]
 800442c:	b913      	cbnz	r3, 8004434 <_printf_float+0x194>
 800442e:	6822      	ldr	r2, [r4, #0]
 8004430:	07d0      	lsls	r0, r2, #31
 8004432:	d502      	bpl.n	800443a <_printf_float+0x19a>
 8004434:	3301      	adds	r3, #1
 8004436:	440b      	add	r3, r1
 8004438:	6123      	str	r3, [r4, #16]
 800443a:	f04f 0900 	mov.w	r9, #0
 800443e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004440:	e7dc      	b.n	80043fc <_printf_float+0x15c>
 8004442:	b913      	cbnz	r3, 800444a <_printf_float+0x1aa>
 8004444:	6822      	ldr	r2, [r4, #0]
 8004446:	07d2      	lsls	r2, r2, #31
 8004448:	d501      	bpl.n	800444e <_printf_float+0x1ae>
 800444a:	3302      	adds	r3, #2
 800444c:	e7f4      	b.n	8004438 <_printf_float+0x198>
 800444e:	2301      	movs	r3, #1
 8004450:	e7f2      	b.n	8004438 <_printf_float+0x198>
 8004452:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004456:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004458:	4299      	cmp	r1, r3
 800445a:	db05      	blt.n	8004468 <_printf_float+0x1c8>
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	6121      	str	r1, [r4, #16]
 8004460:	07d8      	lsls	r0, r3, #31
 8004462:	d5ea      	bpl.n	800443a <_printf_float+0x19a>
 8004464:	1c4b      	adds	r3, r1, #1
 8004466:	e7e7      	b.n	8004438 <_printf_float+0x198>
 8004468:	2900      	cmp	r1, #0
 800446a:	bfcc      	ite	gt
 800446c:	2201      	movgt	r2, #1
 800446e:	f1c1 0202 	rsble	r2, r1, #2
 8004472:	4413      	add	r3, r2
 8004474:	e7e0      	b.n	8004438 <_printf_float+0x198>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	055a      	lsls	r2, r3, #21
 800447a:	d407      	bmi.n	800448c <_printf_float+0x1ec>
 800447c:	6923      	ldr	r3, [r4, #16]
 800447e:	4642      	mov	r2, r8
 8004480:	4631      	mov	r1, r6
 8004482:	4628      	mov	r0, r5
 8004484:	47b8      	blx	r7
 8004486:	3001      	adds	r0, #1
 8004488:	d12b      	bne.n	80044e2 <_printf_float+0x242>
 800448a:	e764      	b.n	8004356 <_printf_float+0xb6>
 800448c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004490:	f240 80dc 	bls.w	800464c <_printf_float+0x3ac>
 8004494:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004498:	2200      	movs	r2, #0
 800449a:	2300      	movs	r3, #0
 800449c:	f7fc fa84 	bl	80009a8 <__aeabi_dcmpeq>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d033      	beq.n	800450c <_printf_float+0x26c>
 80044a4:	2301      	movs	r3, #1
 80044a6:	4631      	mov	r1, r6
 80044a8:	4628      	mov	r0, r5
 80044aa:	4a35      	ldr	r2, [pc, #212]	@ (8004580 <_printf_float+0x2e0>)
 80044ac:	47b8      	blx	r7
 80044ae:	3001      	adds	r0, #1
 80044b0:	f43f af51 	beq.w	8004356 <_printf_float+0xb6>
 80044b4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80044b8:	4543      	cmp	r3, r8
 80044ba:	db02      	blt.n	80044c2 <_printf_float+0x222>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	07d8      	lsls	r0, r3, #31
 80044c0:	d50f      	bpl.n	80044e2 <_printf_float+0x242>
 80044c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044c6:	4631      	mov	r1, r6
 80044c8:	4628      	mov	r0, r5
 80044ca:	47b8      	blx	r7
 80044cc:	3001      	adds	r0, #1
 80044ce:	f43f af42 	beq.w	8004356 <_printf_float+0xb6>
 80044d2:	f04f 0900 	mov.w	r9, #0
 80044d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80044da:	f104 0a1a 	add.w	sl, r4, #26
 80044de:	45c8      	cmp	r8, r9
 80044e0:	dc09      	bgt.n	80044f6 <_printf_float+0x256>
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	079b      	lsls	r3, r3, #30
 80044e6:	f100 8102 	bmi.w	80046ee <_printf_float+0x44e>
 80044ea:	68e0      	ldr	r0, [r4, #12]
 80044ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044ee:	4298      	cmp	r0, r3
 80044f0:	bfb8      	it	lt
 80044f2:	4618      	movlt	r0, r3
 80044f4:	e731      	b.n	800435a <_printf_float+0xba>
 80044f6:	2301      	movs	r3, #1
 80044f8:	4652      	mov	r2, sl
 80044fa:	4631      	mov	r1, r6
 80044fc:	4628      	mov	r0, r5
 80044fe:	47b8      	blx	r7
 8004500:	3001      	adds	r0, #1
 8004502:	f43f af28 	beq.w	8004356 <_printf_float+0xb6>
 8004506:	f109 0901 	add.w	r9, r9, #1
 800450a:	e7e8      	b.n	80044de <_printf_float+0x23e>
 800450c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800450e:	2b00      	cmp	r3, #0
 8004510:	dc38      	bgt.n	8004584 <_printf_float+0x2e4>
 8004512:	2301      	movs	r3, #1
 8004514:	4631      	mov	r1, r6
 8004516:	4628      	mov	r0, r5
 8004518:	4a19      	ldr	r2, [pc, #100]	@ (8004580 <_printf_float+0x2e0>)
 800451a:	47b8      	blx	r7
 800451c:	3001      	adds	r0, #1
 800451e:	f43f af1a 	beq.w	8004356 <_printf_float+0xb6>
 8004522:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004526:	ea59 0303 	orrs.w	r3, r9, r3
 800452a:	d102      	bne.n	8004532 <_printf_float+0x292>
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	07d9      	lsls	r1, r3, #31
 8004530:	d5d7      	bpl.n	80044e2 <_printf_float+0x242>
 8004532:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004536:	4631      	mov	r1, r6
 8004538:	4628      	mov	r0, r5
 800453a:	47b8      	blx	r7
 800453c:	3001      	adds	r0, #1
 800453e:	f43f af0a 	beq.w	8004356 <_printf_float+0xb6>
 8004542:	f04f 0a00 	mov.w	sl, #0
 8004546:	f104 0b1a 	add.w	fp, r4, #26
 800454a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800454c:	425b      	negs	r3, r3
 800454e:	4553      	cmp	r3, sl
 8004550:	dc01      	bgt.n	8004556 <_printf_float+0x2b6>
 8004552:	464b      	mov	r3, r9
 8004554:	e793      	b.n	800447e <_printf_float+0x1de>
 8004556:	2301      	movs	r3, #1
 8004558:	465a      	mov	r2, fp
 800455a:	4631      	mov	r1, r6
 800455c:	4628      	mov	r0, r5
 800455e:	47b8      	blx	r7
 8004560:	3001      	adds	r0, #1
 8004562:	f43f aef8 	beq.w	8004356 <_printf_float+0xb6>
 8004566:	f10a 0a01 	add.w	sl, sl, #1
 800456a:	e7ee      	b.n	800454a <_printf_float+0x2aa>
 800456c:	7fefffff 	.word	0x7fefffff
 8004570:	08008a1e 	.word	0x08008a1e
 8004574:	08008a22 	.word	0x08008a22
 8004578:	08008a26 	.word	0x08008a26
 800457c:	08008a2a 	.word	0x08008a2a
 8004580:	08008a2e 	.word	0x08008a2e
 8004584:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004586:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800458a:	4553      	cmp	r3, sl
 800458c:	bfa8      	it	ge
 800458e:	4653      	movge	r3, sl
 8004590:	2b00      	cmp	r3, #0
 8004592:	4699      	mov	r9, r3
 8004594:	dc36      	bgt.n	8004604 <_printf_float+0x364>
 8004596:	f04f 0b00 	mov.w	fp, #0
 800459a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800459e:	f104 021a 	add.w	r2, r4, #26
 80045a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80045a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80045a6:	eba3 0309 	sub.w	r3, r3, r9
 80045aa:	455b      	cmp	r3, fp
 80045ac:	dc31      	bgt.n	8004612 <_printf_float+0x372>
 80045ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045b0:	459a      	cmp	sl, r3
 80045b2:	dc3a      	bgt.n	800462a <_printf_float+0x38a>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	07da      	lsls	r2, r3, #31
 80045b8:	d437      	bmi.n	800462a <_printf_float+0x38a>
 80045ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045bc:	ebaa 0903 	sub.w	r9, sl, r3
 80045c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045c2:	ebaa 0303 	sub.w	r3, sl, r3
 80045c6:	4599      	cmp	r9, r3
 80045c8:	bfa8      	it	ge
 80045ca:	4699      	movge	r9, r3
 80045cc:	f1b9 0f00 	cmp.w	r9, #0
 80045d0:	dc33      	bgt.n	800463a <_printf_float+0x39a>
 80045d2:	f04f 0800 	mov.w	r8, #0
 80045d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045da:	f104 0b1a 	add.w	fp, r4, #26
 80045de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045e0:	ebaa 0303 	sub.w	r3, sl, r3
 80045e4:	eba3 0309 	sub.w	r3, r3, r9
 80045e8:	4543      	cmp	r3, r8
 80045ea:	f77f af7a 	ble.w	80044e2 <_printf_float+0x242>
 80045ee:	2301      	movs	r3, #1
 80045f0:	465a      	mov	r2, fp
 80045f2:	4631      	mov	r1, r6
 80045f4:	4628      	mov	r0, r5
 80045f6:	47b8      	blx	r7
 80045f8:	3001      	adds	r0, #1
 80045fa:	f43f aeac 	beq.w	8004356 <_printf_float+0xb6>
 80045fe:	f108 0801 	add.w	r8, r8, #1
 8004602:	e7ec      	b.n	80045de <_printf_float+0x33e>
 8004604:	4642      	mov	r2, r8
 8004606:	4631      	mov	r1, r6
 8004608:	4628      	mov	r0, r5
 800460a:	47b8      	blx	r7
 800460c:	3001      	adds	r0, #1
 800460e:	d1c2      	bne.n	8004596 <_printf_float+0x2f6>
 8004610:	e6a1      	b.n	8004356 <_printf_float+0xb6>
 8004612:	2301      	movs	r3, #1
 8004614:	4631      	mov	r1, r6
 8004616:	4628      	mov	r0, r5
 8004618:	920a      	str	r2, [sp, #40]	@ 0x28
 800461a:	47b8      	blx	r7
 800461c:	3001      	adds	r0, #1
 800461e:	f43f ae9a 	beq.w	8004356 <_printf_float+0xb6>
 8004622:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004624:	f10b 0b01 	add.w	fp, fp, #1
 8004628:	e7bb      	b.n	80045a2 <_printf_float+0x302>
 800462a:	4631      	mov	r1, r6
 800462c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004630:	4628      	mov	r0, r5
 8004632:	47b8      	blx	r7
 8004634:	3001      	adds	r0, #1
 8004636:	d1c0      	bne.n	80045ba <_printf_float+0x31a>
 8004638:	e68d      	b.n	8004356 <_printf_float+0xb6>
 800463a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800463c:	464b      	mov	r3, r9
 800463e:	4631      	mov	r1, r6
 8004640:	4628      	mov	r0, r5
 8004642:	4442      	add	r2, r8
 8004644:	47b8      	blx	r7
 8004646:	3001      	adds	r0, #1
 8004648:	d1c3      	bne.n	80045d2 <_printf_float+0x332>
 800464a:	e684      	b.n	8004356 <_printf_float+0xb6>
 800464c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004650:	f1ba 0f01 	cmp.w	sl, #1
 8004654:	dc01      	bgt.n	800465a <_printf_float+0x3ba>
 8004656:	07db      	lsls	r3, r3, #31
 8004658:	d536      	bpl.n	80046c8 <_printf_float+0x428>
 800465a:	2301      	movs	r3, #1
 800465c:	4642      	mov	r2, r8
 800465e:	4631      	mov	r1, r6
 8004660:	4628      	mov	r0, r5
 8004662:	47b8      	blx	r7
 8004664:	3001      	adds	r0, #1
 8004666:	f43f ae76 	beq.w	8004356 <_printf_float+0xb6>
 800466a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800466e:	4631      	mov	r1, r6
 8004670:	4628      	mov	r0, r5
 8004672:	47b8      	blx	r7
 8004674:	3001      	adds	r0, #1
 8004676:	f43f ae6e 	beq.w	8004356 <_printf_float+0xb6>
 800467a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800467e:	2200      	movs	r2, #0
 8004680:	2300      	movs	r3, #0
 8004682:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004686:	f7fc f98f 	bl	80009a8 <__aeabi_dcmpeq>
 800468a:	b9c0      	cbnz	r0, 80046be <_printf_float+0x41e>
 800468c:	4653      	mov	r3, sl
 800468e:	f108 0201 	add.w	r2, r8, #1
 8004692:	4631      	mov	r1, r6
 8004694:	4628      	mov	r0, r5
 8004696:	47b8      	blx	r7
 8004698:	3001      	adds	r0, #1
 800469a:	d10c      	bne.n	80046b6 <_printf_float+0x416>
 800469c:	e65b      	b.n	8004356 <_printf_float+0xb6>
 800469e:	2301      	movs	r3, #1
 80046a0:	465a      	mov	r2, fp
 80046a2:	4631      	mov	r1, r6
 80046a4:	4628      	mov	r0, r5
 80046a6:	47b8      	blx	r7
 80046a8:	3001      	adds	r0, #1
 80046aa:	f43f ae54 	beq.w	8004356 <_printf_float+0xb6>
 80046ae:	f108 0801 	add.w	r8, r8, #1
 80046b2:	45d0      	cmp	r8, sl
 80046b4:	dbf3      	blt.n	800469e <_printf_float+0x3fe>
 80046b6:	464b      	mov	r3, r9
 80046b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80046bc:	e6e0      	b.n	8004480 <_printf_float+0x1e0>
 80046be:	f04f 0800 	mov.w	r8, #0
 80046c2:	f104 0b1a 	add.w	fp, r4, #26
 80046c6:	e7f4      	b.n	80046b2 <_printf_float+0x412>
 80046c8:	2301      	movs	r3, #1
 80046ca:	4642      	mov	r2, r8
 80046cc:	e7e1      	b.n	8004692 <_printf_float+0x3f2>
 80046ce:	2301      	movs	r3, #1
 80046d0:	464a      	mov	r2, r9
 80046d2:	4631      	mov	r1, r6
 80046d4:	4628      	mov	r0, r5
 80046d6:	47b8      	blx	r7
 80046d8:	3001      	adds	r0, #1
 80046da:	f43f ae3c 	beq.w	8004356 <_printf_float+0xb6>
 80046de:	f108 0801 	add.w	r8, r8, #1
 80046e2:	68e3      	ldr	r3, [r4, #12]
 80046e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80046e6:	1a5b      	subs	r3, r3, r1
 80046e8:	4543      	cmp	r3, r8
 80046ea:	dcf0      	bgt.n	80046ce <_printf_float+0x42e>
 80046ec:	e6fd      	b.n	80044ea <_printf_float+0x24a>
 80046ee:	f04f 0800 	mov.w	r8, #0
 80046f2:	f104 0919 	add.w	r9, r4, #25
 80046f6:	e7f4      	b.n	80046e2 <_printf_float+0x442>

080046f8 <_printf_common>:
 80046f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046fc:	4616      	mov	r6, r2
 80046fe:	4698      	mov	r8, r3
 8004700:	688a      	ldr	r2, [r1, #8]
 8004702:	690b      	ldr	r3, [r1, #16]
 8004704:	4607      	mov	r7, r0
 8004706:	4293      	cmp	r3, r2
 8004708:	bfb8      	it	lt
 800470a:	4613      	movlt	r3, r2
 800470c:	6033      	str	r3, [r6, #0]
 800470e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004712:	460c      	mov	r4, r1
 8004714:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004718:	b10a      	cbz	r2, 800471e <_printf_common+0x26>
 800471a:	3301      	adds	r3, #1
 800471c:	6033      	str	r3, [r6, #0]
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	0699      	lsls	r1, r3, #26
 8004722:	bf42      	ittt	mi
 8004724:	6833      	ldrmi	r3, [r6, #0]
 8004726:	3302      	addmi	r3, #2
 8004728:	6033      	strmi	r3, [r6, #0]
 800472a:	6825      	ldr	r5, [r4, #0]
 800472c:	f015 0506 	ands.w	r5, r5, #6
 8004730:	d106      	bne.n	8004740 <_printf_common+0x48>
 8004732:	f104 0a19 	add.w	sl, r4, #25
 8004736:	68e3      	ldr	r3, [r4, #12]
 8004738:	6832      	ldr	r2, [r6, #0]
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	42ab      	cmp	r3, r5
 800473e:	dc2b      	bgt.n	8004798 <_printf_common+0xa0>
 8004740:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004744:	6822      	ldr	r2, [r4, #0]
 8004746:	3b00      	subs	r3, #0
 8004748:	bf18      	it	ne
 800474a:	2301      	movne	r3, #1
 800474c:	0692      	lsls	r2, r2, #26
 800474e:	d430      	bmi.n	80047b2 <_printf_common+0xba>
 8004750:	4641      	mov	r1, r8
 8004752:	4638      	mov	r0, r7
 8004754:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004758:	47c8      	blx	r9
 800475a:	3001      	adds	r0, #1
 800475c:	d023      	beq.n	80047a6 <_printf_common+0xae>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	6922      	ldr	r2, [r4, #16]
 8004762:	f003 0306 	and.w	r3, r3, #6
 8004766:	2b04      	cmp	r3, #4
 8004768:	bf14      	ite	ne
 800476a:	2500      	movne	r5, #0
 800476c:	6833      	ldreq	r3, [r6, #0]
 800476e:	f04f 0600 	mov.w	r6, #0
 8004772:	bf08      	it	eq
 8004774:	68e5      	ldreq	r5, [r4, #12]
 8004776:	f104 041a 	add.w	r4, r4, #26
 800477a:	bf08      	it	eq
 800477c:	1aed      	subeq	r5, r5, r3
 800477e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004782:	bf08      	it	eq
 8004784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004788:	4293      	cmp	r3, r2
 800478a:	bfc4      	itt	gt
 800478c:	1a9b      	subgt	r3, r3, r2
 800478e:	18ed      	addgt	r5, r5, r3
 8004790:	42b5      	cmp	r5, r6
 8004792:	d11a      	bne.n	80047ca <_printf_common+0xd2>
 8004794:	2000      	movs	r0, #0
 8004796:	e008      	b.n	80047aa <_printf_common+0xb2>
 8004798:	2301      	movs	r3, #1
 800479a:	4652      	mov	r2, sl
 800479c:	4641      	mov	r1, r8
 800479e:	4638      	mov	r0, r7
 80047a0:	47c8      	blx	r9
 80047a2:	3001      	adds	r0, #1
 80047a4:	d103      	bne.n	80047ae <_printf_common+0xb6>
 80047a6:	f04f 30ff 	mov.w	r0, #4294967295
 80047aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ae:	3501      	adds	r5, #1
 80047b0:	e7c1      	b.n	8004736 <_printf_common+0x3e>
 80047b2:	2030      	movs	r0, #48	@ 0x30
 80047b4:	18e1      	adds	r1, r4, r3
 80047b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047c0:	4422      	add	r2, r4
 80047c2:	3302      	adds	r3, #2
 80047c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047c8:	e7c2      	b.n	8004750 <_printf_common+0x58>
 80047ca:	2301      	movs	r3, #1
 80047cc:	4622      	mov	r2, r4
 80047ce:	4641      	mov	r1, r8
 80047d0:	4638      	mov	r0, r7
 80047d2:	47c8      	blx	r9
 80047d4:	3001      	adds	r0, #1
 80047d6:	d0e6      	beq.n	80047a6 <_printf_common+0xae>
 80047d8:	3601      	adds	r6, #1
 80047da:	e7d9      	b.n	8004790 <_printf_common+0x98>

080047dc <_printf_i>:
 80047dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047e0:	7e0f      	ldrb	r7, [r1, #24]
 80047e2:	4691      	mov	r9, r2
 80047e4:	2f78      	cmp	r7, #120	@ 0x78
 80047e6:	4680      	mov	r8, r0
 80047e8:	460c      	mov	r4, r1
 80047ea:	469a      	mov	sl, r3
 80047ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047f2:	d807      	bhi.n	8004804 <_printf_i+0x28>
 80047f4:	2f62      	cmp	r7, #98	@ 0x62
 80047f6:	d80a      	bhi.n	800480e <_printf_i+0x32>
 80047f8:	2f00      	cmp	r7, #0
 80047fa:	f000 80d3 	beq.w	80049a4 <_printf_i+0x1c8>
 80047fe:	2f58      	cmp	r7, #88	@ 0x58
 8004800:	f000 80ba 	beq.w	8004978 <_printf_i+0x19c>
 8004804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004808:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800480c:	e03a      	b.n	8004884 <_printf_i+0xa8>
 800480e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004812:	2b15      	cmp	r3, #21
 8004814:	d8f6      	bhi.n	8004804 <_printf_i+0x28>
 8004816:	a101      	add	r1, pc, #4	@ (adr r1, 800481c <_printf_i+0x40>)
 8004818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800481c:	08004875 	.word	0x08004875
 8004820:	08004889 	.word	0x08004889
 8004824:	08004805 	.word	0x08004805
 8004828:	08004805 	.word	0x08004805
 800482c:	08004805 	.word	0x08004805
 8004830:	08004805 	.word	0x08004805
 8004834:	08004889 	.word	0x08004889
 8004838:	08004805 	.word	0x08004805
 800483c:	08004805 	.word	0x08004805
 8004840:	08004805 	.word	0x08004805
 8004844:	08004805 	.word	0x08004805
 8004848:	0800498b 	.word	0x0800498b
 800484c:	080048b3 	.word	0x080048b3
 8004850:	08004945 	.word	0x08004945
 8004854:	08004805 	.word	0x08004805
 8004858:	08004805 	.word	0x08004805
 800485c:	080049ad 	.word	0x080049ad
 8004860:	08004805 	.word	0x08004805
 8004864:	080048b3 	.word	0x080048b3
 8004868:	08004805 	.word	0x08004805
 800486c:	08004805 	.word	0x08004805
 8004870:	0800494d 	.word	0x0800494d
 8004874:	6833      	ldr	r3, [r6, #0]
 8004876:	1d1a      	adds	r2, r3, #4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6032      	str	r2, [r6, #0]
 800487c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004880:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004884:	2301      	movs	r3, #1
 8004886:	e09e      	b.n	80049c6 <_printf_i+0x1ea>
 8004888:	6833      	ldr	r3, [r6, #0]
 800488a:	6820      	ldr	r0, [r4, #0]
 800488c:	1d19      	adds	r1, r3, #4
 800488e:	6031      	str	r1, [r6, #0]
 8004890:	0606      	lsls	r6, r0, #24
 8004892:	d501      	bpl.n	8004898 <_printf_i+0xbc>
 8004894:	681d      	ldr	r5, [r3, #0]
 8004896:	e003      	b.n	80048a0 <_printf_i+0xc4>
 8004898:	0645      	lsls	r5, r0, #25
 800489a:	d5fb      	bpl.n	8004894 <_printf_i+0xb8>
 800489c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048a0:	2d00      	cmp	r5, #0
 80048a2:	da03      	bge.n	80048ac <_printf_i+0xd0>
 80048a4:	232d      	movs	r3, #45	@ 0x2d
 80048a6:	426d      	negs	r5, r5
 80048a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048ac:	230a      	movs	r3, #10
 80048ae:	4859      	ldr	r0, [pc, #356]	@ (8004a14 <_printf_i+0x238>)
 80048b0:	e011      	b.n	80048d6 <_printf_i+0xfa>
 80048b2:	6821      	ldr	r1, [r4, #0]
 80048b4:	6833      	ldr	r3, [r6, #0]
 80048b6:	0608      	lsls	r0, r1, #24
 80048b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80048bc:	d402      	bmi.n	80048c4 <_printf_i+0xe8>
 80048be:	0649      	lsls	r1, r1, #25
 80048c0:	bf48      	it	mi
 80048c2:	b2ad      	uxthmi	r5, r5
 80048c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80048c6:	6033      	str	r3, [r6, #0]
 80048c8:	bf14      	ite	ne
 80048ca:	230a      	movne	r3, #10
 80048cc:	2308      	moveq	r3, #8
 80048ce:	4851      	ldr	r0, [pc, #324]	@ (8004a14 <_printf_i+0x238>)
 80048d0:	2100      	movs	r1, #0
 80048d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048d6:	6866      	ldr	r6, [r4, #4]
 80048d8:	2e00      	cmp	r6, #0
 80048da:	bfa8      	it	ge
 80048dc:	6821      	ldrge	r1, [r4, #0]
 80048de:	60a6      	str	r6, [r4, #8]
 80048e0:	bfa4      	itt	ge
 80048e2:	f021 0104 	bicge.w	r1, r1, #4
 80048e6:	6021      	strge	r1, [r4, #0]
 80048e8:	b90d      	cbnz	r5, 80048ee <_printf_i+0x112>
 80048ea:	2e00      	cmp	r6, #0
 80048ec:	d04b      	beq.n	8004986 <_printf_i+0x1aa>
 80048ee:	4616      	mov	r6, r2
 80048f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80048f4:	fb03 5711 	mls	r7, r3, r1, r5
 80048f8:	5dc7      	ldrb	r7, [r0, r7]
 80048fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048fe:	462f      	mov	r7, r5
 8004900:	42bb      	cmp	r3, r7
 8004902:	460d      	mov	r5, r1
 8004904:	d9f4      	bls.n	80048f0 <_printf_i+0x114>
 8004906:	2b08      	cmp	r3, #8
 8004908:	d10b      	bne.n	8004922 <_printf_i+0x146>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	07df      	lsls	r7, r3, #31
 800490e:	d508      	bpl.n	8004922 <_printf_i+0x146>
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	6861      	ldr	r1, [r4, #4]
 8004914:	4299      	cmp	r1, r3
 8004916:	bfde      	ittt	le
 8004918:	2330      	movle	r3, #48	@ 0x30
 800491a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800491e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004922:	1b92      	subs	r2, r2, r6
 8004924:	6122      	str	r2, [r4, #16]
 8004926:	464b      	mov	r3, r9
 8004928:	4621      	mov	r1, r4
 800492a:	4640      	mov	r0, r8
 800492c:	f8cd a000 	str.w	sl, [sp]
 8004930:	aa03      	add	r2, sp, #12
 8004932:	f7ff fee1 	bl	80046f8 <_printf_common>
 8004936:	3001      	adds	r0, #1
 8004938:	d14a      	bne.n	80049d0 <_printf_i+0x1f4>
 800493a:	f04f 30ff 	mov.w	r0, #4294967295
 800493e:	b004      	add	sp, #16
 8004940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	f043 0320 	orr.w	r3, r3, #32
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	2778      	movs	r7, #120	@ 0x78
 800494e:	4832      	ldr	r0, [pc, #200]	@ (8004a18 <_printf_i+0x23c>)
 8004950:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	6831      	ldr	r1, [r6, #0]
 8004958:	061f      	lsls	r7, r3, #24
 800495a:	f851 5b04 	ldr.w	r5, [r1], #4
 800495e:	d402      	bmi.n	8004966 <_printf_i+0x18a>
 8004960:	065f      	lsls	r7, r3, #25
 8004962:	bf48      	it	mi
 8004964:	b2ad      	uxthmi	r5, r5
 8004966:	6031      	str	r1, [r6, #0]
 8004968:	07d9      	lsls	r1, r3, #31
 800496a:	bf44      	itt	mi
 800496c:	f043 0320 	orrmi.w	r3, r3, #32
 8004970:	6023      	strmi	r3, [r4, #0]
 8004972:	b11d      	cbz	r5, 800497c <_printf_i+0x1a0>
 8004974:	2310      	movs	r3, #16
 8004976:	e7ab      	b.n	80048d0 <_printf_i+0xf4>
 8004978:	4826      	ldr	r0, [pc, #152]	@ (8004a14 <_printf_i+0x238>)
 800497a:	e7e9      	b.n	8004950 <_printf_i+0x174>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	f023 0320 	bic.w	r3, r3, #32
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	e7f6      	b.n	8004974 <_printf_i+0x198>
 8004986:	4616      	mov	r6, r2
 8004988:	e7bd      	b.n	8004906 <_printf_i+0x12a>
 800498a:	6833      	ldr	r3, [r6, #0]
 800498c:	6825      	ldr	r5, [r4, #0]
 800498e:	1d18      	adds	r0, r3, #4
 8004990:	6961      	ldr	r1, [r4, #20]
 8004992:	6030      	str	r0, [r6, #0]
 8004994:	062e      	lsls	r6, r5, #24
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	d501      	bpl.n	800499e <_printf_i+0x1c2>
 800499a:	6019      	str	r1, [r3, #0]
 800499c:	e002      	b.n	80049a4 <_printf_i+0x1c8>
 800499e:	0668      	lsls	r0, r5, #25
 80049a0:	d5fb      	bpl.n	800499a <_printf_i+0x1be>
 80049a2:	8019      	strh	r1, [r3, #0]
 80049a4:	2300      	movs	r3, #0
 80049a6:	4616      	mov	r6, r2
 80049a8:	6123      	str	r3, [r4, #16]
 80049aa:	e7bc      	b.n	8004926 <_printf_i+0x14a>
 80049ac:	6833      	ldr	r3, [r6, #0]
 80049ae:	2100      	movs	r1, #0
 80049b0:	1d1a      	adds	r2, r3, #4
 80049b2:	6032      	str	r2, [r6, #0]
 80049b4:	681e      	ldr	r6, [r3, #0]
 80049b6:	6862      	ldr	r2, [r4, #4]
 80049b8:	4630      	mov	r0, r6
 80049ba:	f000 fc06 	bl	80051ca <memchr>
 80049be:	b108      	cbz	r0, 80049c4 <_printf_i+0x1e8>
 80049c0:	1b80      	subs	r0, r0, r6
 80049c2:	6060      	str	r0, [r4, #4]
 80049c4:	6863      	ldr	r3, [r4, #4]
 80049c6:	6123      	str	r3, [r4, #16]
 80049c8:	2300      	movs	r3, #0
 80049ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049ce:	e7aa      	b.n	8004926 <_printf_i+0x14a>
 80049d0:	4632      	mov	r2, r6
 80049d2:	4649      	mov	r1, r9
 80049d4:	4640      	mov	r0, r8
 80049d6:	6923      	ldr	r3, [r4, #16]
 80049d8:	47d0      	blx	sl
 80049da:	3001      	adds	r0, #1
 80049dc:	d0ad      	beq.n	800493a <_printf_i+0x15e>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	079b      	lsls	r3, r3, #30
 80049e2:	d413      	bmi.n	8004a0c <_printf_i+0x230>
 80049e4:	68e0      	ldr	r0, [r4, #12]
 80049e6:	9b03      	ldr	r3, [sp, #12]
 80049e8:	4298      	cmp	r0, r3
 80049ea:	bfb8      	it	lt
 80049ec:	4618      	movlt	r0, r3
 80049ee:	e7a6      	b.n	800493e <_printf_i+0x162>
 80049f0:	2301      	movs	r3, #1
 80049f2:	4632      	mov	r2, r6
 80049f4:	4649      	mov	r1, r9
 80049f6:	4640      	mov	r0, r8
 80049f8:	47d0      	blx	sl
 80049fa:	3001      	adds	r0, #1
 80049fc:	d09d      	beq.n	800493a <_printf_i+0x15e>
 80049fe:	3501      	adds	r5, #1
 8004a00:	68e3      	ldr	r3, [r4, #12]
 8004a02:	9903      	ldr	r1, [sp, #12]
 8004a04:	1a5b      	subs	r3, r3, r1
 8004a06:	42ab      	cmp	r3, r5
 8004a08:	dcf2      	bgt.n	80049f0 <_printf_i+0x214>
 8004a0a:	e7eb      	b.n	80049e4 <_printf_i+0x208>
 8004a0c:	2500      	movs	r5, #0
 8004a0e:	f104 0619 	add.w	r6, r4, #25
 8004a12:	e7f5      	b.n	8004a00 <_printf_i+0x224>
 8004a14:	08008a30 	.word	0x08008a30
 8004a18:	08008a41 	.word	0x08008a41

08004a1c <_scanf_float>:
 8004a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a20:	b087      	sub	sp, #28
 8004a22:	9303      	str	r3, [sp, #12]
 8004a24:	688b      	ldr	r3, [r1, #8]
 8004a26:	4617      	mov	r7, r2
 8004a28:	1e5a      	subs	r2, r3, #1
 8004a2a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004a2e:	bf82      	ittt	hi
 8004a30:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004a34:	eb03 0b05 	addhi.w	fp, r3, r5
 8004a38:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004a3c:	460a      	mov	r2, r1
 8004a3e:	f04f 0500 	mov.w	r5, #0
 8004a42:	bf88      	it	hi
 8004a44:	608b      	strhi	r3, [r1, #8]
 8004a46:	680b      	ldr	r3, [r1, #0]
 8004a48:	4680      	mov	r8, r0
 8004a4a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004a4e:	f842 3b1c 	str.w	r3, [r2], #28
 8004a52:	460c      	mov	r4, r1
 8004a54:	bf98      	it	ls
 8004a56:	f04f 0b00 	movls.w	fp, #0
 8004a5a:	4616      	mov	r6, r2
 8004a5c:	46aa      	mov	sl, r5
 8004a5e:	46a9      	mov	r9, r5
 8004a60:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004a64:	9201      	str	r2, [sp, #4]
 8004a66:	9502      	str	r5, [sp, #8]
 8004a68:	68a2      	ldr	r2, [r4, #8]
 8004a6a:	b152      	cbz	r2, 8004a82 <_scanf_float+0x66>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b4e      	cmp	r3, #78	@ 0x4e
 8004a72:	d865      	bhi.n	8004b40 <_scanf_float+0x124>
 8004a74:	2b40      	cmp	r3, #64	@ 0x40
 8004a76:	d83d      	bhi.n	8004af4 <_scanf_float+0xd8>
 8004a78:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004a7c:	b2c8      	uxtb	r0, r1
 8004a7e:	280e      	cmp	r0, #14
 8004a80:	d93b      	bls.n	8004afa <_scanf_float+0xde>
 8004a82:	f1b9 0f00 	cmp.w	r9, #0
 8004a86:	d003      	beq.n	8004a90 <_scanf_float+0x74>
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a94:	f1ba 0f01 	cmp.w	sl, #1
 8004a98:	f200 8118 	bhi.w	8004ccc <_scanf_float+0x2b0>
 8004a9c:	9b01      	ldr	r3, [sp, #4]
 8004a9e:	429e      	cmp	r6, r3
 8004aa0:	f200 8109 	bhi.w	8004cb6 <_scanf_float+0x29a>
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	b007      	add	sp, #28
 8004aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aac:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004ab0:	2a0d      	cmp	r2, #13
 8004ab2:	d8e6      	bhi.n	8004a82 <_scanf_float+0x66>
 8004ab4:	a101      	add	r1, pc, #4	@ (adr r1, 8004abc <_scanf_float+0xa0>)
 8004ab6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004c03 	.word	0x08004c03
 8004ac0:	08004a83 	.word	0x08004a83
 8004ac4:	08004a83 	.word	0x08004a83
 8004ac8:	08004a83 	.word	0x08004a83
 8004acc:	08004c63 	.word	0x08004c63
 8004ad0:	08004c3b 	.word	0x08004c3b
 8004ad4:	08004a83 	.word	0x08004a83
 8004ad8:	08004a83 	.word	0x08004a83
 8004adc:	08004c11 	.word	0x08004c11
 8004ae0:	08004a83 	.word	0x08004a83
 8004ae4:	08004a83 	.word	0x08004a83
 8004ae8:	08004a83 	.word	0x08004a83
 8004aec:	08004a83 	.word	0x08004a83
 8004af0:	08004bc9 	.word	0x08004bc9
 8004af4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004af8:	e7da      	b.n	8004ab0 <_scanf_float+0x94>
 8004afa:	290e      	cmp	r1, #14
 8004afc:	d8c1      	bhi.n	8004a82 <_scanf_float+0x66>
 8004afe:	a001      	add	r0, pc, #4	@ (adr r0, 8004b04 <_scanf_float+0xe8>)
 8004b00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004b04:	08004bb9 	.word	0x08004bb9
 8004b08:	08004a83 	.word	0x08004a83
 8004b0c:	08004bb9 	.word	0x08004bb9
 8004b10:	08004c4f 	.word	0x08004c4f
 8004b14:	08004a83 	.word	0x08004a83
 8004b18:	08004b61 	.word	0x08004b61
 8004b1c:	08004b9f 	.word	0x08004b9f
 8004b20:	08004b9f 	.word	0x08004b9f
 8004b24:	08004b9f 	.word	0x08004b9f
 8004b28:	08004b9f 	.word	0x08004b9f
 8004b2c:	08004b9f 	.word	0x08004b9f
 8004b30:	08004b9f 	.word	0x08004b9f
 8004b34:	08004b9f 	.word	0x08004b9f
 8004b38:	08004b9f 	.word	0x08004b9f
 8004b3c:	08004b9f 	.word	0x08004b9f
 8004b40:	2b6e      	cmp	r3, #110	@ 0x6e
 8004b42:	d809      	bhi.n	8004b58 <_scanf_float+0x13c>
 8004b44:	2b60      	cmp	r3, #96	@ 0x60
 8004b46:	d8b1      	bhi.n	8004aac <_scanf_float+0x90>
 8004b48:	2b54      	cmp	r3, #84	@ 0x54
 8004b4a:	d07b      	beq.n	8004c44 <_scanf_float+0x228>
 8004b4c:	2b59      	cmp	r3, #89	@ 0x59
 8004b4e:	d198      	bne.n	8004a82 <_scanf_float+0x66>
 8004b50:	2d07      	cmp	r5, #7
 8004b52:	d196      	bne.n	8004a82 <_scanf_float+0x66>
 8004b54:	2508      	movs	r5, #8
 8004b56:	e02c      	b.n	8004bb2 <_scanf_float+0x196>
 8004b58:	2b74      	cmp	r3, #116	@ 0x74
 8004b5a:	d073      	beq.n	8004c44 <_scanf_float+0x228>
 8004b5c:	2b79      	cmp	r3, #121	@ 0x79
 8004b5e:	e7f6      	b.n	8004b4e <_scanf_float+0x132>
 8004b60:	6821      	ldr	r1, [r4, #0]
 8004b62:	05c8      	lsls	r0, r1, #23
 8004b64:	d51b      	bpl.n	8004b9e <_scanf_float+0x182>
 8004b66:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004b6a:	6021      	str	r1, [r4, #0]
 8004b6c:	f109 0901 	add.w	r9, r9, #1
 8004b70:	f1bb 0f00 	cmp.w	fp, #0
 8004b74:	d003      	beq.n	8004b7e <_scanf_float+0x162>
 8004b76:	3201      	adds	r2, #1
 8004b78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004b7c:	60a2      	str	r2, [r4, #8]
 8004b7e:	68a3      	ldr	r3, [r4, #8]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	60a3      	str	r3, [r4, #8]
 8004b84:	6923      	ldr	r3, [r4, #16]
 8004b86:	3301      	adds	r3, #1
 8004b88:	6123      	str	r3, [r4, #16]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	f340 8087 	ble.w	8004ca4 <_scanf_float+0x288>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	e764      	b.n	8004a68 <_scanf_float+0x4c>
 8004b9e:	eb1a 0105 	adds.w	r1, sl, r5
 8004ba2:	f47f af6e 	bne.w	8004a82 <_scanf_float+0x66>
 8004ba6:	460d      	mov	r5, r1
 8004ba8:	468a      	mov	sl, r1
 8004baa:	6822      	ldr	r2, [r4, #0]
 8004bac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004bb0:	6022      	str	r2, [r4, #0]
 8004bb2:	f806 3b01 	strb.w	r3, [r6], #1
 8004bb6:	e7e2      	b.n	8004b7e <_scanf_float+0x162>
 8004bb8:	6822      	ldr	r2, [r4, #0]
 8004bba:	0610      	lsls	r0, r2, #24
 8004bbc:	f57f af61 	bpl.w	8004a82 <_scanf_float+0x66>
 8004bc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bc4:	6022      	str	r2, [r4, #0]
 8004bc6:	e7f4      	b.n	8004bb2 <_scanf_float+0x196>
 8004bc8:	f1ba 0f00 	cmp.w	sl, #0
 8004bcc:	d10e      	bne.n	8004bec <_scanf_float+0x1d0>
 8004bce:	f1b9 0f00 	cmp.w	r9, #0
 8004bd2:	d10e      	bne.n	8004bf2 <_scanf_float+0x1d6>
 8004bd4:	6822      	ldr	r2, [r4, #0]
 8004bd6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004bda:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004bde:	d108      	bne.n	8004bf2 <_scanf_float+0x1d6>
 8004be0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004be4:	f04f 0a01 	mov.w	sl, #1
 8004be8:	6022      	str	r2, [r4, #0]
 8004bea:	e7e2      	b.n	8004bb2 <_scanf_float+0x196>
 8004bec:	f1ba 0f02 	cmp.w	sl, #2
 8004bf0:	d055      	beq.n	8004c9e <_scanf_float+0x282>
 8004bf2:	2d01      	cmp	r5, #1
 8004bf4:	d002      	beq.n	8004bfc <_scanf_float+0x1e0>
 8004bf6:	2d04      	cmp	r5, #4
 8004bf8:	f47f af43 	bne.w	8004a82 <_scanf_float+0x66>
 8004bfc:	3501      	adds	r5, #1
 8004bfe:	b2ed      	uxtb	r5, r5
 8004c00:	e7d7      	b.n	8004bb2 <_scanf_float+0x196>
 8004c02:	f1ba 0f01 	cmp.w	sl, #1
 8004c06:	f47f af3c 	bne.w	8004a82 <_scanf_float+0x66>
 8004c0a:	f04f 0a02 	mov.w	sl, #2
 8004c0e:	e7d0      	b.n	8004bb2 <_scanf_float+0x196>
 8004c10:	b97d      	cbnz	r5, 8004c32 <_scanf_float+0x216>
 8004c12:	f1b9 0f00 	cmp.w	r9, #0
 8004c16:	f47f af37 	bne.w	8004a88 <_scanf_float+0x6c>
 8004c1a:	6822      	ldr	r2, [r4, #0]
 8004c1c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004c20:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004c24:	f040 8103 	bne.w	8004e2e <_scanf_float+0x412>
 8004c28:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004c2c:	2501      	movs	r5, #1
 8004c2e:	6022      	str	r2, [r4, #0]
 8004c30:	e7bf      	b.n	8004bb2 <_scanf_float+0x196>
 8004c32:	2d03      	cmp	r5, #3
 8004c34:	d0e2      	beq.n	8004bfc <_scanf_float+0x1e0>
 8004c36:	2d05      	cmp	r5, #5
 8004c38:	e7de      	b.n	8004bf8 <_scanf_float+0x1dc>
 8004c3a:	2d02      	cmp	r5, #2
 8004c3c:	f47f af21 	bne.w	8004a82 <_scanf_float+0x66>
 8004c40:	2503      	movs	r5, #3
 8004c42:	e7b6      	b.n	8004bb2 <_scanf_float+0x196>
 8004c44:	2d06      	cmp	r5, #6
 8004c46:	f47f af1c 	bne.w	8004a82 <_scanf_float+0x66>
 8004c4a:	2507      	movs	r5, #7
 8004c4c:	e7b1      	b.n	8004bb2 <_scanf_float+0x196>
 8004c4e:	6822      	ldr	r2, [r4, #0]
 8004c50:	0591      	lsls	r1, r2, #22
 8004c52:	f57f af16 	bpl.w	8004a82 <_scanf_float+0x66>
 8004c56:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004c5a:	6022      	str	r2, [r4, #0]
 8004c5c:	f8cd 9008 	str.w	r9, [sp, #8]
 8004c60:	e7a7      	b.n	8004bb2 <_scanf_float+0x196>
 8004c62:	6822      	ldr	r2, [r4, #0]
 8004c64:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004c68:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004c6c:	d006      	beq.n	8004c7c <_scanf_float+0x260>
 8004c6e:	0550      	lsls	r0, r2, #21
 8004c70:	f57f af07 	bpl.w	8004a82 <_scanf_float+0x66>
 8004c74:	f1b9 0f00 	cmp.w	r9, #0
 8004c78:	f000 80d9 	beq.w	8004e2e <_scanf_float+0x412>
 8004c7c:	0591      	lsls	r1, r2, #22
 8004c7e:	bf58      	it	pl
 8004c80:	9902      	ldrpl	r1, [sp, #8]
 8004c82:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004c86:	bf58      	it	pl
 8004c88:	eba9 0101 	subpl.w	r1, r9, r1
 8004c8c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004c90:	f04f 0900 	mov.w	r9, #0
 8004c94:	bf58      	it	pl
 8004c96:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004c9a:	6022      	str	r2, [r4, #0]
 8004c9c:	e789      	b.n	8004bb2 <_scanf_float+0x196>
 8004c9e:	f04f 0a03 	mov.w	sl, #3
 8004ca2:	e786      	b.n	8004bb2 <_scanf_float+0x196>
 8004ca4:	4639      	mov	r1, r7
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004cac:	4798      	blx	r3
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	f43f aeda 	beq.w	8004a68 <_scanf_float+0x4c>
 8004cb4:	e6e5      	b.n	8004a82 <_scanf_float+0x66>
 8004cb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004cba:	463a      	mov	r2, r7
 8004cbc:	4640      	mov	r0, r8
 8004cbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004cc2:	4798      	blx	r3
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	6123      	str	r3, [r4, #16]
 8004cca:	e6e7      	b.n	8004a9c <_scanf_float+0x80>
 8004ccc:	1e6b      	subs	r3, r5, #1
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d824      	bhi.n	8004d1c <_scanf_float+0x300>
 8004cd2:	2d02      	cmp	r5, #2
 8004cd4:	d836      	bhi.n	8004d44 <_scanf_float+0x328>
 8004cd6:	9b01      	ldr	r3, [sp, #4]
 8004cd8:	429e      	cmp	r6, r3
 8004cda:	f67f aee3 	bls.w	8004aa4 <_scanf_float+0x88>
 8004cde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ce2:	463a      	mov	r2, r7
 8004ce4:	4640      	mov	r0, r8
 8004ce6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004cea:	4798      	blx	r3
 8004cec:	6923      	ldr	r3, [r4, #16]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	6123      	str	r3, [r4, #16]
 8004cf2:	e7f0      	b.n	8004cd6 <_scanf_float+0x2ba>
 8004cf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004cf8:	463a      	mov	r2, r7
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004d00:	4798      	blx	r3
 8004d02:	6923      	ldr	r3, [r4, #16]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	6123      	str	r3, [r4, #16]
 8004d08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d0c:	fa5f fa8a 	uxtb.w	sl, sl
 8004d10:	f1ba 0f02 	cmp.w	sl, #2
 8004d14:	d1ee      	bne.n	8004cf4 <_scanf_float+0x2d8>
 8004d16:	3d03      	subs	r5, #3
 8004d18:	b2ed      	uxtb	r5, r5
 8004d1a:	1b76      	subs	r6, r6, r5
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	05da      	lsls	r2, r3, #23
 8004d20:	d530      	bpl.n	8004d84 <_scanf_float+0x368>
 8004d22:	055b      	lsls	r3, r3, #21
 8004d24:	d511      	bpl.n	8004d4a <_scanf_float+0x32e>
 8004d26:	9b01      	ldr	r3, [sp, #4]
 8004d28:	429e      	cmp	r6, r3
 8004d2a:	f67f aebb 	bls.w	8004aa4 <_scanf_float+0x88>
 8004d2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004d32:	463a      	mov	r2, r7
 8004d34:	4640      	mov	r0, r8
 8004d36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004d3a:	4798      	blx	r3
 8004d3c:	6923      	ldr	r3, [r4, #16]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	6123      	str	r3, [r4, #16]
 8004d42:	e7f0      	b.n	8004d26 <_scanf_float+0x30a>
 8004d44:	46aa      	mov	sl, r5
 8004d46:	46b3      	mov	fp, r6
 8004d48:	e7de      	b.n	8004d08 <_scanf_float+0x2ec>
 8004d4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004d4e:	6923      	ldr	r3, [r4, #16]
 8004d50:	2965      	cmp	r1, #101	@ 0x65
 8004d52:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d56:	f106 35ff 	add.w	r5, r6, #4294967295
 8004d5a:	6123      	str	r3, [r4, #16]
 8004d5c:	d00c      	beq.n	8004d78 <_scanf_float+0x35c>
 8004d5e:	2945      	cmp	r1, #69	@ 0x45
 8004d60:	d00a      	beq.n	8004d78 <_scanf_float+0x35c>
 8004d62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004d66:	463a      	mov	r2, r7
 8004d68:	4640      	mov	r0, r8
 8004d6a:	4798      	blx	r3
 8004d6c:	6923      	ldr	r3, [r4, #16]
 8004d6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	1eb5      	subs	r5, r6, #2
 8004d76:	6123      	str	r3, [r4, #16]
 8004d78:	463a      	mov	r2, r7
 8004d7a:	4640      	mov	r0, r8
 8004d7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004d80:	4798      	blx	r3
 8004d82:	462e      	mov	r6, r5
 8004d84:	6822      	ldr	r2, [r4, #0]
 8004d86:	f012 0210 	ands.w	r2, r2, #16
 8004d8a:	d001      	beq.n	8004d90 <_scanf_float+0x374>
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	e68a      	b.n	8004aa6 <_scanf_float+0x8a>
 8004d90:	7032      	strb	r2, [r6, #0]
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d9c:	d11c      	bne.n	8004dd8 <_scanf_float+0x3bc>
 8004d9e:	9b02      	ldr	r3, [sp, #8]
 8004da0:	454b      	cmp	r3, r9
 8004da2:	eba3 0209 	sub.w	r2, r3, r9
 8004da6:	d123      	bne.n	8004df0 <_scanf_float+0x3d4>
 8004da8:	2200      	movs	r2, #0
 8004daa:	4640      	mov	r0, r8
 8004dac:	9901      	ldr	r1, [sp, #4]
 8004dae:	f002 fc0f 	bl	80075d0 <_strtod_r>
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	6825      	ldr	r5, [r4, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f015 0f02 	tst.w	r5, #2
 8004dbc:	4606      	mov	r6, r0
 8004dbe:	460f      	mov	r7, r1
 8004dc0:	f103 0204 	add.w	r2, r3, #4
 8004dc4:	d01f      	beq.n	8004e06 <_scanf_float+0x3ea>
 8004dc6:	9903      	ldr	r1, [sp, #12]
 8004dc8:	600a      	str	r2, [r1, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	e9c3 6700 	strd	r6, r7, [r3]
 8004dd0:	68e3      	ldr	r3, [r4, #12]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60e3      	str	r3, [r4, #12]
 8004dd6:	e7d9      	b.n	8004d8c <_scanf_float+0x370>
 8004dd8:	9b04      	ldr	r3, [sp, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0e4      	beq.n	8004da8 <_scanf_float+0x38c>
 8004dde:	9905      	ldr	r1, [sp, #20]
 8004de0:	230a      	movs	r3, #10
 8004de2:	4640      	mov	r0, r8
 8004de4:	3101      	adds	r1, #1
 8004de6:	f002 fc73 	bl	80076d0 <_strtol_r>
 8004dea:	9b04      	ldr	r3, [sp, #16]
 8004dec:	9e05      	ldr	r6, [sp, #20]
 8004dee:	1ac2      	subs	r2, r0, r3
 8004df0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004df4:	429e      	cmp	r6, r3
 8004df6:	bf28      	it	cs
 8004df8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	490d      	ldr	r1, [pc, #52]	@ (8004e34 <_scanf_float+0x418>)
 8004e00:	f000 f8de 	bl	8004fc0 <siprintf>
 8004e04:	e7d0      	b.n	8004da8 <_scanf_float+0x38c>
 8004e06:	076d      	lsls	r5, r5, #29
 8004e08:	d4dd      	bmi.n	8004dc6 <_scanf_float+0x3aa>
 8004e0a:	9d03      	ldr	r5, [sp, #12]
 8004e0c:	602a      	str	r2, [r5, #0]
 8004e0e:	681d      	ldr	r5, [r3, #0]
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	f7fb fdfa 	bl	8000a0c <__aeabi_dcmpun>
 8004e18:	b120      	cbz	r0, 8004e24 <_scanf_float+0x408>
 8004e1a:	4807      	ldr	r0, [pc, #28]	@ (8004e38 <_scanf_float+0x41c>)
 8004e1c:	f000 f9e4 	bl	80051e8 <nanf>
 8004e20:	6028      	str	r0, [r5, #0]
 8004e22:	e7d5      	b.n	8004dd0 <_scanf_float+0x3b4>
 8004e24:	4630      	mov	r0, r6
 8004e26:	4639      	mov	r1, r7
 8004e28:	f7fb fe4e 	bl	8000ac8 <__aeabi_d2f>
 8004e2c:	e7f8      	b.n	8004e20 <_scanf_float+0x404>
 8004e2e:	f04f 0900 	mov.w	r9, #0
 8004e32:	e62d      	b.n	8004a90 <_scanf_float+0x74>
 8004e34:	08008a52 	.word	0x08008a52
 8004e38:	08008ded 	.word	0x08008ded

08004e3c <std>:
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	4604      	mov	r4, r0
 8004e42:	e9c0 3300 	strd	r3, r3, [r0]
 8004e46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e4a:	6083      	str	r3, [r0, #8]
 8004e4c:	8181      	strh	r1, [r0, #12]
 8004e4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e50:	81c2      	strh	r2, [r0, #14]
 8004e52:	6183      	str	r3, [r0, #24]
 8004e54:	4619      	mov	r1, r3
 8004e56:	2208      	movs	r2, #8
 8004e58:	305c      	adds	r0, #92	@ 0x5c
 8004e5a:	f000 f914 	bl	8005086 <memset>
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e94 <std+0x58>)
 8004e60:	6224      	str	r4, [r4, #32]
 8004e62:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e64:	4b0c      	ldr	r3, [pc, #48]	@ (8004e98 <std+0x5c>)
 8004e66:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e68:	4b0c      	ldr	r3, [pc, #48]	@ (8004e9c <std+0x60>)
 8004e6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea0 <std+0x64>)
 8004e6e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea4 <std+0x68>)
 8004e72:	429c      	cmp	r4, r3
 8004e74:	d006      	beq.n	8004e84 <std+0x48>
 8004e76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e7a:	4294      	cmp	r4, r2
 8004e7c:	d002      	beq.n	8004e84 <std+0x48>
 8004e7e:	33d0      	adds	r3, #208	@ 0xd0
 8004e80:	429c      	cmp	r4, r3
 8004e82:	d105      	bne.n	8004e90 <std+0x54>
 8004e84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e8c:	f000 b99a 	b.w	80051c4 <__retarget_lock_init_recursive>
 8004e90:	bd10      	pop	{r4, pc}
 8004e92:	bf00      	nop
 8004e94:	08005001 	.word	0x08005001
 8004e98:	08005023 	.word	0x08005023
 8004e9c:	0800505b 	.word	0x0800505b
 8004ea0:	0800507f 	.word	0x0800507f
 8004ea4:	20000300 	.word	0x20000300

08004ea8 <stdio_exit_handler>:
 8004ea8:	4a02      	ldr	r2, [pc, #8]	@ (8004eb4 <stdio_exit_handler+0xc>)
 8004eaa:	4903      	ldr	r1, [pc, #12]	@ (8004eb8 <stdio_exit_handler+0x10>)
 8004eac:	4803      	ldr	r0, [pc, #12]	@ (8004ebc <stdio_exit_handler+0x14>)
 8004eae:	f000 b869 	b.w	8004f84 <_fwalk_sglue>
 8004eb2:	bf00      	nop
 8004eb4:	2000000c 	.word	0x2000000c
 8004eb8:	08007a85 	.word	0x08007a85
 8004ebc:	2000001c 	.word	0x2000001c

08004ec0 <cleanup_stdio>:
 8004ec0:	6841      	ldr	r1, [r0, #4]
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef4 <cleanup_stdio+0x34>)
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	4299      	cmp	r1, r3
 8004ec8:	4604      	mov	r4, r0
 8004eca:	d001      	beq.n	8004ed0 <cleanup_stdio+0x10>
 8004ecc:	f002 fdda 	bl	8007a84 <_fflush_r>
 8004ed0:	68a1      	ldr	r1, [r4, #8]
 8004ed2:	4b09      	ldr	r3, [pc, #36]	@ (8004ef8 <cleanup_stdio+0x38>)
 8004ed4:	4299      	cmp	r1, r3
 8004ed6:	d002      	beq.n	8004ede <cleanup_stdio+0x1e>
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f002 fdd3 	bl	8007a84 <_fflush_r>
 8004ede:	68e1      	ldr	r1, [r4, #12]
 8004ee0:	4b06      	ldr	r3, [pc, #24]	@ (8004efc <cleanup_stdio+0x3c>)
 8004ee2:	4299      	cmp	r1, r3
 8004ee4:	d004      	beq.n	8004ef0 <cleanup_stdio+0x30>
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eec:	f002 bdca 	b.w	8007a84 <_fflush_r>
 8004ef0:	bd10      	pop	{r4, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000300 	.word	0x20000300
 8004ef8:	20000368 	.word	0x20000368
 8004efc:	200003d0 	.word	0x200003d0

08004f00 <global_stdio_init.part.0>:
 8004f00:	b510      	push	{r4, lr}
 8004f02:	4b0b      	ldr	r3, [pc, #44]	@ (8004f30 <global_stdio_init.part.0+0x30>)
 8004f04:	4c0b      	ldr	r4, [pc, #44]	@ (8004f34 <global_stdio_init.part.0+0x34>)
 8004f06:	4a0c      	ldr	r2, [pc, #48]	@ (8004f38 <global_stdio_init.part.0+0x38>)
 8004f08:	4620      	mov	r0, r4
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	2104      	movs	r1, #4
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f7ff ff94 	bl	8004e3c <std>
 8004f14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f18:	2201      	movs	r2, #1
 8004f1a:	2109      	movs	r1, #9
 8004f1c:	f7ff ff8e 	bl	8004e3c <std>
 8004f20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f24:	2202      	movs	r2, #2
 8004f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f2a:	2112      	movs	r1, #18
 8004f2c:	f7ff bf86 	b.w	8004e3c <std>
 8004f30:	20000438 	.word	0x20000438
 8004f34:	20000300 	.word	0x20000300
 8004f38:	08004ea9 	.word	0x08004ea9

08004f3c <__sfp_lock_acquire>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	@ (8004f44 <__sfp_lock_acquire+0x8>)
 8004f3e:	f000 b942 	b.w	80051c6 <__retarget_lock_acquire_recursive>
 8004f42:	bf00      	nop
 8004f44:	20000441 	.word	0x20000441

08004f48 <__sfp_lock_release>:
 8004f48:	4801      	ldr	r0, [pc, #4]	@ (8004f50 <__sfp_lock_release+0x8>)
 8004f4a:	f000 b93d 	b.w	80051c8 <__retarget_lock_release_recursive>
 8004f4e:	bf00      	nop
 8004f50:	20000441 	.word	0x20000441

08004f54 <__sinit>:
 8004f54:	b510      	push	{r4, lr}
 8004f56:	4604      	mov	r4, r0
 8004f58:	f7ff fff0 	bl	8004f3c <__sfp_lock_acquire>
 8004f5c:	6a23      	ldr	r3, [r4, #32]
 8004f5e:	b11b      	cbz	r3, 8004f68 <__sinit+0x14>
 8004f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f64:	f7ff bff0 	b.w	8004f48 <__sfp_lock_release>
 8004f68:	4b04      	ldr	r3, [pc, #16]	@ (8004f7c <__sinit+0x28>)
 8004f6a:	6223      	str	r3, [r4, #32]
 8004f6c:	4b04      	ldr	r3, [pc, #16]	@ (8004f80 <__sinit+0x2c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f5      	bne.n	8004f60 <__sinit+0xc>
 8004f74:	f7ff ffc4 	bl	8004f00 <global_stdio_init.part.0>
 8004f78:	e7f2      	b.n	8004f60 <__sinit+0xc>
 8004f7a:	bf00      	nop
 8004f7c:	08004ec1 	.word	0x08004ec1
 8004f80:	20000438 	.word	0x20000438

08004f84 <_fwalk_sglue>:
 8004f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f88:	4607      	mov	r7, r0
 8004f8a:	4688      	mov	r8, r1
 8004f8c:	4614      	mov	r4, r2
 8004f8e:	2600      	movs	r6, #0
 8004f90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f94:	f1b9 0901 	subs.w	r9, r9, #1
 8004f98:	d505      	bpl.n	8004fa6 <_fwalk_sglue+0x22>
 8004f9a:	6824      	ldr	r4, [r4, #0]
 8004f9c:	2c00      	cmp	r4, #0
 8004f9e:	d1f7      	bne.n	8004f90 <_fwalk_sglue+0xc>
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fa6:	89ab      	ldrh	r3, [r5, #12]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d907      	bls.n	8004fbc <_fwalk_sglue+0x38>
 8004fac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	d003      	beq.n	8004fbc <_fwalk_sglue+0x38>
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	47c0      	blx	r8
 8004fba:	4306      	orrs	r6, r0
 8004fbc:	3568      	adds	r5, #104	@ 0x68
 8004fbe:	e7e9      	b.n	8004f94 <_fwalk_sglue+0x10>

08004fc0 <siprintf>:
 8004fc0:	b40e      	push	{r1, r2, r3}
 8004fc2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004fc6:	b500      	push	{lr}
 8004fc8:	b09c      	sub	sp, #112	@ 0x70
 8004fca:	ab1d      	add	r3, sp, #116	@ 0x74
 8004fcc:	9002      	str	r0, [sp, #8]
 8004fce:	9006      	str	r0, [sp, #24]
 8004fd0:	9107      	str	r1, [sp, #28]
 8004fd2:	9104      	str	r1, [sp, #16]
 8004fd4:	4808      	ldr	r0, [pc, #32]	@ (8004ff8 <siprintf+0x38>)
 8004fd6:	4909      	ldr	r1, [pc, #36]	@ (8004ffc <siprintf+0x3c>)
 8004fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fdc:	9105      	str	r1, [sp, #20]
 8004fde:	6800      	ldr	r0, [r0, #0]
 8004fe0:	a902      	add	r1, sp, #8
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	f002 fbd2 	bl	800778c <_svfiprintf_r>
 8004fe8:	2200      	movs	r2, #0
 8004fea:	9b02      	ldr	r3, [sp, #8]
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	b01c      	add	sp, #112	@ 0x70
 8004ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff4:	b003      	add	sp, #12
 8004ff6:	4770      	bx	lr
 8004ff8:	20000018 	.word	0x20000018
 8004ffc:	ffff0208 	.word	0xffff0208

08005000 <__sread>:
 8005000:	b510      	push	{r4, lr}
 8005002:	460c      	mov	r4, r1
 8005004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005008:	f000 f88e 	bl	8005128 <_read_r>
 800500c:	2800      	cmp	r0, #0
 800500e:	bfab      	itete	ge
 8005010:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005012:	89a3      	ldrhlt	r3, [r4, #12]
 8005014:	181b      	addge	r3, r3, r0
 8005016:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800501a:	bfac      	ite	ge
 800501c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800501e:	81a3      	strhlt	r3, [r4, #12]
 8005020:	bd10      	pop	{r4, pc}

08005022 <__swrite>:
 8005022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005026:	461f      	mov	r7, r3
 8005028:	898b      	ldrh	r3, [r1, #12]
 800502a:	4605      	mov	r5, r0
 800502c:	05db      	lsls	r3, r3, #23
 800502e:	460c      	mov	r4, r1
 8005030:	4616      	mov	r6, r2
 8005032:	d505      	bpl.n	8005040 <__swrite+0x1e>
 8005034:	2302      	movs	r3, #2
 8005036:	2200      	movs	r2, #0
 8005038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503c:	f000 f862 	bl	8005104 <_lseek_r>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	4632      	mov	r2, r6
 8005044:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005048:	81a3      	strh	r3, [r4, #12]
 800504a:	4628      	mov	r0, r5
 800504c:	463b      	mov	r3, r7
 800504e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005056:	f000 b879 	b.w	800514c <_write_r>

0800505a <__sseek>:
 800505a:	b510      	push	{r4, lr}
 800505c:	460c      	mov	r4, r1
 800505e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005062:	f000 f84f 	bl	8005104 <_lseek_r>
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	bf15      	itete	ne
 800506c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800506e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005072:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005076:	81a3      	strheq	r3, [r4, #12]
 8005078:	bf18      	it	ne
 800507a:	81a3      	strhne	r3, [r4, #12]
 800507c:	bd10      	pop	{r4, pc}

0800507e <__sclose>:
 800507e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005082:	f000 b82f 	b.w	80050e4 <_close_r>

08005086 <memset>:
 8005086:	4603      	mov	r3, r0
 8005088:	4402      	add	r2, r0
 800508a:	4293      	cmp	r3, r2
 800508c:	d100      	bne.n	8005090 <memset+0xa>
 800508e:	4770      	bx	lr
 8005090:	f803 1b01 	strb.w	r1, [r3], #1
 8005094:	e7f9      	b.n	800508a <memset+0x4>

08005096 <strchr>:
 8005096:	4603      	mov	r3, r0
 8005098:	b2c9      	uxtb	r1, r1
 800509a:	4618      	mov	r0, r3
 800509c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050a0:	b112      	cbz	r2, 80050a8 <strchr+0x12>
 80050a2:	428a      	cmp	r2, r1
 80050a4:	d1f9      	bne.n	800509a <strchr+0x4>
 80050a6:	4770      	bx	lr
 80050a8:	2900      	cmp	r1, #0
 80050aa:	bf18      	it	ne
 80050ac:	2000      	movne	r0, #0
 80050ae:	4770      	bx	lr

080050b0 <strstr>:
 80050b0:	780a      	ldrb	r2, [r1, #0]
 80050b2:	b570      	push	{r4, r5, r6, lr}
 80050b4:	b96a      	cbnz	r2, 80050d2 <strstr+0x22>
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d109      	bne.n	80050d0 <strstr+0x20>
 80050bc:	460c      	mov	r4, r1
 80050be:	4605      	mov	r5, r0
 80050c0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f6      	beq.n	80050b6 <strstr+0x6>
 80050c8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80050cc:	429e      	cmp	r6, r3
 80050ce:	d0f7      	beq.n	80050c0 <strstr+0x10>
 80050d0:	3001      	adds	r0, #1
 80050d2:	7803      	ldrb	r3, [r0, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1ef      	bne.n	80050b8 <strstr+0x8>
 80050d8:	4618      	mov	r0, r3
 80050da:	e7ec      	b.n	80050b6 <strstr+0x6>

080050dc <_localeconv_r>:
 80050dc:	4800      	ldr	r0, [pc, #0]	@ (80050e0 <_localeconv_r+0x4>)
 80050de:	4770      	bx	lr
 80050e0:	20000158 	.word	0x20000158

080050e4 <_close_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	2300      	movs	r3, #0
 80050e8:	4d05      	ldr	r5, [pc, #20]	@ (8005100 <_close_r+0x1c>)
 80050ea:	4604      	mov	r4, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	602b      	str	r3, [r5, #0]
 80050f0:	f7fc fcfb 	bl	8001aea <_close>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_close_r+0x1a>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_close_r+0x1a>
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	2000043c 	.word	0x2000043c

08005104 <_lseek_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4604      	mov	r4, r0
 8005108:	4608      	mov	r0, r1
 800510a:	4611      	mov	r1, r2
 800510c:	2200      	movs	r2, #0
 800510e:	4d05      	ldr	r5, [pc, #20]	@ (8005124 <_lseek_r+0x20>)
 8005110:	602a      	str	r2, [r5, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	f7fc fd0d 	bl	8001b32 <_lseek>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <_lseek_r+0x1e>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	b103      	cbz	r3, 8005122 <_lseek_r+0x1e>
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	2000043c 	.word	0x2000043c

08005128 <_read_r>:
 8005128:	b538      	push	{r3, r4, r5, lr}
 800512a:	4604      	mov	r4, r0
 800512c:	4608      	mov	r0, r1
 800512e:	4611      	mov	r1, r2
 8005130:	2200      	movs	r2, #0
 8005132:	4d05      	ldr	r5, [pc, #20]	@ (8005148 <_read_r+0x20>)
 8005134:	602a      	str	r2, [r5, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	f7fc fc9e 	bl	8001a78 <_read>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_read_r+0x1e>
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	b103      	cbz	r3, 8005146 <_read_r+0x1e>
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	2000043c 	.word	0x2000043c

0800514c <_write_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	4604      	mov	r4, r0
 8005150:	4608      	mov	r0, r1
 8005152:	4611      	mov	r1, r2
 8005154:	2200      	movs	r2, #0
 8005156:	4d05      	ldr	r5, [pc, #20]	@ (800516c <_write_r+0x20>)
 8005158:	602a      	str	r2, [r5, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	f7fc fca9 	bl	8001ab2 <_write>
 8005160:	1c43      	adds	r3, r0, #1
 8005162:	d102      	bne.n	800516a <_write_r+0x1e>
 8005164:	682b      	ldr	r3, [r5, #0]
 8005166:	b103      	cbz	r3, 800516a <_write_r+0x1e>
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	bd38      	pop	{r3, r4, r5, pc}
 800516c:	2000043c 	.word	0x2000043c

08005170 <__errno>:
 8005170:	4b01      	ldr	r3, [pc, #4]	@ (8005178 <__errno+0x8>)
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	20000018 	.word	0x20000018

0800517c <__libc_init_array>:
 800517c:	b570      	push	{r4, r5, r6, lr}
 800517e:	2600      	movs	r6, #0
 8005180:	4d0c      	ldr	r5, [pc, #48]	@ (80051b4 <__libc_init_array+0x38>)
 8005182:	4c0d      	ldr	r4, [pc, #52]	@ (80051b8 <__libc_init_array+0x3c>)
 8005184:	1b64      	subs	r4, r4, r5
 8005186:	10a4      	asrs	r4, r4, #2
 8005188:	42a6      	cmp	r6, r4
 800518a:	d109      	bne.n	80051a0 <__libc_init_array+0x24>
 800518c:	f003 fb66 	bl	800885c <_init>
 8005190:	2600      	movs	r6, #0
 8005192:	4d0a      	ldr	r5, [pc, #40]	@ (80051bc <__libc_init_array+0x40>)
 8005194:	4c0a      	ldr	r4, [pc, #40]	@ (80051c0 <__libc_init_array+0x44>)
 8005196:	1b64      	subs	r4, r4, r5
 8005198:	10a4      	asrs	r4, r4, #2
 800519a:	42a6      	cmp	r6, r4
 800519c:	d105      	bne.n	80051aa <__libc_init_array+0x2e>
 800519e:	bd70      	pop	{r4, r5, r6, pc}
 80051a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051a4:	4798      	blx	r3
 80051a6:	3601      	adds	r6, #1
 80051a8:	e7ee      	b.n	8005188 <__libc_init_array+0xc>
 80051aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ae:	4798      	blx	r3
 80051b0:	3601      	adds	r6, #1
 80051b2:	e7f2      	b.n	800519a <__libc_init_array+0x1e>
 80051b4:	08008e58 	.word	0x08008e58
 80051b8:	08008e58 	.word	0x08008e58
 80051bc:	08008e58 	.word	0x08008e58
 80051c0:	08008e5c 	.word	0x08008e5c

080051c4 <__retarget_lock_init_recursive>:
 80051c4:	4770      	bx	lr

080051c6 <__retarget_lock_acquire_recursive>:
 80051c6:	4770      	bx	lr

080051c8 <__retarget_lock_release_recursive>:
 80051c8:	4770      	bx	lr

080051ca <memchr>:
 80051ca:	4603      	mov	r3, r0
 80051cc:	b510      	push	{r4, lr}
 80051ce:	b2c9      	uxtb	r1, r1
 80051d0:	4402      	add	r2, r0
 80051d2:	4293      	cmp	r3, r2
 80051d4:	4618      	mov	r0, r3
 80051d6:	d101      	bne.n	80051dc <memchr+0x12>
 80051d8:	2000      	movs	r0, #0
 80051da:	e003      	b.n	80051e4 <memchr+0x1a>
 80051dc:	7804      	ldrb	r4, [r0, #0]
 80051de:	3301      	adds	r3, #1
 80051e0:	428c      	cmp	r4, r1
 80051e2:	d1f6      	bne.n	80051d2 <memchr+0x8>
 80051e4:	bd10      	pop	{r4, pc}
	...

080051e8 <nanf>:
 80051e8:	4800      	ldr	r0, [pc, #0]	@ (80051ec <nanf+0x4>)
 80051ea:	4770      	bx	lr
 80051ec:	7fc00000 	.word	0x7fc00000

080051f0 <quorem>:
 80051f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f4:	6903      	ldr	r3, [r0, #16]
 80051f6:	690c      	ldr	r4, [r1, #16]
 80051f8:	4607      	mov	r7, r0
 80051fa:	42a3      	cmp	r3, r4
 80051fc:	db7e      	blt.n	80052fc <quorem+0x10c>
 80051fe:	3c01      	subs	r4, #1
 8005200:	00a3      	lsls	r3, r4, #2
 8005202:	f100 0514 	add.w	r5, r0, #20
 8005206:	f101 0814 	add.w	r8, r1, #20
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005216:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800521a:	3301      	adds	r3, #1
 800521c:	429a      	cmp	r2, r3
 800521e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005222:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005226:	d32e      	bcc.n	8005286 <quorem+0x96>
 8005228:	f04f 0a00 	mov.w	sl, #0
 800522c:	46c4      	mov	ip, r8
 800522e:	46ae      	mov	lr, r5
 8005230:	46d3      	mov	fp, sl
 8005232:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005236:	b298      	uxth	r0, r3
 8005238:	fb06 a000 	mla	r0, r6, r0, sl
 800523c:	0c1b      	lsrs	r3, r3, #16
 800523e:	0c02      	lsrs	r2, r0, #16
 8005240:	fb06 2303 	mla	r3, r6, r3, r2
 8005244:	f8de 2000 	ldr.w	r2, [lr]
 8005248:	b280      	uxth	r0, r0
 800524a:	b292      	uxth	r2, r2
 800524c:	1a12      	subs	r2, r2, r0
 800524e:	445a      	add	r2, fp
 8005250:	f8de 0000 	ldr.w	r0, [lr]
 8005254:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005258:	b29b      	uxth	r3, r3
 800525a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800525e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005262:	b292      	uxth	r2, r2
 8005264:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005268:	45e1      	cmp	r9, ip
 800526a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800526e:	f84e 2b04 	str.w	r2, [lr], #4
 8005272:	d2de      	bcs.n	8005232 <quorem+0x42>
 8005274:	9b00      	ldr	r3, [sp, #0]
 8005276:	58eb      	ldr	r3, [r5, r3]
 8005278:	b92b      	cbnz	r3, 8005286 <quorem+0x96>
 800527a:	9b01      	ldr	r3, [sp, #4]
 800527c:	3b04      	subs	r3, #4
 800527e:	429d      	cmp	r5, r3
 8005280:	461a      	mov	r2, r3
 8005282:	d32f      	bcc.n	80052e4 <quorem+0xf4>
 8005284:	613c      	str	r4, [r7, #16]
 8005286:	4638      	mov	r0, r7
 8005288:	f001 f9c2 	bl	8006610 <__mcmp>
 800528c:	2800      	cmp	r0, #0
 800528e:	db25      	blt.n	80052dc <quorem+0xec>
 8005290:	4629      	mov	r1, r5
 8005292:	2000      	movs	r0, #0
 8005294:	f858 2b04 	ldr.w	r2, [r8], #4
 8005298:	f8d1 c000 	ldr.w	ip, [r1]
 800529c:	fa1f fe82 	uxth.w	lr, r2
 80052a0:	fa1f f38c 	uxth.w	r3, ip
 80052a4:	eba3 030e 	sub.w	r3, r3, lr
 80052a8:	4403      	add	r3, r0
 80052aa:	0c12      	lsrs	r2, r2, #16
 80052ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80052b0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052ba:	45c1      	cmp	r9, r8
 80052bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80052c0:	f841 3b04 	str.w	r3, [r1], #4
 80052c4:	d2e6      	bcs.n	8005294 <quorem+0xa4>
 80052c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052ce:	b922      	cbnz	r2, 80052da <quorem+0xea>
 80052d0:	3b04      	subs	r3, #4
 80052d2:	429d      	cmp	r5, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	d30b      	bcc.n	80052f0 <quorem+0x100>
 80052d8:	613c      	str	r4, [r7, #16]
 80052da:	3601      	adds	r6, #1
 80052dc:	4630      	mov	r0, r6
 80052de:	b003      	add	sp, #12
 80052e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	3b04      	subs	r3, #4
 80052e8:	2a00      	cmp	r2, #0
 80052ea:	d1cb      	bne.n	8005284 <quorem+0x94>
 80052ec:	3c01      	subs	r4, #1
 80052ee:	e7c6      	b.n	800527e <quorem+0x8e>
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	3b04      	subs	r3, #4
 80052f4:	2a00      	cmp	r2, #0
 80052f6:	d1ef      	bne.n	80052d8 <quorem+0xe8>
 80052f8:	3c01      	subs	r4, #1
 80052fa:	e7ea      	b.n	80052d2 <quorem+0xe2>
 80052fc:	2000      	movs	r0, #0
 80052fe:	e7ee      	b.n	80052de <quorem+0xee>

08005300 <_dtoa_r>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	4614      	mov	r4, r2
 8005306:	461d      	mov	r5, r3
 8005308:	69c7      	ldr	r7, [r0, #28]
 800530a:	b097      	sub	sp, #92	@ 0x5c
 800530c:	4683      	mov	fp, r0
 800530e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005312:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005314:	b97f      	cbnz	r7, 8005336 <_dtoa_r+0x36>
 8005316:	2010      	movs	r0, #16
 8005318:	f000 fe02 	bl	8005f20 <malloc>
 800531c:	4602      	mov	r2, r0
 800531e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005322:	b920      	cbnz	r0, 800532e <_dtoa_r+0x2e>
 8005324:	21ef      	movs	r1, #239	@ 0xef
 8005326:	4ba8      	ldr	r3, [pc, #672]	@ (80055c8 <_dtoa_r+0x2c8>)
 8005328:	48a8      	ldr	r0, [pc, #672]	@ (80055cc <_dtoa_r+0x2cc>)
 800532a:	f002 fc23 	bl	8007b74 <__assert_func>
 800532e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005332:	6007      	str	r7, [r0, #0]
 8005334:	60c7      	str	r7, [r0, #12]
 8005336:	f8db 301c 	ldr.w	r3, [fp, #28]
 800533a:	6819      	ldr	r1, [r3, #0]
 800533c:	b159      	cbz	r1, 8005356 <_dtoa_r+0x56>
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	2301      	movs	r3, #1
 8005342:	4093      	lsls	r3, r2
 8005344:	604a      	str	r2, [r1, #4]
 8005346:	608b      	str	r3, [r1, #8]
 8005348:	4658      	mov	r0, fp
 800534a:	f000 fedf 	bl	800610c <_Bfree>
 800534e:	2200      	movs	r2, #0
 8005350:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	1e2b      	subs	r3, r5, #0
 8005358:	bfaf      	iteee	ge
 800535a:	2300      	movge	r3, #0
 800535c:	2201      	movlt	r2, #1
 800535e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005362:	9303      	strlt	r3, [sp, #12]
 8005364:	bfa8      	it	ge
 8005366:	6033      	strge	r3, [r6, #0]
 8005368:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800536c:	4b98      	ldr	r3, [pc, #608]	@ (80055d0 <_dtoa_r+0x2d0>)
 800536e:	bfb8      	it	lt
 8005370:	6032      	strlt	r2, [r6, #0]
 8005372:	ea33 0308 	bics.w	r3, r3, r8
 8005376:	d112      	bne.n	800539e <_dtoa_r+0x9e>
 8005378:	f242 730f 	movw	r3, #9999	@ 0x270f
 800537c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005384:	4323      	orrs	r3, r4
 8005386:	f000 8550 	beq.w	8005e2a <_dtoa_r+0xb2a>
 800538a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800538c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80055d4 <_dtoa_r+0x2d4>
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 8552 	beq.w	8005e3a <_dtoa_r+0xb3a>
 8005396:	f10a 0303 	add.w	r3, sl, #3
 800539a:	f000 bd4c 	b.w	8005e36 <_dtoa_r+0xb36>
 800539e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80053a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053aa:	2200      	movs	r2, #0
 80053ac:	2300      	movs	r3, #0
 80053ae:	f7fb fafb 	bl	80009a8 <__aeabi_dcmpeq>
 80053b2:	4607      	mov	r7, r0
 80053b4:	b158      	cbz	r0, 80053ce <_dtoa_r+0xce>
 80053b6:	2301      	movs	r3, #1
 80053b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80053be:	b113      	cbz	r3, 80053c6 <_dtoa_r+0xc6>
 80053c0:	4b85      	ldr	r3, [pc, #532]	@ (80055d8 <_dtoa_r+0x2d8>)
 80053c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80055dc <_dtoa_r+0x2dc>
 80053ca:	f000 bd36 	b.w	8005e3a <_dtoa_r+0xb3a>
 80053ce:	ab14      	add	r3, sp, #80	@ 0x50
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	ab15      	add	r3, sp, #84	@ 0x54
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	4658      	mov	r0, fp
 80053d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80053dc:	f001 fa30 	bl	8006840 <__d2b>
 80053e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80053e4:	4681      	mov	r9, r0
 80053e6:	2e00      	cmp	r6, #0
 80053e8:	d077      	beq.n	80054da <_dtoa_r+0x1da>
 80053ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80053f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80053fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005400:	9712      	str	r7, [sp, #72]	@ 0x48
 8005402:	4619      	mov	r1, r3
 8005404:	2200      	movs	r2, #0
 8005406:	4b76      	ldr	r3, [pc, #472]	@ (80055e0 <_dtoa_r+0x2e0>)
 8005408:	f7fa feae 	bl	8000168 <__aeabi_dsub>
 800540c:	a368      	add	r3, pc, #416	@ (adr r3, 80055b0 <_dtoa_r+0x2b0>)
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f7fb f861 	bl	80004d8 <__aeabi_dmul>
 8005416:	a368      	add	r3, pc, #416	@ (adr r3, 80055b8 <_dtoa_r+0x2b8>)
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	f7fa fea6 	bl	800016c <__adddf3>
 8005420:	4604      	mov	r4, r0
 8005422:	4630      	mov	r0, r6
 8005424:	460d      	mov	r5, r1
 8005426:	f7fa ffed 	bl	8000404 <__aeabi_i2d>
 800542a:	a365      	add	r3, pc, #404	@ (adr r3, 80055c0 <_dtoa_r+0x2c0>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f7fb f852 	bl	80004d8 <__aeabi_dmul>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4620      	mov	r0, r4
 800543a:	4629      	mov	r1, r5
 800543c:	f7fa fe96 	bl	800016c <__adddf3>
 8005440:	4604      	mov	r4, r0
 8005442:	460d      	mov	r5, r1
 8005444:	f7fb faf8 	bl	8000a38 <__aeabi_d2iz>
 8005448:	2200      	movs	r2, #0
 800544a:	4607      	mov	r7, r0
 800544c:	2300      	movs	r3, #0
 800544e:	4620      	mov	r0, r4
 8005450:	4629      	mov	r1, r5
 8005452:	f7fb fab3 	bl	80009bc <__aeabi_dcmplt>
 8005456:	b140      	cbz	r0, 800546a <_dtoa_r+0x16a>
 8005458:	4638      	mov	r0, r7
 800545a:	f7fa ffd3 	bl	8000404 <__aeabi_i2d>
 800545e:	4622      	mov	r2, r4
 8005460:	462b      	mov	r3, r5
 8005462:	f7fb faa1 	bl	80009a8 <__aeabi_dcmpeq>
 8005466:	b900      	cbnz	r0, 800546a <_dtoa_r+0x16a>
 8005468:	3f01      	subs	r7, #1
 800546a:	2f16      	cmp	r7, #22
 800546c:	d853      	bhi.n	8005516 <_dtoa_r+0x216>
 800546e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005472:	4b5c      	ldr	r3, [pc, #368]	@ (80055e4 <_dtoa_r+0x2e4>)
 8005474:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	f7fb fa9e 	bl	80009bc <__aeabi_dcmplt>
 8005480:	2800      	cmp	r0, #0
 8005482:	d04a      	beq.n	800551a <_dtoa_r+0x21a>
 8005484:	2300      	movs	r3, #0
 8005486:	3f01      	subs	r7, #1
 8005488:	930f      	str	r3, [sp, #60]	@ 0x3c
 800548a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800548c:	1b9b      	subs	r3, r3, r6
 800548e:	1e5a      	subs	r2, r3, #1
 8005490:	bf46      	itte	mi
 8005492:	f1c3 0801 	rsbmi	r8, r3, #1
 8005496:	2300      	movmi	r3, #0
 8005498:	f04f 0800 	movpl.w	r8, #0
 800549c:	9209      	str	r2, [sp, #36]	@ 0x24
 800549e:	bf48      	it	mi
 80054a0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80054a2:	2f00      	cmp	r7, #0
 80054a4:	db3b      	blt.n	800551e <_dtoa_r+0x21e>
 80054a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054a8:	970e      	str	r7, [sp, #56]	@ 0x38
 80054aa:	443b      	add	r3, r7
 80054ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ae:	2300      	movs	r3, #0
 80054b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80054b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054b4:	2b09      	cmp	r3, #9
 80054b6:	d866      	bhi.n	8005586 <_dtoa_r+0x286>
 80054b8:	2b05      	cmp	r3, #5
 80054ba:	bfc4      	itt	gt
 80054bc:	3b04      	subgt	r3, #4
 80054be:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80054c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054c2:	bfc8      	it	gt
 80054c4:	2400      	movgt	r4, #0
 80054c6:	f1a3 0302 	sub.w	r3, r3, #2
 80054ca:	bfd8      	it	le
 80054cc:	2401      	movle	r4, #1
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d864      	bhi.n	800559c <_dtoa_r+0x29c>
 80054d2:	e8df f003 	tbb	[pc, r3]
 80054d6:	382b      	.short	0x382b
 80054d8:	5636      	.short	0x5636
 80054da:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80054de:	441e      	add	r6, r3
 80054e0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	bfc1      	itttt	gt
 80054e8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80054ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80054f0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80054f4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80054f8:	bfd6      	itet	le
 80054fa:	f1c3 0320 	rsble	r3, r3, #32
 80054fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8005502:	fa04 f003 	lslle.w	r0, r4, r3
 8005506:	f7fa ff6d 	bl	80003e4 <__aeabi_ui2d>
 800550a:	2201      	movs	r2, #1
 800550c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005510:	3e01      	subs	r6, #1
 8005512:	9212      	str	r2, [sp, #72]	@ 0x48
 8005514:	e775      	b.n	8005402 <_dtoa_r+0x102>
 8005516:	2301      	movs	r3, #1
 8005518:	e7b6      	b.n	8005488 <_dtoa_r+0x188>
 800551a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800551c:	e7b5      	b.n	800548a <_dtoa_r+0x18a>
 800551e:	427b      	negs	r3, r7
 8005520:	930a      	str	r3, [sp, #40]	@ 0x28
 8005522:	2300      	movs	r3, #0
 8005524:	eba8 0807 	sub.w	r8, r8, r7
 8005528:	930e      	str	r3, [sp, #56]	@ 0x38
 800552a:	e7c2      	b.n	80054b2 <_dtoa_r+0x1b2>
 800552c:	2300      	movs	r3, #0
 800552e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005530:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005532:	2b00      	cmp	r3, #0
 8005534:	dc35      	bgt.n	80055a2 <_dtoa_r+0x2a2>
 8005536:	2301      	movs	r3, #1
 8005538:	461a      	mov	r2, r3
 800553a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800553e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005540:	e00b      	b.n	800555a <_dtoa_r+0x25a>
 8005542:	2301      	movs	r3, #1
 8005544:	e7f3      	b.n	800552e <_dtoa_r+0x22e>
 8005546:	2300      	movs	r3, #0
 8005548:	930b      	str	r3, [sp, #44]	@ 0x2c
 800554a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800554c:	18fb      	adds	r3, r7, r3
 800554e:	9308      	str	r3, [sp, #32]
 8005550:	3301      	adds	r3, #1
 8005552:	2b01      	cmp	r3, #1
 8005554:	9307      	str	r3, [sp, #28]
 8005556:	bfb8      	it	lt
 8005558:	2301      	movlt	r3, #1
 800555a:	2100      	movs	r1, #0
 800555c:	2204      	movs	r2, #4
 800555e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005562:	f102 0514 	add.w	r5, r2, #20
 8005566:	429d      	cmp	r5, r3
 8005568:	d91f      	bls.n	80055aa <_dtoa_r+0x2aa>
 800556a:	6041      	str	r1, [r0, #4]
 800556c:	4658      	mov	r0, fp
 800556e:	f000 fd8d 	bl	800608c <_Balloc>
 8005572:	4682      	mov	sl, r0
 8005574:	2800      	cmp	r0, #0
 8005576:	d139      	bne.n	80055ec <_dtoa_r+0x2ec>
 8005578:	4602      	mov	r2, r0
 800557a:	f240 11af 	movw	r1, #431	@ 0x1af
 800557e:	4b1a      	ldr	r3, [pc, #104]	@ (80055e8 <_dtoa_r+0x2e8>)
 8005580:	e6d2      	b.n	8005328 <_dtoa_r+0x28>
 8005582:	2301      	movs	r3, #1
 8005584:	e7e0      	b.n	8005548 <_dtoa_r+0x248>
 8005586:	2401      	movs	r4, #1
 8005588:	2300      	movs	r3, #0
 800558a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800558c:	9320      	str	r3, [sp, #128]	@ 0x80
 800558e:	f04f 33ff 	mov.w	r3, #4294967295
 8005592:	2200      	movs	r2, #0
 8005594:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005598:	2312      	movs	r3, #18
 800559a:	e7d0      	b.n	800553e <_dtoa_r+0x23e>
 800559c:	2301      	movs	r3, #1
 800559e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055a0:	e7f5      	b.n	800558e <_dtoa_r+0x28e>
 80055a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80055a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80055a8:	e7d7      	b.n	800555a <_dtoa_r+0x25a>
 80055aa:	3101      	adds	r1, #1
 80055ac:	0052      	lsls	r2, r2, #1
 80055ae:	e7d8      	b.n	8005562 <_dtoa_r+0x262>
 80055b0:	636f4361 	.word	0x636f4361
 80055b4:	3fd287a7 	.word	0x3fd287a7
 80055b8:	8b60c8b3 	.word	0x8b60c8b3
 80055bc:	3fc68a28 	.word	0x3fc68a28
 80055c0:	509f79fb 	.word	0x509f79fb
 80055c4:	3fd34413 	.word	0x3fd34413
 80055c8:	08008a64 	.word	0x08008a64
 80055cc:	08008a7b 	.word	0x08008a7b
 80055d0:	7ff00000 	.word	0x7ff00000
 80055d4:	08008a60 	.word	0x08008a60
 80055d8:	08008a2f 	.word	0x08008a2f
 80055dc:	08008a2e 	.word	0x08008a2e
 80055e0:	3ff80000 	.word	0x3ff80000
 80055e4:	08008b78 	.word	0x08008b78
 80055e8:	08008ad3 	.word	0x08008ad3
 80055ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80055f0:	6018      	str	r0, [r3, #0]
 80055f2:	9b07      	ldr	r3, [sp, #28]
 80055f4:	2b0e      	cmp	r3, #14
 80055f6:	f200 80a4 	bhi.w	8005742 <_dtoa_r+0x442>
 80055fa:	2c00      	cmp	r4, #0
 80055fc:	f000 80a1 	beq.w	8005742 <_dtoa_r+0x442>
 8005600:	2f00      	cmp	r7, #0
 8005602:	dd33      	ble.n	800566c <_dtoa_r+0x36c>
 8005604:	4b86      	ldr	r3, [pc, #536]	@ (8005820 <_dtoa_r+0x520>)
 8005606:	f007 020f 	and.w	r2, r7, #15
 800560a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800560e:	05f8      	lsls	r0, r7, #23
 8005610:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005614:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005618:	ea4f 1427 	mov.w	r4, r7, asr #4
 800561c:	d516      	bpl.n	800564c <_dtoa_r+0x34c>
 800561e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005622:	4b80      	ldr	r3, [pc, #512]	@ (8005824 <_dtoa_r+0x524>)
 8005624:	2603      	movs	r6, #3
 8005626:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800562a:	f7fb f87f 	bl	800072c <__aeabi_ddiv>
 800562e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005632:	f004 040f 	and.w	r4, r4, #15
 8005636:	4d7b      	ldr	r5, [pc, #492]	@ (8005824 <_dtoa_r+0x524>)
 8005638:	b954      	cbnz	r4, 8005650 <_dtoa_r+0x350>
 800563a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800563e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005642:	f7fb f873 	bl	800072c <__aeabi_ddiv>
 8005646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800564a:	e028      	b.n	800569e <_dtoa_r+0x39e>
 800564c:	2602      	movs	r6, #2
 800564e:	e7f2      	b.n	8005636 <_dtoa_r+0x336>
 8005650:	07e1      	lsls	r1, r4, #31
 8005652:	d508      	bpl.n	8005666 <_dtoa_r+0x366>
 8005654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005658:	e9d5 2300 	ldrd	r2, r3, [r5]
 800565c:	f7fa ff3c 	bl	80004d8 <__aeabi_dmul>
 8005660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005664:	3601      	adds	r6, #1
 8005666:	1064      	asrs	r4, r4, #1
 8005668:	3508      	adds	r5, #8
 800566a:	e7e5      	b.n	8005638 <_dtoa_r+0x338>
 800566c:	f000 80d2 	beq.w	8005814 <_dtoa_r+0x514>
 8005670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005674:	427c      	negs	r4, r7
 8005676:	4b6a      	ldr	r3, [pc, #424]	@ (8005820 <_dtoa_r+0x520>)
 8005678:	f004 020f 	and.w	r2, r4, #15
 800567c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f7fa ff28 	bl	80004d8 <__aeabi_dmul>
 8005688:	2602      	movs	r6, #2
 800568a:	2300      	movs	r3, #0
 800568c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005690:	4d64      	ldr	r5, [pc, #400]	@ (8005824 <_dtoa_r+0x524>)
 8005692:	1124      	asrs	r4, r4, #4
 8005694:	2c00      	cmp	r4, #0
 8005696:	f040 80b2 	bne.w	80057fe <_dtoa_r+0x4fe>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1d3      	bne.n	8005646 <_dtoa_r+0x346>
 800569e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80056a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 80b7 	beq.w	8005818 <_dtoa_r+0x518>
 80056aa:	2200      	movs	r2, #0
 80056ac:	4620      	mov	r0, r4
 80056ae:	4629      	mov	r1, r5
 80056b0:	4b5d      	ldr	r3, [pc, #372]	@ (8005828 <_dtoa_r+0x528>)
 80056b2:	f7fb f983 	bl	80009bc <__aeabi_dcmplt>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	f000 80ae 	beq.w	8005818 <_dtoa_r+0x518>
 80056bc:	9b07      	ldr	r3, [sp, #28]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 80aa 	beq.w	8005818 <_dtoa_r+0x518>
 80056c4:	9b08      	ldr	r3, [sp, #32]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	dd37      	ble.n	800573a <_dtoa_r+0x43a>
 80056ca:	1e7b      	subs	r3, r7, #1
 80056cc:	4620      	mov	r0, r4
 80056ce:	9304      	str	r3, [sp, #16]
 80056d0:	2200      	movs	r2, #0
 80056d2:	4629      	mov	r1, r5
 80056d4:	4b55      	ldr	r3, [pc, #340]	@ (800582c <_dtoa_r+0x52c>)
 80056d6:	f7fa feff 	bl	80004d8 <__aeabi_dmul>
 80056da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056de:	9c08      	ldr	r4, [sp, #32]
 80056e0:	3601      	adds	r6, #1
 80056e2:	4630      	mov	r0, r6
 80056e4:	f7fa fe8e 	bl	8000404 <__aeabi_i2d>
 80056e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056ec:	f7fa fef4 	bl	80004d8 <__aeabi_dmul>
 80056f0:	2200      	movs	r2, #0
 80056f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005830 <_dtoa_r+0x530>)
 80056f4:	f7fa fd3a 	bl	800016c <__adddf3>
 80056f8:	4605      	mov	r5, r0
 80056fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80056fe:	2c00      	cmp	r4, #0
 8005700:	f040 809a 	bne.w	8005838 <_dtoa_r+0x538>
 8005704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005708:	2200      	movs	r2, #0
 800570a:	4b4a      	ldr	r3, [pc, #296]	@ (8005834 <_dtoa_r+0x534>)
 800570c:	f7fa fd2c 	bl	8000168 <__aeabi_dsub>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005718:	462a      	mov	r2, r5
 800571a:	4633      	mov	r3, r6
 800571c:	f7fb f96c 	bl	80009f8 <__aeabi_dcmpgt>
 8005720:	2800      	cmp	r0, #0
 8005722:	f040 828e 	bne.w	8005c42 <_dtoa_r+0x942>
 8005726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800572a:	462a      	mov	r2, r5
 800572c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005730:	f7fb f944 	bl	80009bc <__aeabi_dcmplt>
 8005734:	2800      	cmp	r0, #0
 8005736:	f040 8127 	bne.w	8005988 <_dtoa_r+0x688>
 800573a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800573e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005742:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005744:	2b00      	cmp	r3, #0
 8005746:	f2c0 8163 	blt.w	8005a10 <_dtoa_r+0x710>
 800574a:	2f0e      	cmp	r7, #14
 800574c:	f300 8160 	bgt.w	8005a10 <_dtoa_r+0x710>
 8005750:	4b33      	ldr	r3, [pc, #204]	@ (8005820 <_dtoa_r+0x520>)
 8005752:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005756:	e9d3 3400 	ldrd	r3, r4, [r3]
 800575a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800575e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005760:	2b00      	cmp	r3, #0
 8005762:	da03      	bge.n	800576c <_dtoa_r+0x46c>
 8005764:	9b07      	ldr	r3, [sp, #28]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f340 8100 	ble.w	800596c <_dtoa_r+0x66c>
 800576c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005770:	4656      	mov	r6, sl
 8005772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005776:	4620      	mov	r0, r4
 8005778:	4629      	mov	r1, r5
 800577a:	f7fa ffd7 	bl	800072c <__aeabi_ddiv>
 800577e:	f7fb f95b 	bl	8000a38 <__aeabi_d2iz>
 8005782:	4680      	mov	r8, r0
 8005784:	f7fa fe3e 	bl	8000404 <__aeabi_i2d>
 8005788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800578c:	f7fa fea4 	bl	80004d8 <__aeabi_dmul>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4620      	mov	r0, r4
 8005796:	4629      	mov	r1, r5
 8005798:	f7fa fce6 	bl	8000168 <__aeabi_dsub>
 800579c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80057a0:	9d07      	ldr	r5, [sp, #28]
 80057a2:	f806 4b01 	strb.w	r4, [r6], #1
 80057a6:	eba6 040a 	sub.w	r4, r6, sl
 80057aa:	42a5      	cmp	r5, r4
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	f040 8116 	bne.w	80059e0 <_dtoa_r+0x6e0>
 80057b4:	f7fa fcda 	bl	800016c <__adddf3>
 80057b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057bc:	4604      	mov	r4, r0
 80057be:	460d      	mov	r5, r1
 80057c0:	f7fb f91a 	bl	80009f8 <__aeabi_dcmpgt>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	f040 80f8 	bne.w	80059ba <_dtoa_r+0x6ba>
 80057ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ce:	4620      	mov	r0, r4
 80057d0:	4629      	mov	r1, r5
 80057d2:	f7fb f8e9 	bl	80009a8 <__aeabi_dcmpeq>
 80057d6:	b118      	cbz	r0, 80057e0 <_dtoa_r+0x4e0>
 80057d8:	f018 0f01 	tst.w	r8, #1
 80057dc:	f040 80ed 	bne.w	80059ba <_dtoa_r+0x6ba>
 80057e0:	4649      	mov	r1, r9
 80057e2:	4658      	mov	r0, fp
 80057e4:	f000 fc92 	bl	800610c <_Bfree>
 80057e8:	2300      	movs	r3, #0
 80057ea:	7033      	strb	r3, [r6, #0]
 80057ec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80057ee:	3701      	adds	r7, #1
 80057f0:	601f      	str	r7, [r3, #0]
 80057f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 8320 	beq.w	8005e3a <_dtoa_r+0xb3a>
 80057fa:	601e      	str	r6, [r3, #0]
 80057fc:	e31d      	b.n	8005e3a <_dtoa_r+0xb3a>
 80057fe:	07e2      	lsls	r2, r4, #31
 8005800:	d505      	bpl.n	800580e <_dtoa_r+0x50e>
 8005802:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005806:	f7fa fe67 	bl	80004d8 <__aeabi_dmul>
 800580a:	2301      	movs	r3, #1
 800580c:	3601      	adds	r6, #1
 800580e:	1064      	asrs	r4, r4, #1
 8005810:	3508      	adds	r5, #8
 8005812:	e73f      	b.n	8005694 <_dtoa_r+0x394>
 8005814:	2602      	movs	r6, #2
 8005816:	e742      	b.n	800569e <_dtoa_r+0x39e>
 8005818:	9c07      	ldr	r4, [sp, #28]
 800581a:	9704      	str	r7, [sp, #16]
 800581c:	e761      	b.n	80056e2 <_dtoa_r+0x3e2>
 800581e:	bf00      	nop
 8005820:	08008b78 	.word	0x08008b78
 8005824:	08008b50 	.word	0x08008b50
 8005828:	3ff00000 	.word	0x3ff00000
 800582c:	40240000 	.word	0x40240000
 8005830:	401c0000 	.word	0x401c0000
 8005834:	40140000 	.word	0x40140000
 8005838:	4b70      	ldr	r3, [pc, #448]	@ (80059fc <_dtoa_r+0x6fc>)
 800583a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800583c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005840:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005844:	4454      	add	r4, sl
 8005846:	2900      	cmp	r1, #0
 8005848:	d045      	beq.n	80058d6 <_dtoa_r+0x5d6>
 800584a:	2000      	movs	r0, #0
 800584c:	496c      	ldr	r1, [pc, #432]	@ (8005a00 <_dtoa_r+0x700>)
 800584e:	f7fa ff6d 	bl	800072c <__aeabi_ddiv>
 8005852:	4633      	mov	r3, r6
 8005854:	462a      	mov	r2, r5
 8005856:	f7fa fc87 	bl	8000168 <__aeabi_dsub>
 800585a:	4656      	mov	r6, sl
 800585c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005864:	f7fb f8e8 	bl	8000a38 <__aeabi_d2iz>
 8005868:	4605      	mov	r5, r0
 800586a:	f7fa fdcb 	bl	8000404 <__aeabi_i2d>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005876:	f7fa fc77 	bl	8000168 <__aeabi_dsub>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	3530      	adds	r5, #48	@ 0x30
 8005880:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005884:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005888:	f806 5b01 	strb.w	r5, [r6], #1
 800588c:	f7fb f896 	bl	80009bc <__aeabi_dcmplt>
 8005890:	2800      	cmp	r0, #0
 8005892:	d163      	bne.n	800595c <_dtoa_r+0x65c>
 8005894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005898:	2000      	movs	r0, #0
 800589a:	495a      	ldr	r1, [pc, #360]	@ (8005a04 <_dtoa_r+0x704>)
 800589c:	f7fa fc64 	bl	8000168 <__aeabi_dsub>
 80058a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058a4:	f7fb f88a 	bl	80009bc <__aeabi_dcmplt>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	f040 8087 	bne.w	80059bc <_dtoa_r+0x6bc>
 80058ae:	42a6      	cmp	r6, r4
 80058b0:	f43f af43 	beq.w	800573a <_dtoa_r+0x43a>
 80058b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80058b8:	2200      	movs	r2, #0
 80058ba:	4b53      	ldr	r3, [pc, #332]	@ (8005a08 <_dtoa_r+0x708>)
 80058bc:	f7fa fe0c 	bl	80004d8 <__aeabi_dmul>
 80058c0:	2200      	movs	r2, #0
 80058c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ca:	4b4f      	ldr	r3, [pc, #316]	@ (8005a08 <_dtoa_r+0x708>)
 80058cc:	f7fa fe04 	bl	80004d8 <__aeabi_dmul>
 80058d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058d4:	e7c4      	b.n	8005860 <_dtoa_r+0x560>
 80058d6:	4631      	mov	r1, r6
 80058d8:	4628      	mov	r0, r5
 80058da:	f7fa fdfd 	bl	80004d8 <__aeabi_dmul>
 80058de:	4656      	mov	r6, sl
 80058e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058e4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80058e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ea:	f7fb f8a5 	bl	8000a38 <__aeabi_d2iz>
 80058ee:	4605      	mov	r5, r0
 80058f0:	f7fa fd88 	bl	8000404 <__aeabi_i2d>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058fc:	f7fa fc34 	bl	8000168 <__aeabi_dsub>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	3530      	adds	r5, #48	@ 0x30
 8005906:	f806 5b01 	strb.w	r5, [r6], #1
 800590a:	42a6      	cmp	r6, r4
 800590c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	d124      	bne.n	8005960 <_dtoa_r+0x660>
 8005916:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800591a:	4b39      	ldr	r3, [pc, #228]	@ (8005a00 <_dtoa_r+0x700>)
 800591c:	f7fa fc26 	bl	800016c <__adddf3>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005928:	f7fb f866 	bl	80009f8 <__aeabi_dcmpgt>
 800592c:	2800      	cmp	r0, #0
 800592e:	d145      	bne.n	80059bc <_dtoa_r+0x6bc>
 8005930:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005934:	2000      	movs	r0, #0
 8005936:	4932      	ldr	r1, [pc, #200]	@ (8005a00 <_dtoa_r+0x700>)
 8005938:	f7fa fc16 	bl	8000168 <__aeabi_dsub>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005944:	f7fb f83a 	bl	80009bc <__aeabi_dcmplt>
 8005948:	2800      	cmp	r0, #0
 800594a:	f43f aef6 	beq.w	800573a <_dtoa_r+0x43a>
 800594e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005950:	1e73      	subs	r3, r6, #1
 8005952:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005954:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005958:	2b30      	cmp	r3, #48	@ 0x30
 800595a:	d0f8      	beq.n	800594e <_dtoa_r+0x64e>
 800595c:	9f04      	ldr	r7, [sp, #16]
 800595e:	e73f      	b.n	80057e0 <_dtoa_r+0x4e0>
 8005960:	4b29      	ldr	r3, [pc, #164]	@ (8005a08 <_dtoa_r+0x708>)
 8005962:	f7fa fdb9 	bl	80004d8 <__aeabi_dmul>
 8005966:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800596a:	e7bc      	b.n	80058e6 <_dtoa_r+0x5e6>
 800596c:	d10c      	bne.n	8005988 <_dtoa_r+0x688>
 800596e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005972:	2200      	movs	r2, #0
 8005974:	4b25      	ldr	r3, [pc, #148]	@ (8005a0c <_dtoa_r+0x70c>)
 8005976:	f7fa fdaf 	bl	80004d8 <__aeabi_dmul>
 800597a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800597e:	f7fb f831 	bl	80009e4 <__aeabi_dcmpge>
 8005982:	2800      	cmp	r0, #0
 8005984:	f000 815b 	beq.w	8005c3e <_dtoa_r+0x93e>
 8005988:	2400      	movs	r4, #0
 800598a:	4625      	mov	r5, r4
 800598c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800598e:	4656      	mov	r6, sl
 8005990:	43db      	mvns	r3, r3
 8005992:	9304      	str	r3, [sp, #16]
 8005994:	2700      	movs	r7, #0
 8005996:	4621      	mov	r1, r4
 8005998:	4658      	mov	r0, fp
 800599a:	f000 fbb7 	bl	800610c <_Bfree>
 800599e:	2d00      	cmp	r5, #0
 80059a0:	d0dc      	beq.n	800595c <_dtoa_r+0x65c>
 80059a2:	b12f      	cbz	r7, 80059b0 <_dtoa_r+0x6b0>
 80059a4:	42af      	cmp	r7, r5
 80059a6:	d003      	beq.n	80059b0 <_dtoa_r+0x6b0>
 80059a8:	4639      	mov	r1, r7
 80059aa:	4658      	mov	r0, fp
 80059ac:	f000 fbae 	bl	800610c <_Bfree>
 80059b0:	4629      	mov	r1, r5
 80059b2:	4658      	mov	r0, fp
 80059b4:	f000 fbaa 	bl	800610c <_Bfree>
 80059b8:	e7d0      	b.n	800595c <_dtoa_r+0x65c>
 80059ba:	9704      	str	r7, [sp, #16]
 80059bc:	4633      	mov	r3, r6
 80059be:	461e      	mov	r6, r3
 80059c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059c4:	2a39      	cmp	r2, #57	@ 0x39
 80059c6:	d107      	bne.n	80059d8 <_dtoa_r+0x6d8>
 80059c8:	459a      	cmp	sl, r3
 80059ca:	d1f8      	bne.n	80059be <_dtoa_r+0x6be>
 80059cc:	9a04      	ldr	r2, [sp, #16]
 80059ce:	3201      	adds	r2, #1
 80059d0:	9204      	str	r2, [sp, #16]
 80059d2:	2230      	movs	r2, #48	@ 0x30
 80059d4:	f88a 2000 	strb.w	r2, [sl]
 80059d8:	781a      	ldrb	r2, [r3, #0]
 80059da:	3201      	adds	r2, #1
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	e7bd      	b.n	800595c <_dtoa_r+0x65c>
 80059e0:	2200      	movs	r2, #0
 80059e2:	4b09      	ldr	r3, [pc, #36]	@ (8005a08 <_dtoa_r+0x708>)
 80059e4:	f7fa fd78 	bl	80004d8 <__aeabi_dmul>
 80059e8:	2200      	movs	r2, #0
 80059ea:	2300      	movs	r3, #0
 80059ec:	4604      	mov	r4, r0
 80059ee:	460d      	mov	r5, r1
 80059f0:	f7fa ffda 	bl	80009a8 <__aeabi_dcmpeq>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	f43f aebc 	beq.w	8005772 <_dtoa_r+0x472>
 80059fa:	e6f1      	b.n	80057e0 <_dtoa_r+0x4e0>
 80059fc:	08008b78 	.word	0x08008b78
 8005a00:	3fe00000 	.word	0x3fe00000
 8005a04:	3ff00000 	.word	0x3ff00000
 8005a08:	40240000 	.word	0x40240000
 8005a0c:	40140000 	.word	0x40140000
 8005a10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005a12:	2a00      	cmp	r2, #0
 8005a14:	f000 80db 	beq.w	8005bce <_dtoa_r+0x8ce>
 8005a18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005a1a:	2a01      	cmp	r2, #1
 8005a1c:	f300 80bf 	bgt.w	8005b9e <_dtoa_r+0x89e>
 8005a20:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a22:	2a00      	cmp	r2, #0
 8005a24:	f000 80b7 	beq.w	8005b96 <_dtoa_r+0x896>
 8005a28:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005a2c:	4646      	mov	r6, r8
 8005a2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a32:	2101      	movs	r1, #1
 8005a34:	441a      	add	r2, r3
 8005a36:	4658      	mov	r0, fp
 8005a38:	4498      	add	r8, r3
 8005a3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a3c:	f000 fc64 	bl	8006308 <__i2b>
 8005a40:	4605      	mov	r5, r0
 8005a42:	b15e      	cbz	r6, 8005a5c <_dtoa_r+0x75c>
 8005a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	dd08      	ble.n	8005a5c <_dtoa_r+0x75c>
 8005a4a:	42b3      	cmp	r3, r6
 8005a4c:	bfa8      	it	ge
 8005a4e:	4633      	movge	r3, r6
 8005a50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a52:	eba8 0803 	sub.w	r8, r8, r3
 8005a56:	1af6      	subs	r6, r6, r3
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a5e:	b1f3      	cbz	r3, 8005a9e <_dtoa_r+0x79e>
 8005a60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 80b7 	beq.w	8005bd6 <_dtoa_r+0x8d6>
 8005a68:	b18c      	cbz	r4, 8005a8e <_dtoa_r+0x78e>
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	4622      	mov	r2, r4
 8005a6e:	4658      	mov	r0, fp
 8005a70:	f000 fd08 	bl	8006484 <__pow5mult>
 8005a74:	464a      	mov	r2, r9
 8005a76:	4601      	mov	r1, r0
 8005a78:	4605      	mov	r5, r0
 8005a7a:	4658      	mov	r0, fp
 8005a7c:	f000 fc5a 	bl	8006334 <__multiply>
 8005a80:	4649      	mov	r1, r9
 8005a82:	9004      	str	r0, [sp, #16]
 8005a84:	4658      	mov	r0, fp
 8005a86:	f000 fb41 	bl	800610c <_Bfree>
 8005a8a:	9b04      	ldr	r3, [sp, #16]
 8005a8c:	4699      	mov	r9, r3
 8005a8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a90:	1b1a      	subs	r2, r3, r4
 8005a92:	d004      	beq.n	8005a9e <_dtoa_r+0x79e>
 8005a94:	4649      	mov	r1, r9
 8005a96:	4658      	mov	r0, fp
 8005a98:	f000 fcf4 	bl	8006484 <__pow5mult>
 8005a9c:	4681      	mov	r9, r0
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	4658      	mov	r0, fp
 8005aa2:	f000 fc31 	bl	8006308 <__i2b>
 8005aa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 81c9 	beq.w	8005e42 <_dtoa_r+0xb42>
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4601      	mov	r1, r0
 8005ab4:	4658      	mov	r0, fp
 8005ab6:	f000 fce5 	bl	8006484 <__pow5mult>
 8005aba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005abc:	4604      	mov	r4, r0
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	f300 808f 	bgt.w	8005be2 <_dtoa_r+0x8e2>
 8005ac4:	9b02      	ldr	r3, [sp, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f040 8087 	bne.w	8005bda <_dtoa_r+0x8da>
 8005acc:	9b03      	ldr	r3, [sp, #12]
 8005ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f040 8083 	bne.w	8005bde <_dtoa_r+0x8de>
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ade:	0d1b      	lsrs	r3, r3, #20
 8005ae0:	051b      	lsls	r3, r3, #20
 8005ae2:	b12b      	cbz	r3, 8005af0 <_dtoa_r+0x7f0>
 8005ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ae6:	f108 0801 	add.w	r8, r8, #1
 8005aea:	3301      	adds	r3, #1
 8005aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aee:	2301      	movs	r3, #1
 8005af0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005af2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 81aa 	beq.w	8005e4e <_dtoa_r+0xb4e>
 8005afa:	6923      	ldr	r3, [r4, #16]
 8005afc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b00:	6918      	ldr	r0, [r3, #16]
 8005b02:	f000 fbb5 	bl	8006270 <__hi0bits>
 8005b06:	f1c0 0020 	rsb	r0, r0, #32
 8005b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b0c:	4418      	add	r0, r3
 8005b0e:	f010 001f 	ands.w	r0, r0, #31
 8005b12:	d071      	beq.n	8005bf8 <_dtoa_r+0x8f8>
 8005b14:	f1c0 0320 	rsb	r3, r0, #32
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	dd65      	ble.n	8005be8 <_dtoa_r+0x8e8>
 8005b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b1e:	f1c0 001c 	rsb	r0, r0, #28
 8005b22:	4403      	add	r3, r0
 8005b24:	4480      	add	r8, r0
 8005b26:	4406      	add	r6, r0
 8005b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b2a:	f1b8 0f00 	cmp.w	r8, #0
 8005b2e:	dd05      	ble.n	8005b3c <_dtoa_r+0x83c>
 8005b30:	4649      	mov	r1, r9
 8005b32:	4642      	mov	r2, r8
 8005b34:	4658      	mov	r0, fp
 8005b36:	f000 fcff 	bl	8006538 <__lshift>
 8005b3a:	4681      	mov	r9, r0
 8005b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	dd05      	ble.n	8005b4e <_dtoa_r+0x84e>
 8005b42:	4621      	mov	r1, r4
 8005b44:	461a      	mov	r2, r3
 8005b46:	4658      	mov	r0, fp
 8005b48:	f000 fcf6 	bl	8006538 <__lshift>
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d053      	beq.n	8005bfc <_dtoa_r+0x8fc>
 8005b54:	4621      	mov	r1, r4
 8005b56:	4648      	mov	r0, r9
 8005b58:	f000 fd5a 	bl	8006610 <__mcmp>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	da4d      	bge.n	8005bfc <_dtoa_r+0x8fc>
 8005b60:	1e7b      	subs	r3, r7, #1
 8005b62:	4649      	mov	r1, r9
 8005b64:	9304      	str	r3, [sp, #16]
 8005b66:	220a      	movs	r2, #10
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4658      	mov	r0, fp
 8005b6c:	f000 faf0 	bl	8006150 <__multadd>
 8005b70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b72:	4681      	mov	r9, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 816c 	beq.w	8005e52 <_dtoa_r+0xb52>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	220a      	movs	r2, #10
 8005b80:	4658      	mov	r0, fp
 8005b82:	f000 fae5 	bl	8006150 <__multadd>
 8005b86:	9b08      	ldr	r3, [sp, #32]
 8005b88:	4605      	mov	r5, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	dc61      	bgt.n	8005c52 <_dtoa_r+0x952>
 8005b8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	dc3b      	bgt.n	8005c0c <_dtoa_r+0x90c>
 8005b94:	e05d      	b.n	8005c52 <_dtoa_r+0x952>
 8005b96:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005b98:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005b9c:	e746      	b.n	8005a2c <_dtoa_r+0x72c>
 8005b9e:	9b07      	ldr	r3, [sp, #28]
 8005ba0:	1e5c      	subs	r4, r3, #1
 8005ba2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	bfbf      	itttt	lt
 8005ba8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005baa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005bac:	1ae3      	sublt	r3, r4, r3
 8005bae:	18d2      	addlt	r2, r2, r3
 8005bb0:	bfa8      	it	ge
 8005bb2:	1b1c      	subge	r4, r3, r4
 8005bb4:	9b07      	ldr	r3, [sp, #28]
 8005bb6:	bfbe      	ittt	lt
 8005bb8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005bba:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005bbc:	2400      	movlt	r4, #0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	bfb5      	itete	lt
 8005bc2:	eba8 0603 	sublt.w	r6, r8, r3
 8005bc6:	4646      	movge	r6, r8
 8005bc8:	2300      	movlt	r3, #0
 8005bca:	9b07      	ldrge	r3, [sp, #28]
 8005bcc:	e730      	b.n	8005a30 <_dtoa_r+0x730>
 8005bce:	4646      	mov	r6, r8
 8005bd0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005bd2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005bd4:	e735      	b.n	8005a42 <_dtoa_r+0x742>
 8005bd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bd8:	e75c      	b.n	8005a94 <_dtoa_r+0x794>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e788      	b.n	8005af0 <_dtoa_r+0x7f0>
 8005bde:	9b02      	ldr	r3, [sp, #8]
 8005be0:	e786      	b.n	8005af0 <_dtoa_r+0x7f0>
 8005be2:	2300      	movs	r3, #0
 8005be4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005be6:	e788      	b.n	8005afa <_dtoa_r+0x7fa>
 8005be8:	d09f      	beq.n	8005b2a <_dtoa_r+0x82a>
 8005bea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bec:	331c      	adds	r3, #28
 8005bee:	441a      	add	r2, r3
 8005bf0:	4498      	add	r8, r3
 8005bf2:	441e      	add	r6, r3
 8005bf4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bf6:	e798      	b.n	8005b2a <_dtoa_r+0x82a>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	e7f6      	b.n	8005bea <_dtoa_r+0x8ea>
 8005bfc:	9b07      	ldr	r3, [sp, #28]
 8005bfe:	9704      	str	r7, [sp, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	dc20      	bgt.n	8005c46 <_dtoa_r+0x946>
 8005c04:	9308      	str	r3, [sp, #32]
 8005c06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	dd1e      	ble.n	8005c4a <_dtoa_r+0x94a>
 8005c0c:	9b08      	ldr	r3, [sp, #32]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f47f aebc 	bne.w	800598c <_dtoa_r+0x68c>
 8005c14:	4621      	mov	r1, r4
 8005c16:	2205      	movs	r2, #5
 8005c18:	4658      	mov	r0, fp
 8005c1a:	f000 fa99 	bl	8006150 <__multadd>
 8005c1e:	4601      	mov	r1, r0
 8005c20:	4604      	mov	r4, r0
 8005c22:	4648      	mov	r0, r9
 8005c24:	f000 fcf4 	bl	8006610 <__mcmp>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	f77f aeaf 	ble.w	800598c <_dtoa_r+0x68c>
 8005c2e:	2331      	movs	r3, #49	@ 0x31
 8005c30:	4656      	mov	r6, sl
 8005c32:	f806 3b01 	strb.w	r3, [r6], #1
 8005c36:	9b04      	ldr	r3, [sp, #16]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	9304      	str	r3, [sp, #16]
 8005c3c:	e6aa      	b.n	8005994 <_dtoa_r+0x694>
 8005c3e:	9c07      	ldr	r4, [sp, #28]
 8005c40:	9704      	str	r7, [sp, #16]
 8005c42:	4625      	mov	r5, r4
 8005c44:	e7f3      	b.n	8005c2e <_dtoa_r+0x92e>
 8005c46:	9b07      	ldr	r3, [sp, #28]
 8005c48:	9308      	str	r3, [sp, #32]
 8005c4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8104 	beq.w	8005e5a <_dtoa_r+0xb5a>
 8005c52:	2e00      	cmp	r6, #0
 8005c54:	dd05      	ble.n	8005c62 <_dtoa_r+0x962>
 8005c56:	4629      	mov	r1, r5
 8005c58:	4632      	mov	r2, r6
 8005c5a:	4658      	mov	r0, fp
 8005c5c:	f000 fc6c 	bl	8006538 <__lshift>
 8005c60:	4605      	mov	r5, r0
 8005c62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d05a      	beq.n	8005d1e <_dtoa_r+0xa1e>
 8005c68:	4658      	mov	r0, fp
 8005c6a:	6869      	ldr	r1, [r5, #4]
 8005c6c:	f000 fa0e 	bl	800608c <_Balloc>
 8005c70:	4606      	mov	r6, r0
 8005c72:	b928      	cbnz	r0, 8005c80 <_dtoa_r+0x980>
 8005c74:	4602      	mov	r2, r0
 8005c76:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005c7a:	4b83      	ldr	r3, [pc, #524]	@ (8005e88 <_dtoa_r+0xb88>)
 8005c7c:	f7ff bb54 	b.w	8005328 <_dtoa_r+0x28>
 8005c80:	692a      	ldr	r2, [r5, #16]
 8005c82:	f105 010c 	add.w	r1, r5, #12
 8005c86:	3202      	adds	r2, #2
 8005c88:	0092      	lsls	r2, r2, #2
 8005c8a:	300c      	adds	r0, #12
 8005c8c:	f001 ff5e 	bl	8007b4c <memcpy>
 8005c90:	2201      	movs	r2, #1
 8005c92:	4631      	mov	r1, r6
 8005c94:	4658      	mov	r0, fp
 8005c96:	f000 fc4f 	bl	8006538 <__lshift>
 8005c9a:	462f      	mov	r7, r5
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	f10a 0301 	add.w	r3, sl, #1
 8005ca2:	9307      	str	r3, [sp, #28]
 8005ca4:	9b08      	ldr	r3, [sp, #32]
 8005ca6:	4453      	add	r3, sl
 8005ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005caa:	9b02      	ldr	r3, [sp, #8]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cb2:	9b07      	ldr	r3, [sp, #28]
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	4648      	mov	r0, r9
 8005cba:	9302      	str	r3, [sp, #8]
 8005cbc:	f7ff fa98 	bl	80051f0 <quorem>
 8005cc0:	4639      	mov	r1, r7
 8005cc2:	9008      	str	r0, [sp, #32]
 8005cc4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005cc8:	4648      	mov	r0, r9
 8005cca:	f000 fca1 	bl	8006610 <__mcmp>
 8005cce:	462a      	mov	r2, r5
 8005cd0:	9009      	str	r0, [sp, #36]	@ 0x24
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	4658      	mov	r0, fp
 8005cd6:	f000 fcb7 	bl	8006648 <__mdiff>
 8005cda:	68c2      	ldr	r2, [r0, #12]
 8005cdc:	4606      	mov	r6, r0
 8005cde:	bb02      	cbnz	r2, 8005d22 <_dtoa_r+0xa22>
 8005ce0:	4601      	mov	r1, r0
 8005ce2:	4648      	mov	r0, r9
 8005ce4:	f000 fc94 	bl	8006610 <__mcmp>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	4631      	mov	r1, r6
 8005cec:	4658      	mov	r0, fp
 8005cee:	920c      	str	r2, [sp, #48]	@ 0x30
 8005cf0:	f000 fa0c 	bl	800610c <_Bfree>
 8005cf4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005cf6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005cf8:	9e07      	ldr	r6, [sp, #28]
 8005cfa:	ea43 0102 	orr.w	r1, r3, r2
 8005cfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d00:	4319      	orrs	r1, r3
 8005d02:	d110      	bne.n	8005d26 <_dtoa_r+0xa26>
 8005d04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d08:	d029      	beq.n	8005d5e <_dtoa_r+0xa5e>
 8005d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	dd02      	ble.n	8005d16 <_dtoa_r+0xa16>
 8005d10:	9b08      	ldr	r3, [sp, #32]
 8005d12:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005d16:	9b02      	ldr	r3, [sp, #8]
 8005d18:	f883 8000 	strb.w	r8, [r3]
 8005d1c:	e63b      	b.n	8005996 <_dtoa_r+0x696>
 8005d1e:	4628      	mov	r0, r5
 8005d20:	e7bb      	b.n	8005c9a <_dtoa_r+0x99a>
 8005d22:	2201      	movs	r2, #1
 8005d24:	e7e1      	b.n	8005cea <_dtoa_r+0x9ea>
 8005d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	db04      	blt.n	8005d36 <_dtoa_r+0xa36>
 8005d2c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005d2e:	430b      	orrs	r3, r1
 8005d30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d32:	430b      	orrs	r3, r1
 8005d34:	d120      	bne.n	8005d78 <_dtoa_r+0xa78>
 8005d36:	2a00      	cmp	r2, #0
 8005d38:	dded      	ble.n	8005d16 <_dtoa_r+0xa16>
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	4658      	mov	r0, fp
 8005d40:	f000 fbfa 	bl	8006538 <__lshift>
 8005d44:	4621      	mov	r1, r4
 8005d46:	4681      	mov	r9, r0
 8005d48:	f000 fc62 	bl	8006610 <__mcmp>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	dc03      	bgt.n	8005d58 <_dtoa_r+0xa58>
 8005d50:	d1e1      	bne.n	8005d16 <_dtoa_r+0xa16>
 8005d52:	f018 0f01 	tst.w	r8, #1
 8005d56:	d0de      	beq.n	8005d16 <_dtoa_r+0xa16>
 8005d58:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d5c:	d1d8      	bne.n	8005d10 <_dtoa_r+0xa10>
 8005d5e:	2339      	movs	r3, #57	@ 0x39
 8005d60:	9a02      	ldr	r2, [sp, #8]
 8005d62:	7013      	strb	r3, [r2, #0]
 8005d64:	4633      	mov	r3, r6
 8005d66:	461e      	mov	r6, r3
 8005d68:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	2a39      	cmp	r2, #57	@ 0x39
 8005d70:	d052      	beq.n	8005e18 <_dtoa_r+0xb18>
 8005d72:	3201      	adds	r2, #1
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	e60e      	b.n	8005996 <_dtoa_r+0x696>
 8005d78:	2a00      	cmp	r2, #0
 8005d7a:	dd07      	ble.n	8005d8c <_dtoa_r+0xa8c>
 8005d7c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d80:	d0ed      	beq.n	8005d5e <_dtoa_r+0xa5e>
 8005d82:	9a02      	ldr	r2, [sp, #8]
 8005d84:	f108 0301 	add.w	r3, r8, #1
 8005d88:	7013      	strb	r3, [r2, #0]
 8005d8a:	e604      	b.n	8005996 <_dtoa_r+0x696>
 8005d8c:	9b07      	ldr	r3, [sp, #28]
 8005d8e:	9a07      	ldr	r2, [sp, #28]
 8005d90:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005d94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d028      	beq.n	8005dec <_dtoa_r+0xaec>
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	220a      	movs	r2, #10
 8005da0:	4658      	mov	r0, fp
 8005da2:	f000 f9d5 	bl	8006150 <__multadd>
 8005da6:	42af      	cmp	r7, r5
 8005da8:	4681      	mov	r9, r0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	f04f 020a 	mov.w	r2, #10
 8005db2:	4639      	mov	r1, r7
 8005db4:	4658      	mov	r0, fp
 8005db6:	d107      	bne.n	8005dc8 <_dtoa_r+0xac8>
 8005db8:	f000 f9ca 	bl	8006150 <__multadd>
 8005dbc:	4607      	mov	r7, r0
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	9b07      	ldr	r3, [sp, #28]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	9307      	str	r3, [sp, #28]
 8005dc6:	e774      	b.n	8005cb2 <_dtoa_r+0x9b2>
 8005dc8:	f000 f9c2 	bl	8006150 <__multadd>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4607      	mov	r7, r0
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	220a      	movs	r2, #10
 8005dd4:	4658      	mov	r0, fp
 8005dd6:	f000 f9bb 	bl	8006150 <__multadd>
 8005dda:	4605      	mov	r5, r0
 8005ddc:	e7f0      	b.n	8005dc0 <_dtoa_r+0xac0>
 8005dde:	9b08      	ldr	r3, [sp, #32]
 8005de0:	2700      	movs	r7, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bfcc      	ite	gt
 8005de6:	461e      	movgt	r6, r3
 8005de8:	2601      	movle	r6, #1
 8005dea:	4456      	add	r6, sl
 8005dec:	4649      	mov	r1, r9
 8005dee:	2201      	movs	r2, #1
 8005df0:	4658      	mov	r0, fp
 8005df2:	f000 fba1 	bl	8006538 <__lshift>
 8005df6:	4621      	mov	r1, r4
 8005df8:	4681      	mov	r9, r0
 8005dfa:	f000 fc09 	bl	8006610 <__mcmp>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	dcb0      	bgt.n	8005d64 <_dtoa_r+0xa64>
 8005e02:	d102      	bne.n	8005e0a <_dtoa_r+0xb0a>
 8005e04:	f018 0f01 	tst.w	r8, #1
 8005e08:	d1ac      	bne.n	8005d64 <_dtoa_r+0xa64>
 8005e0a:	4633      	mov	r3, r6
 8005e0c:	461e      	mov	r6, r3
 8005e0e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e12:	2a30      	cmp	r2, #48	@ 0x30
 8005e14:	d0fa      	beq.n	8005e0c <_dtoa_r+0xb0c>
 8005e16:	e5be      	b.n	8005996 <_dtoa_r+0x696>
 8005e18:	459a      	cmp	sl, r3
 8005e1a:	d1a4      	bne.n	8005d66 <_dtoa_r+0xa66>
 8005e1c:	9b04      	ldr	r3, [sp, #16]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	9304      	str	r3, [sp, #16]
 8005e22:	2331      	movs	r3, #49	@ 0x31
 8005e24:	f88a 3000 	strb.w	r3, [sl]
 8005e28:	e5b5      	b.n	8005996 <_dtoa_r+0x696>
 8005e2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e2c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005e8c <_dtoa_r+0xb8c>
 8005e30:	b11b      	cbz	r3, 8005e3a <_dtoa_r+0xb3a>
 8005e32:	f10a 0308 	add.w	r3, sl, #8
 8005e36:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	4650      	mov	r0, sl
 8005e3c:	b017      	add	sp, #92	@ 0x5c
 8005e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	f77f ae3d 	ble.w	8005ac4 <_dtoa_r+0x7c4>
 8005e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e4e:	2001      	movs	r0, #1
 8005e50:	e65b      	b.n	8005b0a <_dtoa_r+0x80a>
 8005e52:	9b08      	ldr	r3, [sp, #32]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f77f aed6 	ble.w	8005c06 <_dtoa_r+0x906>
 8005e5a:	4656      	mov	r6, sl
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	4648      	mov	r0, r9
 8005e60:	f7ff f9c6 	bl	80051f0 <quorem>
 8005e64:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005e68:	9b08      	ldr	r3, [sp, #32]
 8005e6a:	f806 8b01 	strb.w	r8, [r6], #1
 8005e6e:	eba6 020a 	sub.w	r2, r6, sl
 8005e72:	4293      	cmp	r3, r2
 8005e74:	ddb3      	ble.n	8005dde <_dtoa_r+0xade>
 8005e76:	4649      	mov	r1, r9
 8005e78:	2300      	movs	r3, #0
 8005e7a:	220a      	movs	r2, #10
 8005e7c:	4658      	mov	r0, fp
 8005e7e:	f000 f967 	bl	8006150 <__multadd>
 8005e82:	4681      	mov	r9, r0
 8005e84:	e7ea      	b.n	8005e5c <_dtoa_r+0xb5c>
 8005e86:	bf00      	nop
 8005e88:	08008ad3 	.word	0x08008ad3
 8005e8c:	08008a57 	.word	0x08008a57

08005e90 <_free_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4605      	mov	r5, r0
 8005e94:	2900      	cmp	r1, #0
 8005e96:	d040      	beq.n	8005f1a <_free_r+0x8a>
 8005e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e9c:	1f0c      	subs	r4, r1, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfb8      	it	lt
 8005ea2:	18e4      	addlt	r4, r4, r3
 8005ea4:	f000 f8e6 	bl	8006074 <__malloc_lock>
 8005ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8005f1c <_free_r+0x8c>)
 8005eaa:	6813      	ldr	r3, [r2, #0]
 8005eac:	b933      	cbnz	r3, 8005ebc <_free_r+0x2c>
 8005eae:	6063      	str	r3, [r4, #4]
 8005eb0:	6014      	str	r4, [r2, #0]
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eb8:	f000 b8e2 	b.w	8006080 <__malloc_unlock>
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	d908      	bls.n	8005ed2 <_free_r+0x42>
 8005ec0:	6820      	ldr	r0, [r4, #0]
 8005ec2:	1821      	adds	r1, r4, r0
 8005ec4:	428b      	cmp	r3, r1
 8005ec6:	bf01      	itttt	eq
 8005ec8:	6819      	ldreq	r1, [r3, #0]
 8005eca:	685b      	ldreq	r3, [r3, #4]
 8005ecc:	1809      	addeq	r1, r1, r0
 8005ece:	6021      	streq	r1, [r4, #0]
 8005ed0:	e7ed      	b.n	8005eae <_free_r+0x1e>
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	b10b      	cbz	r3, 8005edc <_free_r+0x4c>
 8005ed8:	42a3      	cmp	r3, r4
 8005eda:	d9fa      	bls.n	8005ed2 <_free_r+0x42>
 8005edc:	6811      	ldr	r1, [r2, #0]
 8005ede:	1850      	adds	r0, r2, r1
 8005ee0:	42a0      	cmp	r0, r4
 8005ee2:	d10b      	bne.n	8005efc <_free_r+0x6c>
 8005ee4:	6820      	ldr	r0, [r4, #0]
 8005ee6:	4401      	add	r1, r0
 8005ee8:	1850      	adds	r0, r2, r1
 8005eea:	4283      	cmp	r3, r0
 8005eec:	6011      	str	r1, [r2, #0]
 8005eee:	d1e0      	bne.n	8005eb2 <_free_r+0x22>
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	4408      	add	r0, r1
 8005ef6:	6010      	str	r0, [r2, #0]
 8005ef8:	6053      	str	r3, [r2, #4]
 8005efa:	e7da      	b.n	8005eb2 <_free_r+0x22>
 8005efc:	d902      	bls.n	8005f04 <_free_r+0x74>
 8005efe:	230c      	movs	r3, #12
 8005f00:	602b      	str	r3, [r5, #0]
 8005f02:	e7d6      	b.n	8005eb2 <_free_r+0x22>
 8005f04:	6820      	ldr	r0, [r4, #0]
 8005f06:	1821      	adds	r1, r4, r0
 8005f08:	428b      	cmp	r3, r1
 8005f0a:	bf01      	itttt	eq
 8005f0c:	6819      	ldreq	r1, [r3, #0]
 8005f0e:	685b      	ldreq	r3, [r3, #4]
 8005f10:	1809      	addeq	r1, r1, r0
 8005f12:	6021      	streq	r1, [r4, #0]
 8005f14:	6063      	str	r3, [r4, #4]
 8005f16:	6054      	str	r4, [r2, #4]
 8005f18:	e7cb      	b.n	8005eb2 <_free_r+0x22>
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}
 8005f1c:	20000448 	.word	0x20000448

08005f20 <malloc>:
 8005f20:	4b02      	ldr	r3, [pc, #8]	@ (8005f2c <malloc+0xc>)
 8005f22:	4601      	mov	r1, r0
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	f000 b825 	b.w	8005f74 <_malloc_r>
 8005f2a:	bf00      	nop
 8005f2c:	20000018 	.word	0x20000018

08005f30 <sbrk_aligned>:
 8005f30:	b570      	push	{r4, r5, r6, lr}
 8005f32:	4e0f      	ldr	r6, [pc, #60]	@ (8005f70 <sbrk_aligned+0x40>)
 8005f34:	460c      	mov	r4, r1
 8005f36:	6831      	ldr	r1, [r6, #0]
 8005f38:	4605      	mov	r5, r0
 8005f3a:	b911      	cbnz	r1, 8005f42 <sbrk_aligned+0x12>
 8005f3c:	f001 fdf6 	bl	8007b2c <_sbrk_r>
 8005f40:	6030      	str	r0, [r6, #0]
 8005f42:	4621      	mov	r1, r4
 8005f44:	4628      	mov	r0, r5
 8005f46:	f001 fdf1 	bl	8007b2c <_sbrk_r>
 8005f4a:	1c43      	adds	r3, r0, #1
 8005f4c:	d103      	bne.n	8005f56 <sbrk_aligned+0x26>
 8005f4e:	f04f 34ff 	mov.w	r4, #4294967295
 8005f52:	4620      	mov	r0, r4
 8005f54:	bd70      	pop	{r4, r5, r6, pc}
 8005f56:	1cc4      	adds	r4, r0, #3
 8005f58:	f024 0403 	bic.w	r4, r4, #3
 8005f5c:	42a0      	cmp	r0, r4
 8005f5e:	d0f8      	beq.n	8005f52 <sbrk_aligned+0x22>
 8005f60:	1a21      	subs	r1, r4, r0
 8005f62:	4628      	mov	r0, r5
 8005f64:	f001 fde2 	bl	8007b2c <_sbrk_r>
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d1f2      	bne.n	8005f52 <sbrk_aligned+0x22>
 8005f6c:	e7ef      	b.n	8005f4e <sbrk_aligned+0x1e>
 8005f6e:	bf00      	nop
 8005f70:	20000444 	.word	0x20000444

08005f74 <_malloc_r>:
 8005f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f78:	1ccd      	adds	r5, r1, #3
 8005f7a:	f025 0503 	bic.w	r5, r5, #3
 8005f7e:	3508      	adds	r5, #8
 8005f80:	2d0c      	cmp	r5, #12
 8005f82:	bf38      	it	cc
 8005f84:	250c      	movcc	r5, #12
 8005f86:	2d00      	cmp	r5, #0
 8005f88:	4606      	mov	r6, r0
 8005f8a:	db01      	blt.n	8005f90 <_malloc_r+0x1c>
 8005f8c:	42a9      	cmp	r1, r5
 8005f8e:	d904      	bls.n	8005f9a <_malloc_r+0x26>
 8005f90:	230c      	movs	r3, #12
 8005f92:	6033      	str	r3, [r6, #0]
 8005f94:	2000      	movs	r0, #0
 8005f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006070 <_malloc_r+0xfc>
 8005f9e:	f000 f869 	bl	8006074 <__malloc_lock>
 8005fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8005fa6:	461c      	mov	r4, r3
 8005fa8:	bb44      	cbnz	r4, 8005ffc <_malloc_r+0x88>
 8005faa:	4629      	mov	r1, r5
 8005fac:	4630      	mov	r0, r6
 8005fae:	f7ff ffbf 	bl	8005f30 <sbrk_aligned>
 8005fb2:	1c43      	adds	r3, r0, #1
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	d158      	bne.n	800606a <_malloc_r+0xf6>
 8005fb8:	f8d8 4000 	ldr.w	r4, [r8]
 8005fbc:	4627      	mov	r7, r4
 8005fbe:	2f00      	cmp	r7, #0
 8005fc0:	d143      	bne.n	800604a <_malloc_r+0xd6>
 8005fc2:	2c00      	cmp	r4, #0
 8005fc4:	d04b      	beq.n	800605e <_malloc_r+0xea>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	4639      	mov	r1, r7
 8005fca:	4630      	mov	r0, r6
 8005fcc:	eb04 0903 	add.w	r9, r4, r3
 8005fd0:	f001 fdac 	bl	8007b2c <_sbrk_r>
 8005fd4:	4581      	cmp	r9, r0
 8005fd6:	d142      	bne.n	800605e <_malloc_r+0xea>
 8005fd8:	6821      	ldr	r1, [r4, #0]
 8005fda:	4630      	mov	r0, r6
 8005fdc:	1a6d      	subs	r5, r5, r1
 8005fde:	4629      	mov	r1, r5
 8005fe0:	f7ff ffa6 	bl	8005f30 <sbrk_aligned>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d03a      	beq.n	800605e <_malloc_r+0xea>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	442b      	add	r3, r5
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	f8d8 3000 	ldr.w	r3, [r8]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	bb62      	cbnz	r2, 8006050 <_malloc_r+0xdc>
 8005ff6:	f8c8 7000 	str.w	r7, [r8]
 8005ffa:	e00f      	b.n	800601c <_malloc_r+0xa8>
 8005ffc:	6822      	ldr	r2, [r4, #0]
 8005ffe:	1b52      	subs	r2, r2, r5
 8006000:	d420      	bmi.n	8006044 <_malloc_r+0xd0>
 8006002:	2a0b      	cmp	r2, #11
 8006004:	d917      	bls.n	8006036 <_malloc_r+0xc2>
 8006006:	1961      	adds	r1, r4, r5
 8006008:	42a3      	cmp	r3, r4
 800600a:	6025      	str	r5, [r4, #0]
 800600c:	bf18      	it	ne
 800600e:	6059      	strne	r1, [r3, #4]
 8006010:	6863      	ldr	r3, [r4, #4]
 8006012:	bf08      	it	eq
 8006014:	f8c8 1000 	streq.w	r1, [r8]
 8006018:	5162      	str	r2, [r4, r5]
 800601a:	604b      	str	r3, [r1, #4]
 800601c:	4630      	mov	r0, r6
 800601e:	f000 f82f 	bl	8006080 <__malloc_unlock>
 8006022:	f104 000b 	add.w	r0, r4, #11
 8006026:	1d23      	adds	r3, r4, #4
 8006028:	f020 0007 	bic.w	r0, r0, #7
 800602c:	1ac2      	subs	r2, r0, r3
 800602e:	bf1c      	itt	ne
 8006030:	1a1b      	subne	r3, r3, r0
 8006032:	50a3      	strne	r3, [r4, r2]
 8006034:	e7af      	b.n	8005f96 <_malloc_r+0x22>
 8006036:	6862      	ldr	r2, [r4, #4]
 8006038:	42a3      	cmp	r3, r4
 800603a:	bf0c      	ite	eq
 800603c:	f8c8 2000 	streq.w	r2, [r8]
 8006040:	605a      	strne	r2, [r3, #4]
 8006042:	e7eb      	b.n	800601c <_malloc_r+0xa8>
 8006044:	4623      	mov	r3, r4
 8006046:	6864      	ldr	r4, [r4, #4]
 8006048:	e7ae      	b.n	8005fa8 <_malloc_r+0x34>
 800604a:	463c      	mov	r4, r7
 800604c:	687f      	ldr	r7, [r7, #4]
 800604e:	e7b6      	b.n	8005fbe <_malloc_r+0x4a>
 8006050:	461a      	mov	r2, r3
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	42a3      	cmp	r3, r4
 8006056:	d1fb      	bne.n	8006050 <_malloc_r+0xdc>
 8006058:	2300      	movs	r3, #0
 800605a:	6053      	str	r3, [r2, #4]
 800605c:	e7de      	b.n	800601c <_malloc_r+0xa8>
 800605e:	230c      	movs	r3, #12
 8006060:	4630      	mov	r0, r6
 8006062:	6033      	str	r3, [r6, #0]
 8006064:	f000 f80c 	bl	8006080 <__malloc_unlock>
 8006068:	e794      	b.n	8005f94 <_malloc_r+0x20>
 800606a:	6005      	str	r5, [r0, #0]
 800606c:	e7d6      	b.n	800601c <_malloc_r+0xa8>
 800606e:	bf00      	nop
 8006070:	20000448 	.word	0x20000448

08006074 <__malloc_lock>:
 8006074:	4801      	ldr	r0, [pc, #4]	@ (800607c <__malloc_lock+0x8>)
 8006076:	f7ff b8a6 	b.w	80051c6 <__retarget_lock_acquire_recursive>
 800607a:	bf00      	nop
 800607c:	20000440 	.word	0x20000440

08006080 <__malloc_unlock>:
 8006080:	4801      	ldr	r0, [pc, #4]	@ (8006088 <__malloc_unlock+0x8>)
 8006082:	f7ff b8a1 	b.w	80051c8 <__retarget_lock_release_recursive>
 8006086:	bf00      	nop
 8006088:	20000440 	.word	0x20000440

0800608c <_Balloc>:
 800608c:	b570      	push	{r4, r5, r6, lr}
 800608e:	69c6      	ldr	r6, [r0, #28]
 8006090:	4604      	mov	r4, r0
 8006092:	460d      	mov	r5, r1
 8006094:	b976      	cbnz	r6, 80060b4 <_Balloc+0x28>
 8006096:	2010      	movs	r0, #16
 8006098:	f7ff ff42 	bl	8005f20 <malloc>
 800609c:	4602      	mov	r2, r0
 800609e:	61e0      	str	r0, [r4, #28]
 80060a0:	b920      	cbnz	r0, 80060ac <_Balloc+0x20>
 80060a2:	216b      	movs	r1, #107	@ 0x6b
 80060a4:	4b17      	ldr	r3, [pc, #92]	@ (8006104 <_Balloc+0x78>)
 80060a6:	4818      	ldr	r0, [pc, #96]	@ (8006108 <_Balloc+0x7c>)
 80060a8:	f001 fd64 	bl	8007b74 <__assert_func>
 80060ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060b0:	6006      	str	r6, [r0, #0]
 80060b2:	60c6      	str	r6, [r0, #12]
 80060b4:	69e6      	ldr	r6, [r4, #28]
 80060b6:	68f3      	ldr	r3, [r6, #12]
 80060b8:	b183      	cbz	r3, 80060dc <_Balloc+0x50>
 80060ba:	69e3      	ldr	r3, [r4, #28]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060c2:	b9b8      	cbnz	r0, 80060f4 <_Balloc+0x68>
 80060c4:	2101      	movs	r1, #1
 80060c6:	fa01 f605 	lsl.w	r6, r1, r5
 80060ca:	1d72      	adds	r2, r6, #5
 80060cc:	4620      	mov	r0, r4
 80060ce:	0092      	lsls	r2, r2, #2
 80060d0:	f001 fd6e 	bl	8007bb0 <_calloc_r>
 80060d4:	b160      	cbz	r0, 80060f0 <_Balloc+0x64>
 80060d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060da:	e00e      	b.n	80060fa <_Balloc+0x6e>
 80060dc:	2221      	movs	r2, #33	@ 0x21
 80060de:	2104      	movs	r1, #4
 80060e0:	4620      	mov	r0, r4
 80060e2:	f001 fd65 	bl	8007bb0 <_calloc_r>
 80060e6:	69e3      	ldr	r3, [r4, #28]
 80060e8:	60f0      	str	r0, [r6, #12]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e4      	bne.n	80060ba <_Balloc+0x2e>
 80060f0:	2000      	movs	r0, #0
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
 80060f4:	6802      	ldr	r2, [r0, #0]
 80060f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060fa:	2300      	movs	r3, #0
 80060fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006100:	e7f7      	b.n	80060f2 <_Balloc+0x66>
 8006102:	bf00      	nop
 8006104:	08008a64 	.word	0x08008a64
 8006108:	08008ae4 	.word	0x08008ae4

0800610c <_Bfree>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	69c6      	ldr	r6, [r0, #28]
 8006110:	4605      	mov	r5, r0
 8006112:	460c      	mov	r4, r1
 8006114:	b976      	cbnz	r6, 8006134 <_Bfree+0x28>
 8006116:	2010      	movs	r0, #16
 8006118:	f7ff ff02 	bl	8005f20 <malloc>
 800611c:	4602      	mov	r2, r0
 800611e:	61e8      	str	r0, [r5, #28]
 8006120:	b920      	cbnz	r0, 800612c <_Bfree+0x20>
 8006122:	218f      	movs	r1, #143	@ 0x8f
 8006124:	4b08      	ldr	r3, [pc, #32]	@ (8006148 <_Bfree+0x3c>)
 8006126:	4809      	ldr	r0, [pc, #36]	@ (800614c <_Bfree+0x40>)
 8006128:	f001 fd24 	bl	8007b74 <__assert_func>
 800612c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006130:	6006      	str	r6, [r0, #0]
 8006132:	60c6      	str	r6, [r0, #12]
 8006134:	b13c      	cbz	r4, 8006146 <_Bfree+0x3a>
 8006136:	69eb      	ldr	r3, [r5, #28]
 8006138:	6862      	ldr	r2, [r4, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006140:	6021      	str	r1, [r4, #0]
 8006142:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006146:	bd70      	pop	{r4, r5, r6, pc}
 8006148:	08008a64 	.word	0x08008a64
 800614c:	08008ae4 	.word	0x08008ae4

08006150 <__multadd>:
 8006150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006154:	4607      	mov	r7, r0
 8006156:	460c      	mov	r4, r1
 8006158:	461e      	mov	r6, r3
 800615a:	2000      	movs	r0, #0
 800615c:	690d      	ldr	r5, [r1, #16]
 800615e:	f101 0c14 	add.w	ip, r1, #20
 8006162:	f8dc 3000 	ldr.w	r3, [ip]
 8006166:	3001      	adds	r0, #1
 8006168:	b299      	uxth	r1, r3
 800616a:	fb02 6101 	mla	r1, r2, r1, r6
 800616e:	0c1e      	lsrs	r6, r3, #16
 8006170:	0c0b      	lsrs	r3, r1, #16
 8006172:	fb02 3306 	mla	r3, r2, r6, r3
 8006176:	b289      	uxth	r1, r1
 8006178:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800617c:	4285      	cmp	r5, r0
 800617e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006182:	f84c 1b04 	str.w	r1, [ip], #4
 8006186:	dcec      	bgt.n	8006162 <__multadd+0x12>
 8006188:	b30e      	cbz	r6, 80061ce <__multadd+0x7e>
 800618a:	68a3      	ldr	r3, [r4, #8]
 800618c:	42ab      	cmp	r3, r5
 800618e:	dc19      	bgt.n	80061c4 <__multadd+0x74>
 8006190:	6861      	ldr	r1, [r4, #4]
 8006192:	4638      	mov	r0, r7
 8006194:	3101      	adds	r1, #1
 8006196:	f7ff ff79 	bl	800608c <_Balloc>
 800619a:	4680      	mov	r8, r0
 800619c:	b928      	cbnz	r0, 80061aa <__multadd+0x5a>
 800619e:	4602      	mov	r2, r0
 80061a0:	21ba      	movs	r1, #186	@ 0xba
 80061a2:	4b0c      	ldr	r3, [pc, #48]	@ (80061d4 <__multadd+0x84>)
 80061a4:	480c      	ldr	r0, [pc, #48]	@ (80061d8 <__multadd+0x88>)
 80061a6:	f001 fce5 	bl	8007b74 <__assert_func>
 80061aa:	6922      	ldr	r2, [r4, #16]
 80061ac:	f104 010c 	add.w	r1, r4, #12
 80061b0:	3202      	adds	r2, #2
 80061b2:	0092      	lsls	r2, r2, #2
 80061b4:	300c      	adds	r0, #12
 80061b6:	f001 fcc9 	bl	8007b4c <memcpy>
 80061ba:	4621      	mov	r1, r4
 80061bc:	4638      	mov	r0, r7
 80061be:	f7ff ffa5 	bl	800610c <_Bfree>
 80061c2:	4644      	mov	r4, r8
 80061c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061c8:	3501      	adds	r5, #1
 80061ca:	615e      	str	r6, [r3, #20]
 80061cc:	6125      	str	r5, [r4, #16]
 80061ce:	4620      	mov	r0, r4
 80061d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d4:	08008ad3 	.word	0x08008ad3
 80061d8:	08008ae4 	.word	0x08008ae4

080061dc <__s2b>:
 80061dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e0:	4615      	mov	r5, r2
 80061e2:	2209      	movs	r2, #9
 80061e4:	461f      	mov	r7, r3
 80061e6:	3308      	adds	r3, #8
 80061e8:	460c      	mov	r4, r1
 80061ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80061ee:	4606      	mov	r6, r0
 80061f0:	2201      	movs	r2, #1
 80061f2:	2100      	movs	r1, #0
 80061f4:	429a      	cmp	r2, r3
 80061f6:	db09      	blt.n	800620c <__s2b+0x30>
 80061f8:	4630      	mov	r0, r6
 80061fa:	f7ff ff47 	bl	800608c <_Balloc>
 80061fe:	b940      	cbnz	r0, 8006212 <__s2b+0x36>
 8006200:	4602      	mov	r2, r0
 8006202:	21d3      	movs	r1, #211	@ 0xd3
 8006204:	4b18      	ldr	r3, [pc, #96]	@ (8006268 <__s2b+0x8c>)
 8006206:	4819      	ldr	r0, [pc, #100]	@ (800626c <__s2b+0x90>)
 8006208:	f001 fcb4 	bl	8007b74 <__assert_func>
 800620c:	0052      	lsls	r2, r2, #1
 800620e:	3101      	adds	r1, #1
 8006210:	e7f0      	b.n	80061f4 <__s2b+0x18>
 8006212:	9b08      	ldr	r3, [sp, #32]
 8006214:	2d09      	cmp	r5, #9
 8006216:	6143      	str	r3, [r0, #20]
 8006218:	f04f 0301 	mov.w	r3, #1
 800621c:	6103      	str	r3, [r0, #16]
 800621e:	dd16      	ble.n	800624e <__s2b+0x72>
 8006220:	f104 0909 	add.w	r9, r4, #9
 8006224:	46c8      	mov	r8, r9
 8006226:	442c      	add	r4, r5
 8006228:	f818 3b01 	ldrb.w	r3, [r8], #1
 800622c:	4601      	mov	r1, r0
 800622e:	220a      	movs	r2, #10
 8006230:	4630      	mov	r0, r6
 8006232:	3b30      	subs	r3, #48	@ 0x30
 8006234:	f7ff ff8c 	bl	8006150 <__multadd>
 8006238:	45a0      	cmp	r8, r4
 800623a:	d1f5      	bne.n	8006228 <__s2b+0x4c>
 800623c:	f1a5 0408 	sub.w	r4, r5, #8
 8006240:	444c      	add	r4, r9
 8006242:	1b2d      	subs	r5, r5, r4
 8006244:	1963      	adds	r3, r4, r5
 8006246:	42bb      	cmp	r3, r7
 8006248:	db04      	blt.n	8006254 <__s2b+0x78>
 800624a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800624e:	2509      	movs	r5, #9
 8006250:	340a      	adds	r4, #10
 8006252:	e7f6      	b.n	8006242 <__s2b+0x66>
 8006254:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006258:	4601      	mov	r1, r0
 800625a:	220a      	movs	r2, #10
 800625c:	4630      	mov	r0, r6
 800625e:	3b30      	subs	r3, #48	@ 0x30
 8006260:	f7ff ff76 	bl	8006150 <__multadd>
 8006264:	e7ee      	b.n	8006244 <__s2b+0x68>
 8006266:	bf00      	nop
 8006268:	08008ad3 	.word	0x08008ad3
 800626c:	08008ae4 	.word	0x08008ae4

08006270 <__hi0bits>:
 8006270:	4603      	mov	r3, r0
 8006272:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006276:	bf3a      	itte	cc
 8006278:	0403      	lslcc	r3, r0, #16
 800627a:	2010      	movcc	r0, #16
 800627c:	2000      	movcs	r0, #0
 800627e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006282:	bf3c      	itt	cc
 8006284:	021b      	lslcc	r3, r3, #8
 8006286:	3008      	addcc	r0, #8
 8006288:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800628c:	bf3c      	itt	cc
 800628e:	011b      	lslcc	r3, r3, #4
 8006290:	3004      	addcc	r0, #4
 8006292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006296:	bf3c      	itt	cc
 8006298:	009b      	lslcc	r3, r3, #2
 800629a:	3002      	addcc	r0, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	db05      	blt.n	80062ac <__hi0bits+0x3c>
 80062a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80062a4:	f100 0001 	add.w	r0, r0, #1
 80062a8:	bf08      	it	eq
 80062aa:	2020      	moveq	r0, #32
 80062ac:	4770      	bx	lr

080062ae <__lo0bits>:
 80062ae:	6803      	ldr	r3, [r0, #0]
 80062b0:	4602      	mov	r2, r0
 80062b2:	f013 0007 	ands.w	r0, r3, #7
 80062b6:	d00b      	beq.n	80062d0 <__lo0bits+0x22>
 80062b8:	07d9      	lsls	r1, r3, #31
 80062ba:	d421      	bmi.n	8006300 <__lo0bits+0x52>
 80062bc:	0798      	lsls	r0, r3, #30
 80062be:	bf49      	itett	mi
 80062c0:	085b      	lsrmi	r3, r3, #1
 80062c2:	089b      	lsrpl	r3, r3, #2
 80062c4:	2001      	movmi	r0, #1
 80062c6:	6013      	strmi	r3, [r2, #0]
 80062c8:	bf5c      	itt	pl
 80062ca:	2002      	movpl	r0, #2
 80062cc:	6013      	strpl	r3, [r2, #0]
 80062ce:	4770      	bx	lr
 80062d0:	b299      	uxth	r1, r3
 80062d2:	b909      	cbnz	r1, 80062d8 <__lo0bits+0x2a>
 80062d4:	2010      	movs	r0, #16
 80062d6:	0c1b      	lsrs	r3, r3, #16
 80062d8:	b2d9      	uxtb	r1, r3
 80062da:	b909      	cbnz	r1, 80062e0 <__lo0bits+0x32>
 80062dc:	3008      	adds	r0, #8
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	0719      	lsls	r1, r3, #28
 80062e2:	bf04      	itt	eq
 80062e4:	091b      	lsreq	r3, r3, #4
 80062e6:	3004      	addeq	r0, #4
 80062e8:	0799      	lsls	r1, r3, #30
 80062ea:	bf04      	itt	eq
 80062ec:	089b      	lsreq	r3, r3, #2
 80062ee:	3002      	addeq	r0, #2
 80062f0:	07d9      	lsls	r1, r3, #31
 80062f2:	d403      	bmi.n	80062fc <__lo0bits+0x4e>
 80062f4:	085b      	lsrs	r3, r3, #1
 80062f6:	f100 0001 	add.w	r0, r0, #1
 80062fa:	d003      	beq.n	8006304 <__lo0bits+0x56>
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	4770      	bx	lr
 8006300:	2000      	movs	r0, #0
 8006302:	4770      	bx	lr
 8006304:	2020      	movs	r0, #32
 8006306:	4770      	bx	lr

08006308 <__i2b>:
 8006308:	b510      	push	{r4, lr}
 800630a:	460c      	mov	r4, r1
 800630c:	2101      	movs	r1, #1
 800630e:	f7ff febd 	bl	800608c <_Balloc>
 8006312:	4602      	mov	r2, r0
 8006314:	b928      	cbnz	r0, 8006322 <__i2b+0x1a>
 8006316:	f240 1145 	movw	r1, #325	@ 0x145
 800631a:	4b04      	ldr	r3, [pc, #16]	@ (800632c <__i2b+0x24>)
 800631c:	4804      	ldr	r0, [pc, #16]	@ (8006330 <__i2b+0x28>)
 800631e:	f001 fc29 	bl	8007b74 <__assert_func>
 8006322:	2301      	movs	r3, #1
 8006324:	6144      	str	r4, [r0, #20]
 8006326:	6103      	str	r3, [r0, #16]
 8006328:	bd10      	pop	{r4, pc}
 800632a:	bf00      	nop
 800632c:	08008ad3 	.word	0x08008ad3
 8006330:	08008ae4 	.word	0x08008ae4

08006334 <__multiply>:
 8006334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006338:	4614      	mov	r4, r2
 800633a:	690a      	ldr	r2, [r1, #16]
 800633c:	6923      	ldr	r3, [r4, #16]
 800633e:	460f      	mov	r7, r1
 8006340:	429a      	cmp	r2, r3
 8006342:	bfa2      	ittt	ge
 8006344:	4623      	movge	r3, r4
 8006346:	460c      	movge	r4, r1
 8006348:	461f      	movge	r7, r3
 800634a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800634e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006352:	68a3      	ldr	r3, [r4, #8]
 8006354:	6861      	ldr	r1, [r4, #4]
 8006356:	eb0a 0609 	add.w	r6, sl, r9
 800635a:	42b3      	cmp	r3, r6
 800635c:	b085      	sub	sp, #20
 800635e:	bfb8      	it	lt
 8006360:	3101      	addlt	r1, #1
 8006362:	f7ff fe93 	bl	800608c <_Balloc>
 8006366:	b930      	cbnz	r0, 8006376 <__multiply+0x42>
 8006368:	4602      	mov	r2, r0
 800636a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800636e:	4b43      	ldr	r3, [pc, #268]	@ (800647c <__multiply+0x148>)
 8006370:	4843      	ldr	r0, [pc, #268]	@ (8006480 <__multiply+0x14c>)
 8006372:	f001 fbff 	bl	8007b74 <__assert_func>
 8006376:	f100 0514 	add.w	r5, r0, #20
 800637a:	462b      	mov	r3, r5
 800637c:	2200      	movs	r2, #0
 800637e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006382:	4543      	cmp	r3, r8
 8006384:	d321      	bcc.n	80063ca <__multiply+0x96>
 8006386:	f107 0114 	add.w	r1, r7, #20
 800638a:	f104 0214 	add.w	r2, r4, #20
 800638e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006392:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006396:	9302      	str	r3, [sp, #8]
 8006398:	1b13      	subs	r3, r2, r4
 800639a:	3b15      	subs	r3, #21
 800639c:	f023 0303 	bic.w	r3, r3, #3
 80063a0:	3304      	adds	r3, #4
 80063a2:	f104 0715 	add.w	r7, r4, #21
 80063a6:	42ba      	cmp	r2, r7
 80063a8:	bf38      	it	cc
 80063aa:	2304      	movcc	r3, #4
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	9b02      	ldr	r3, [sp, #8]
 80063b0:	9103      	str	r1, [sp, #12]
 80063b2:	428b      	cmp	r3, r1
 80063b4:	d80c      	bhi.n	80063d0 <__multiply+0x9c>
 80063b6:	2e00      	cmp	r6, #0
 80063b8:	dd03      	ble.n	80063c2 <__multiply+0x8e>
 80063ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d05a      	beq.n	8006478 <__multiply+0x144>
 80063c2:	6106      	str	r6, [r0, #16]
 80063c4:	b005      	add	sp, #20
 80063c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ca:	f843 2b04 	str.w	r2, [r3], #4
 80063ce:	e7d8      	b.n	8006382 <__multiply+0x4e>
 80063d0:	f8b1 a000 	ldrh.w	sl, [r1]
 80063d4:	f1ba 0f00 	cmp.w	sl, #0
 80063d8:	d023      	beq.n	8006422 <__multiply+0xee>
 80063da:	46a9      	mov	r9, r5
 80063dc:	f04f 0c00 	mov.w	ip, #0
 80063e0:	f104 0e14 	add.w	lr, r4, #20
 80063e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80063e8:	f8d9 3000 	ldr.w	r3, [r9]
 80063ec:	fa1f fb87 	uxth.w	fp, r7
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	fb0a 330b 	mla	r3, sl, fp, r3
 80063f6:	4463      	add	r3, ip
 80063f8:	f8d9 c000 	ldr.w	ip, [r9]
 80063fc:	0c3f      	lsrs	r7, r7, #16
 80063fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006402:	fb0a c707 	mla	r7, sl, r7, ip
 8006406:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800640a:	b29b      	uxth	r3, r3
 800640c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006410:	4572      	cmp	r2, lr
 8006412:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006416:	f849 3b04 	str.w	r3, [r9], #4
 800641a:	d8e3      	bhi.n	80063e4 <__multiply+0xb0>
 800641c:	9b01      	ldr	r3, [sp, #4]
 800641e:	f845 c003 	str.w	ip, [r5, r3]
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	3104      	adds	r1, #4
 8006426:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800642a:	f1b9 0f00 	cmp.w	r9, #0
 800642e:	d021      	beq.n	8006474 <__multiply+0x140>
 8006430:	46ae      	mov	lr, r5
 8006432:	f04f 0a00 	mov.w	sl, #0
 8006436:	682b      	ldr	r3, [r5, #0]
 8006438:	f104 0c14 	add.w	ip, r4, #20
 800643c:	f8bc b000 	ldrh.w	fp, [ip]
 8006440:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006444:	b29b      	uxth	r3, r3
 8006446:	fb09 770b 	mla	r7, r9, fp, r7
 800644a:	4457      	add	r7, sl
 800644c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006450:	f84e 3b04 	str.w	r3, [lr], #4
 8006454:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006458:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800645c:	f8be 3000 	ldrh.w	r3, [lr]
 8006460:	4562      	cmp	r2, ip
 8006462:	fb09 330a 	mla	r3, r9, sl, r3
 8006466:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800646a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800646e:	d8e5      	bhi.n	800643c <__multiply+0x108>
 8006470:	9f01      	ldr	r7, [sp, #4]
 8006472:	51eb      	str	r3, [r5, r7]
 8006474:	3504      	adds	r5, #4
 8006476:	e79a      	b.n	80063ae <__multiply+0x7a>
 8006478:	3e01      	subs	r6, #1
 800647a:	e79c      	b.n	80063b6 <__multiply+0x82>
 800647c:	08008ad3 	.word	0x08008ad3
 8006480:	08008ae4 	.word	0x08008ae4

08006484 <__pow5mult>:
 8006484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006488:	4615      	mov	r5, r2
 800648a:	f012 0203 	ands.w	r2, r2, #3
 800648e:	4607      	mov	r7, r0
 8006490:	460e      	mov	r6, r1
 8006492:	d007      	beq.n	80064a4 <__pow5mult+0x20>
 8006494:	4c25      	ldr	r4, [pc, #148]	@ (800652c <__pow5mult+0xa8>)
 8006496:	3a01      	subs	r2, #1
 8006498:	2300      	movs	r3, #0
 800649a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800649e:	f7ff fe57 	bl	8006150 <__multadd>
 80064a2:	4606      	mov	r6, r0
 80064a4:	10ad      	asrs	r5, r5, #2
 80064a6:	d03d      	beq.n	8006524 <__pow5mult+0xa0>
 80064a8:	69fc      	ldr	r4, [r7, #28]
 80064aa:	b97c      	cbnz	r4, 80064cc <__pow5mult+0x48>
 80064ac:	2010      	movs	r0, #16
 80064ae:	f7ff fd37 	bl	8005f20 <malloc>
 80064b2:	4602      	mov	r2, r0
 80064b4:	61f8      	str	r0, [r7, #28]
 80064b6:	b928      	cbnz	r0, 80064c4 <__pow5mult+0x40>
 80064b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80064bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006530 <__pow5mult+0xac>)
 80064be:	481d      	ldr	r0, [pc, #116]	@ (8006534 <__pow5mult+0xb0>)
 80064c0:	f001 fb58 	bl	8007b74 <__assert_func>
 80064c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064c8:	6004      	str	r4, [r0, #0]
 80064ca:	60c4      	str	r4, [r0, #12]
 80064cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80064d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064d4:	b94c      	cbnz	r4, 80064ea <__pow5mult+0x66>
 80064d6:	f240 2171 	movw	r1, #625	@ 0x271
 80064da:	4638      	mov	r0, r7
 80064dc:	f7ff ff14 	bl	8006308 <__i2b>
 80064e0:	2300      	movs	r3, #0
 80064e2:	4604      	mov	r4, r0
 80064e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80064e8:	6003      	str	r3, [r0, #0]
 80064ea:	f04f 0900 	mov.w	r9, #0
 80064ee:	07eb      	lsls	r3, r5, #31
 80064f0:	d50a      	bpl.n	8006508 <__pow5mult+0x84>
 80064f2:	4631      	mov	r1, r6
 80064f4:	4622      	mov	r2, r4
 80064f6:	4638      	mov	r0, r7
 80064f8:	f7ff ff1c 	bl	8006334 <__multiply>
 80064fc:	4680      	mov	r8, r0
 80064fe:	4631      	mov	r1, r6
 8006500:	4638      	mov	r0, r7
 8006502:	f7ff fe03 	bl	800610c <_Bfree>
 8006506:	4646      	mov	r6, r8
 8006508:	106d      	asrs	r5, r5, #1
 800650a:	d00b      	beq.n	8006524 <__pow5mult+0xa0>
 800650c:	6820      	ldr	r0, [r4, #0]
 800650e:	b938      	cbnz	r0, 8006520 <__pow5mult+0x9c>
 8006510:	4622      	mov	r2, r4
 8006512:	4621      	mov	r1, r4
 8006514:	4638      	mov	r0, r7
 8006516:	f7ff ff0d 	bl	8006334 <__multiply>
 800651a:	6020      	str	r0, [r4, #0]
 800651c:	f8c0 9000 	str.w	r9, [r0]
 8006520:	4604      	mov	r4, r0
 8006522:	e7e4      	b.n	80064ee <__pow5mult+0x6a>
 8006524:	4630      	mov	r0, r6
 8006526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800652a:	bf00      	nop
 800652c:	08008b40 	.word	0x08008b40
 8006530:	08008a64 	.word	0x08008a64
 8006534:	08008ae4 	.word	0x08008ae4

08006538 <__lshift>:
 8006538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800653c:	460c      	mov	r4, r1
 800653e:	4607      	mov	r7, r0
 8006540:	4691      	mov	r9, r2
 8006542:	6923      	ldr	r3, [r4, #16]
 8006544:	6849      	ldr	r1, [r1, #4]
 8006546:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800654a:	68a3      	ldr	r3, [r4, #8]
 800654c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006550:	f108 0601 	add.w	r6, r8, #1
 8006554:	42b3      	cmp	r3, r6
 8006556:	db0b      	blt.n	8006570 <__lshift+0x38>
 8006558:	4638      	mov	r0, r7
 800655a:	f7ff fd97 	bl	800608c <_Balloc>
 800655e:	4605      	mov	r5, r0
 8006560:	b948      	cbnz	r0, 8006576 <__lshift+0x3e>
 8006562:	4602      	mov	r2, r0
 8006564:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006568:	4b27      	ldr	r3, [pc, #156]	@ (8006608 <__lshift+0xd0>)
 800656a:	4828      	ldr	r0, [pc, #160]	@ (800660c <__lshift+0xd4>)
 800656c:	f001 fb02 	bl	8007b74 <__assert_func>
 8006570:	3101      	adds	r1, #1
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	e7ee      	b.n	8006554 <__lshift+0x1c>
 8006576:	2300      	movs	r3, #0
 8006578:	f100 0114 	add.w	r1, r0, #20
 800657c:	f100 0210 	add.w	r2, r0, #16
 8006580:	4618      	mov	r0, r3
 8006582:	4553      	cmp	r3, sl
 8006584:	db33      	blt.n	80065ee <__lshift+0xb6>
 8006586:	6920      	ldr	r0, [r4, #16]
 8006588:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800658c:	f104 0314 	add.w	r3, r4, #20
 8006590:	f019 091f 	ands.w	r9, r9, #31
 8006594:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006598:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800659c:	d02b      	beq.n	80065f6 <__lshift+0xbe>
 800659e:	468a      	mov	sl, r1
 80065a0:	2200      	movs	r2, #0
 80065a2:	f1c9 0e20 	rsb	lr, r9, #32
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	fa00 f009 	lsl.w	r0, r0, r9
 80065ac:	4310      	orrs	r0, r2
 80065ae:	f84a 0b04 	str.w	r0, [sl], #4
 80065b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80065b6:	459c      	cmp	ip, r3
 80065b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80065bc:	d8f3      	bhi.n	80065a6 <__lshift+0x6e>
 80065be:	ebac 0304 	sub.w	r3, ip, r4
 80065c2:	3b15      	subs	r3, #21
 80065c4:	f023 0303 	bic.w	r3, r3, #3
 80065c8:	3304      	adds	r3, #4
 80065ca:	f104 0015 	add.w	r0, r4, #21
 80065ce:	4584      	cmp	ip, r0
 80065d0:	bf38      	it	cc
 80065d2:	2304      	movcc	r3, #4
 80065d4:	50ca      	str	r2, [r1, r3]
 80065d6:	b10a      	cbz	r2, 80065dc <__lshift+0xa4>
 80065d8:	f108 0602 	add.w	r6, r8, #2
 80065dc:	3e01      	subs	r6, #1
 80065de:	4638      	mov	r0, r7
 80065e0:	4621      	mov	r1, r4
 80065e2:	612e      	str	r6, [r5, #16]
 80065e4:	f7ff fd92 	bl	800610c <_Bfree>
 80065e8:	4628      	mov	r0, r5
 80065ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80065f2:	3301      	adds	r3, #1
 80065f4:	e7c5      	b.n	8006582 <__lshift+0x4a>
 80065f6:	3904      	subs	r1, #4
 80065f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80065fc:	459c      	cmp	ip, r3
 80065fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8006602:	d8f9      	bhi.n	80065f8 <__lshift+0xc0>
 8006604:	e7ea      	b.n	80065dc <__lshift+0xa4>
 8006606:	bf00      	nop
 8006608:	08008ad3 	.word	0x08008ad3
 800660c:	08008ae4 	.word	0x08008ae4

08006610 <__mcmp>:
 8006610:	4603      	mov	r3, r0
 8006612:	690a      	ldr	r2, [r1, #16]
 8006614:	6900      	ldr	r0, [r0, #16]
 8006616:	b530      	push	{r4, r5, lr}
 8006618:	1a80      	subs	r0, r0, r2
 800661a:	d10e      	bne.n	800663a <__mcmp+0x2a>
 800661c:	3314      	adds	r3, #20
 800661e:	3114      	adds	r1, #20
 8006620:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006624:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006628:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800662c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006630:	4295      	cmp	r5, r2
 8006632:	d003      	beq.n	800663c <__mcmp+0x2c>
 8006634:	d205      	bcs.n	8006642 <__mcmp+0x32>
 8006636:	f04f 30ff 	mov.w	r0, #4294967295
 800663a:	bd30      	pop	{r4, r5, pc}
 800663c:	42a3      	cmp	r3, r4
 800663e:	d3f3      	bcc.n	8006628 <__mcmp+0x18>
 8006640:	e7fb      	b.n	800663a <__mcmp+0x2a>
 8006642:	2001      	movs	r0, #1
 8006644:	e7f9      	b.n	800663a <__mcmp+0x2a>
	...

08006648 <__mdiff>:
 8006648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664c:	4689      	mov	r9, r1
 800664e:	4606      	mov	r6, r0
 8006650:	4611      	mov	r1, r2
 8006652:	4648      	mov	r0, r9
 8006654:	4614      	mov	r4, r2
 8006656:	f7ff ffdb 	bl	8006610 <__mcmp>
 800665a:	1e05      	subs	r5, r0, #0
 800665c:	d112      	bne.n	8006684 <__mdiff+0x3c>
 800665e:	4629      	mov	r1, r5
 8006660:	4630      	mov	r0, r6
 8006662:	f7ff fd13 	bl	800608c <_Balloc>
 8006666:	4602      	mov	r2, r0
 8006668:	b928      	cbnz	r0, 8006676 <__mdiff+0x2e>
 800666a:	f240 2137 	movw	r1, #567	@ 0x237
 800666e:	4b3e      	ldr	r3, [pc, #248]	@ (8006768 <__mdiff+0x120>)
 8006670:	483e      	ldr	r0, [pc, #248]	@ (800676c <__mdiff+0x124>)
 8006672:	f001 fa7f 	bl	8007b74 <__assert_func>
 8006676:	2301      	movs	r3, #1
 8006678:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800667c:	4610      	mov	r0, r2
 800667e:	b003      	add	sp, #12
 8006680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006684:	bfbc      	itt	lt
 8006686:	464b      	movlt	r3, r9
 8006688:	46a1      	movlt	r9, r4
 800668a:	4630      	mov	r0, r6
 800668c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006690:	bfba      	itte	lt
 8006692:	461c      	movlt	r4, r3
 8006694:	2501      	movlt	r5, #1
 8006696:	2500      	movge	r5, #0
 8006698:	f7ff fcf8 	bl	800608c <_Balloc>
 800669c:	4602      	mov	r2, r0
 800669e:	b918      	cbnz	r0, 80066a8 <__mdiff+0x60>
 80066a0:	f240 2145 	movw	r1, #581	@ 0x245
 80066a4:	4b30      	ldr	r3, [pc, #192]	@ (8006768 <__mdiff+0x120>)
 80066a6:	e7e3      	b.n	8006670 <__mdiff+0x28>
 80066a8:	f100 0b14 	add.w	fp, r0, #20
 80066ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80066b0:	f109 0310 	add.w	r3, r9, #16
 80066b4:	60c5      	str	r5, [r0, #12]
 80066b6:	f04f 0c00 	mov.w	ip, #0
 80066ba:	f109 0514 	add.w	r5, r9, #20
 80066be:	46d9      	mov	r9, fp
 80066c0:	6926      	ldr	r6, [r4, #16]
 80066c2:	f104 0e14 	add.w	lr, r4, #20
 80066c6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80066ca:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80066ce:	9301      	str	r3, [sp, #4]
 80066d0:	9b01      	ldr	r3, [sp, #4]
 80066d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80066d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80066da:	b281      	uxth	r1, r0
 80066dc:	9301      	str	r3, [sp, #4]
 80066de:	fa1f f38a 	uxth.w	r3, sl
 80066e2:	1a5b      	subs	r3, r3, r1
 80066e4:	0c00      	lsrs	r0, r0, #16
 80066e6:	4463      	add	r3, ip
 80066e8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80066ec:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80066f6:	4576      	cmp	r6, lr
 80066f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80066fc:	f849 3b04 	str.w	r3, [r9], #4
 8006700:	d8e6      	bhi.n	80066d0 <__mdiff+0x88>
 8006702:	1b33      	subs	r3, r6, r4
 8006704:	3b15      	subs	r3, #21
 8006706:	f023 0303 	bic.w	r3, r3, #3
 800670a:	3415      	adds	r4, #21
 800670c:	3304      	adds	r3, #4
 800670e:	42a6      	cmp	r6, r4
 8006710:	bf38      	it	cc
 8006712:	2304      	movcc	r3, #4
 8006714:	441d      	add	r5, r3
 8006716:	445b      	add	r3, fp
 8006718:	461e      	mov	r6, r3
 800671a:	462c      	mov	r4, r5
 800671c:	4544      	cmp	r4, r8
 800671e:	d30e      	bcc.n	800673e <__mdiff+0xf6>
 8006720:	f108 0103 	add.w	r1, r8, #3
 8006724:	1b49      	subs	r1, r1, r5
 8006726:	f021 0103 	bic.w	r1, r1, #3
 800672a:	3d03      	subs	r5, #3
 800672c:	45a8      	cmp	r8, r5
 800672e:	bf38      	it	cc
 8006730:	2100      	movcc	r1, #0
 8006732:	440b      	add	r3, r1
 8006734:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006738:	b199      	cbz	r1, 8006762 <__mdiff+0x11a>
 800673a:	6117      	str	r7, [r2, #16]
 800673c:	e79e      	b.n	800667c <__mdiff+0x34>
 800673e:	46e6      	mov	lr, ip
 8006740:	f854 1b04 	ldr.w	r1, [r4], #4
 8006744:	fa1f fc81 	uxth.w	ip, r1
 8006748:	44f4      	add	ip, lr
 800674a:	0c08      	lsrs	r0, r1, #16
 800674c:	4471      	add	r1, lr
 800674e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006752:	b289      	uxth	r1, r1
 8006754:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006758:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800675c:	f846 1b04 	str.w	r1, [r6], #4
 8006760:	e7dc      	b.n	800671c <__mdiff+0xd4>
 8006762:	3f01      	subs	r7, #1
 8006764:	e7e6      	b.n	8006734 <__mdiff+0xec>
 8006766:	bf00      	nop
 8006768:	08008ad3 	.word	0x08008ad3
 800676c:	08008ae4 	.word	0x08008ae4

08006770 <__ulp>:
 8006770:	4b0e      	ldr	r3, [pc, #56]	@ (80067ac <__ulp+0x3c>)
 8006772:	400b      	ands	r3, r1
 8006774:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006778:	2b00      	cmp	r3, #0
 800677a:	dc08      	bgt.n	800678e <__ulp+0x1e>
 800677c:	425b      	negs	r3, r3
 800677e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006782:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006786:	da04      	bge.n	8006792 <__ulp+0x22>
 8006788:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800678c:	4113      	asrs	r3, r2
 800678e:	2200      	movs	r2, #0
 8006790:	e008      	b.n	80067a4 <__ulp+0x34>
 8006792:	f1a2 0314 	sub.w	r3, r2, #20
 8006796:	2b1e      	cmp	r3, #30
 8006798:	bfd6      	itet	le
 800679a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800679e:	2201      	movgt	r2, #1
 80067a0:	40da      	lsrle	r2, r3
 80067a2:	2300      	movs	r3, #0
 80067a4:	4619      	mov	r1, r3
 80067a6:	4610      	mov	r0, r2
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	7ff00000 	.word	0x7ff00000

080067b0 <__b2d>:
 80067b0:	6902      	ldr	r2, [r0, #16]
 80067b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b4:	f100 0614 	add.w	r6, r0, #20
 80067b8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80067bc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80067c0:	4f1e      	ldr	r7, [pc, #120]	@ (800683c <__b2d+0x8c>)
 80067c2:	4620      	mov	r0, r4
 80067c4:	f7ff fd54 	bl	8006270 <__hi0bits>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f1c0 0020 	rsb	r0, r0, #32
 80067ce:	2b0a      	cmp	r3, #10
 80067d0:	f1a2 0504 	sub.w	r5, r2, #4
 80067d4:	6008      	str	r0, [r1, #0]
 80067d6:	dc12      	bgt.n	80067fe <__b2d+0x4e>
 80067d8:	42ae      	cmp	r6, r5
 80067da:	bf2c      	ite	cs
 80067dc:	2200      	movcs	r2, #0
 80067de:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80067e2:	f1c3 0c0b 	rsb	ip, r3, #11
 80067e6:	3315      	adds	r3, #21
 80067e8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80067ec:	fa04 f303 	lsl.w	r3, r4, r3
 80067f0:	fa22 f20c 	lsr.w	r2, r2, ip
 80067f4:	ea4e 0107 	orr.w	r1, lr, r7
 80067f8:	431a      	orrs	r2, r3
 80067fa:	4610      	mov	r0, r2
 80067fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067fe:	42ae      	cmp	r6, r5
 8006800:	bf36      	itet	cc
 8006802:	f1a2 0508 	subcc.w	r5, r2, #8
 8006806:	2200      	movcs	r2, #0
 8006808:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800680c:	3b0b      	subs	r3, #11
 800680e:	d012      	beq.n	8006836 <__b2d+0x86>
 8006810:	f1c3 0720 	rsb	r7, r3, #32
 8006814:	fa22 f107 	lsr.w	r1, r2, r7
 8006818:	409c      	lsls	r4, r3
 800681a:	430c      	orrs	r4, r1
 800681c:	42b5      	cmp	r5, r6
 800681e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006822:	bf94      	ite	ls
 8006824:	2400      	movls	r4, #0
 8006826:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800682a:	409a      	lsls	r2, r3
 800682c:	40fc      	lsrs	r4, r7
 800682e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006832:	4322      	orrs	r2, r4
 8006834:	e7e1      	b.n	80067fa <__b2d+0x4a>
 8006836:	ea44 0107 	orr.w	r1, r4, r7
 800683a:	e7de      	b.n	80067fa <__b2d+0x4a>
 800683c:	3ff00000 	.word	0x3ff00000

08006840 <__d2b>:
 8006840:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006844:	2101      	movs	r1, #1
 8006846:	4690      	mov	r8, r2
 8006848:	4699      	mov	r9, r3
 800684a:	9e08      	ldr	r6, [sp, #32]
 800684c:	f7ff fc1e 	bl	800608c <_Balloc>
 8006850:	4604      	mov	r4, r0
 8006852:	b930      	cbnz	r0, 8006862 <__d2b+0x22>
 8006854:	4602      	mov	r2, r0
 8006856:	f240 310f 	movw	r1, #783	@ 0x30f
 800685a:	4b23      	ldr	r3, [pc, #140]	@ (80068e8 <__d2b+0xa8>)
 800685c:	4823      	ldr	r0, [pc, #140]	@ (80068ec <__d2b+0xac>)
 800685e:	f001 f989 	bl	8007b74 <__assert_func>
 8006862:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006866:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800686a:	b10d      	cbz	r5, 8006870 <__d2b+0x30>
 800686c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	f1b8 0300 	subs.w	r3, r8, #0
 8006876:	d024      	beq.n	80068c2 <__d2b+0x82>
 8006878:	4668      	mov	r0, sp
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	f7ff fd17 	bl	80062ae <__lo0bits>
 8006880:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006884:	b1d8      	cbz	r0, 80068be <__d2b+0x7e>
 8006886:	f1c0 0320 	rsb	r3, r0, #32
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	430b      	orrs	r3, r1
 8006890:	40c2      	lsrs	r2, r0
 8006892:	6163      	str	r3, [r4, #20]
 8006894:	9201      	str	r2, [sp, #4]
 8006896:	9b01      	ldr	r3, [sp, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	bf0c      	ite	eq
 800689c:	2201      	moveq	r2, #1
 800689e:	2202      	movne	r2, #2
 80068a0:	61a3      	str	r3, [r4, #24]
 80068a2:	6122      	str	r2, [r4, #16]
 80068a4:	b1ad      	cbz	r5, 80068d2 <__d2b+0x92>
 80068a6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80068aa:	4405      	add	r5, r0
 80068ac:	6035      	str	r5, [r6, #0]
 80068ae:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80068b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b4:	6018      	str	r0, [r3, #0]
 80068b6:	4620      	mov	r0, r4
 80068b8:	b002      	add	sp, #8
 80068ba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80068be:	6161      	str	r1, [r4, #20]
 80068c0:	e7e9      	b.n	8006896 <__d2b+0x56>
 80068c2:	a801      	add	r0, sp, #4
 80068c4:	f7ff fcf3 	bl	80062ae <__lo0bits>
 80068c8:	9b01      	ldr	r3, [sp, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	6163      	str	r3, [r4, #20]
 80068ce:	3020      	adds	r0, #32
 80068d0:	e7e7      	b.n	80068a2 <__d2b+0x62>
 80068d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80068d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068da:	6030      	str	r0, [r6, #0]
 80068dc:	6918      	ldr	r0, [r3, #16]
 80068de:	f7ff fcc7 	bl	8006270 <__hi0bits>
 80068e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80068e6:	e7e4      	b.n	80068b2 <__d2b+0x72>
 80068e8:	08008ad3 	.word	0x08008ad3
 80068ec:	08008ae4 	.word	0x08008ae4

080068f0 <__ratio>:
 80068f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f4:	b085      	sub	sp, #20
 80068f6:	e9cd 1000 	strd	r1, r0, [sp]
 80068fa:	a902      	add	r1, sp, #8
 80068fc:	f7ff ff58 	bl	80067b0 <__b2d>
 8006900:	468b      	mov	fp, r1
 8006902:	4606      	mov	r6, r0
 8006904:	460f      	mov	r7, r1
 8006906:	9800      	ldr	r0, [sp, #0]
 8006908:	a903      	add	r1, sp, #12
 800690a:	f7ff ff51 	bl	80067b0 <__b2d>
 800690e:	460d      	mov	r5, r1
 8006910:	9b01      	ldr	r3, [sp, #4]
 8006912:	4689      	mov	r9, r1
 8006914:	6919      	ldr	r1, [r3, #16]
 8006916:	9b00      	ldr	r3, [sp, #0]
 8006918:	4604      	mov	r4, r0
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	4630      	mov	r0, r6
 800691e:	1ac9      	subs	r1, r1, r3
 8006920:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006924:	1a9b      	subs	r3, r3, r2
 8006926:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800692a:	2b00      	cmp	r3, #0
 800692c:	bfcd      	iteet	gt
 800692e:	463a      	movgt	r2, r7
 8006930:	462a      	movle	r2, r5
 8006932:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006936:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800693a:	bfd8      	it	le
 800693c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006940:	464b      	mov	r3, r9
 8006942:	4622      	mov	r2, r4
 8006944:	4659      	mov	r1, fp
 8006946:	f7f9 fef1 	bl	800072c <__aeabi_ddiv>
 800694a:	b005      	add	sp, #20
 800694c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006950 <__copybits>:
 8006950:	3901      	subs	r1, #1
 8006952:	b570      	push	{r4, r5, r6, lr}
 8006954:	1149      	asrs	r1, r1, #5
 8006956:	6914      	ldr	r4, [r2, #16]
 8006958:	3101      	adds	r1, #1
 800695a:	f102 0314 	add.w	r3, r2, #20
 800695e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006962:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006966:	1f05      	subs	r5, r0, #4
 8006968:	42a3      	cmp	r3, r4
 800696a:	d30c      	bcc.n	8006986 <__copybits+0x36>
 800696c:	1aa3      	subs	r3, r4, r2
 800696e:	3b11      	subs	r3, #17
 8006970:	f023 0303 	bic.w	r3, r3, #3
 8006974:	3211      	adds	r2, #17
 8006976:	42a2      	cmp	r2, r4
 8006978:	bf88      	it	hi
 800697a:	2300      	movhi	r3, #0
 800697c:	4418      	add	r0, r3
 800697e:	2300      	movs	r3, #0
 8006980:	4288      	cmp	r0, r1
 8006982:	d305      	bcc.n	8006990 <__copybits+0x40>
 8006984:	bd70      	pop	{r4, r5, r6, pc}
 8006986:	f853 6b04 	ldr.w	r6, [r3], #4
 800698a:	f845 6f04 	str.w	r6, [r5, #4]!
 800698e:	e7eb      	b.n	8006968 <__copybits+0x18>
 8006990:	f840 3b04 	str.w	r3, [r0], #4
 8006994:	e7f4      	b.n	8006980 <__copybits+0x30>

08006996 <__any_on>:
 8006996:	f100 0214 	add.w	r2, r0, #20
 800699a:	6900      	ldr	r0, [r0, #16]
 800699c:	114b      	asrs	r3, r1, #5
 800699e:	4298      	cmp	r0, r3
 80069a0:	b510      	push	{r4, lr}
 80069a2:	db11      	blt.n	80069c8 <__any_on+0x32>
 80069a4:	dd0a      	ble.n	80069bc <__any_on+0x26>
 80069a6:	f011 011f 	ands.w	r1, r1, #31
 80069aa:	d007      	beq.n	80069bc <__any_on+0x26>
 80069ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80069b0:	fa24 f001 	lsr.w	r0, r4, r1
 80069b4:	fa00 f101 	lsl.w	r1, r0, r1
 80069b8:	428c      	cmp	r4, r1
 80069ba:	d10b      	bne.n	80069d4 <__any_on+0x3e>
 80069bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d803      	bhi.n	80069cc <__any_on+0x36>
 80069c4:	2000      	movs	r0, #0
 80069c6:	bd10      	pop	{r4, pc}
 80069c8:	4603      	mov	r3, r0
 80069ca:	e7f7      	b.n	80069bc <__any_on+0x26>
 80069cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069d0:	2900      	cmp	r1, #0
 80069d2:	d0f5      	beq.n	80069c0 <__any_on+0x2a>
 80069d4:	2001      	movs	r0, #1
 80069d6:	e7f6      	b.n	80069c6 <__any_on+0x30>

080069d8 <sulp>:
 80069d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069dc:	460f      	mov	r7, r1
 80069de:	4690      	mov	r8, r2
 80069e0:	f7ff fec6 	bl	8006770 <__ulp>
 80069e4:	4604      	mov	r4, r0
 80069e6:	460d      	mov	r5, r1
 80069e8:	f1b8 0f00 	cmp.w	r8, #0
 80069ec:	d011      	beq.n	8006a12 <sulp+0x3a>
 80069ee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80069f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	dd0b      	ble.n	8006a12 <sulp+0x3a>
 80069fa:	2400      	movs	r4, #0
 80069fc:	051b      	lsls	r3, r3, #20
 80069fe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006a02:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006a06:	4622      	mov	r2, r4
 8006a08:	462b      	mov	r3, r5
 8006a0a:	f7f9 fd65 	bl	80004d8 <__aeabi_dmul>
 8006a0e:	4604      	mov	r4, r0
 8006a10:	460d      	mov	r5, r1
 8006a12:	4620      	mov	r0, r4
 8006a14:	4629      	mov	r1, r5
 8006a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a1a:	0000      	movs	r0, r0
 8006a1c:	0000      	movs	r0, r0
	...

08006a20 <_strtod_l>:
 8006a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a24:	b09f      	sub	sp, #124	@ 0x7c
 8006a26:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006a28:	2200      	movs	r2, #0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006a2e:	f04f 0a00 	mov.w	sl, #0
 8006a32:	f04f 0b00 	mov.w	fp, #0
 8006a36:	460a      	mov	r2, r1
 8006a38:	9005      	str	r0, [sp, #20]
 8006a3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a3c:	7811      	ldrb	r1, [r2, #0]
 8006a3e:	292b      	cmp	r1, #43	@ 0x2b
 8006a40:	d048      	beq.n	8006ad4 <_strtod_l+0xb4>
 8006a42:	d836      	bhi.n	8006ab2 <_strtod_l+0x92>
 8006a44:	290d      	cmp	r1, #13
 8006a46:	d830      	bhi.n	8006aaa <_strtod_l+0x8a>
 8006a48:	2908      	cmp	r1, #8
 8006a4a:	d830      	bhi.n	8006aae <_strtod_l+0x8e>
 8006a4c:	2900      	cmp	r1, #0
 8006a4e:	d039      	beq.n	8006ac4 <_strtod_l+0xa4>
 8006a50:	2200      	movs	r2, #0
 8006a52:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006a54:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006a56:	782a      	ldrb	r2, [r5, #0]
 8006a58:	2a30      	cmp	r2, #48	@ 0x30
 8006a5a:	f040 80b1 	bne.w	8006bc0 <_strtod_l+0x1a0>
 8006a5e:	786a      	ldrb	r2, [r5, #1]
 8006a60:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006a64:	2a58      	cmp	r2, #88	@ 0x58
 8006a66:	d16c      	bne.n	8006b42 <_strtod_l+0x122>
 8006a68:	9302      	str	r3, [sp, #8]
 8006a6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a6c:	4a8e      	ldr	r2, [pc, #568]	@ (8006ca8 <_strtod_l+0x288>)
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	ab1a      	add	r3, sp, #104	@ 0x68
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	9805      	ldr	r0, [sp, #20]
 8006a76:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006a78:	a919      	add	r1, sp, #100	@ 0x64
 8006a7a:	f001 f915 	bl	8007ca8 <__gethex>
 8006a7e:	f010 060f 	ands.w	r6, r0, #15
 8006a82:	4604      	mov	r4, r0
 8006a84:	d005      	beq.n	8006a92 <_strtod_l+0x72>
 8006a86:	2e06      	cmp	r6, #6
 8006a88:	d126      	bne.n	8006ad8 <_strtod_l+0xb8>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	3501      	adds	r5, #1
 8006a8e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006a90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f040 8584 	bne.w	80075a2 <_strtod_l+0xb82>
 8006a9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a9c:	b1bb      	cbz	r3, 8006ace <_strtod_l+0xae>
 8006a9e:	4650      	mov	r0, sl
 8006aa0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006aa4:	b01f      	add	sp, #124	@ 0x7c
 8006aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aaa:	2920      	cmp	r1, #32
 8006aac:	d1d0      	bne.n	8006a50 <_strtod_l+0x30>
 8006aae:	3201      	adds	r2, #1
 8006ab0:	e7c3      	b.n	8006a3a <_strtod_l+0x1a>
 8006ab2:	292d      	cmp	r1, #45	@ 0x2d
 8006ab4:	d1cc      	bne.n	8006a50 <_strtod_l+0x30>
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006aba:	1c51      	adds	r1, r2, #1
 8006abc:	9119      	str	r1, [sp, #100]	@ 0x64
 8006abe:	7852      	ldrb	r2, [r2, #1]
 8006ac0:	2a00      	cmp	r2, #0
 8006ac2:	d1c7      	bne.n	8006a54 <_strtod_l+0x34>
 8006ac4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006ac6:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f040 8568 	bne.w	800759e <_strtod_l+0xb7e>
 8006ace:	4650      	mov	r0, sl
 8006ad0:	4659      	mov	r1, fp
 8006ad2:	e7e7      	b.n	8006aa4 <_strtod_l+0x84>
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	e7ef      	b.n	8006ab8 <_strtod_l+0x98>
 8006ad8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006ada:	b13a      	cbz	r2, 8006aec <_strtod_l+0xcc>
 8006adc:	2135      	movs	r1, #53	@ 0x35
 8006ade:	a81c      	add	r0, sp, #112	@ 0x70
 8006ae0:	f7ff ff36 	bl	8006950 <__copybits>
 8006ae4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ae6:	9805      	ldr	r0, [sp, #20]
 8006ae8:	f7ff fb10 	bl	800610c <_Bfree>
 8006aec:	3e01      	subs	r6, #1
 8006aee:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006af0:	2e04      	cmp	r6, #4
 8006af2:	d806      	bhi.n	8006b02 <_strtod_l+0xe2>
 8006af4:	e8df f006 	tbb	[pc, r6]
 8006af8:	201d0314 	.word	0x201d0314
 8006afc:	14          	.byte	0x14
 8006afd:	00          	.byte	0x00
 8006afe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006b02:	05e1      	lsls	r1, r4, #23
 8006b04:	bf48      	it	mi
 8006b06:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006b0a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006b0e:	0d1b      	lsrs	r3, r3, #20
 8006b10:	051b      	lsls	r3, r3, #20
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1bd      	bne.n	8006a92 <_strtod_l+0x72>
 8006b16:	f7fe fb2b 	bl	8005170 <__errno>
 8006b1a:	2322      	movs	r3, #34	@ 0x22
 8006b1c:	6003      	str	r3, [r0, #0]
 8006b1e:	e7b8      	b.n	8006a92 <_strtod_l+0x72>
 8006b20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006b24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006b28:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006b2c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006b30:	e7e7      	b.n	8006b02 <_strtod_l+0xe2>
 8006b32:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006cac <_strtod_l+0x28c>
 8006b36:	e7e4      	b.n	8006b02 <_strtod_l+0xe2>
 8006b38:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006b3c:	f04f 3aff 	mov.w	sl, #4294967295
 8006b40:	e7df      	b.n	8006b02 <_strtod_l+0xe2>
 8006b42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b30      	cmp	r3, #48	@ 0x30
 8006b4c:	d0f9      	beq.n	8006b42 <_strtod_l+0x122>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d09f      	beq.n	8006a92 <_strtod_l+0x72>
 8006b52:	2301      	movs	r3, #1
 8006b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b58:	220a      	movs	r2, #10
 8006b5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	461f      	mov	r7, r3
 8006b60:	9308      	str	r3, [sp, #32]
 8006b62:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b64:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006b66:	7805      	ldrb	r5, [r0, #0]
 8006b68:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006b6c:	b2d9      	uxtb	r1, r3
 8006b6e:	2909      	cmp	r1, #9
 8006b70:	d928      	bls.n	8006bc4 <_strtod_l+0x1a4>
 8006b72:	2201      	movs	r2, #1
 8006b74:	494e      	ldr	r1, [pc, #312]	@ (8006cb0 <_strtod_l+0x290>)
 8006b76:	f000 ffc7 	bl	8007b08 <strncmp>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	d032      	beq.n	8006be4 <_strtod_l+0x1c4>
 8006b7e:	2000      	movs	r0, #0
 8006b80:	462a      	mov	r2, r5
 8006b82:	4681      	mov	r9, r0
 8006b84:	463d      	mov	r5, r7
 8006b86:	4603      	mov	r3, r0
 8006b88:	2a65      	cmp	r2, #101	@ 0x65
 8006b8a:	d001      	beq.n	8006b90 <_strtod_l+0x170>
 8006b8c:	2a45      	cmp	r2, #69	@ 0x45
 8006b8e:	d114      	bne.n	8006bba <_strtod_l+0x19a>
 8006b90:	b91d      	cbnz	r5, 8006b9a <_strtod_l+0x17a>
 8006b92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b94:	4302      	orrs	r2, r0
 8006b96:	d095      	beq.n	8006ac4 <_strtod_l+0xa4>
 8006b98:	2500      	movs	r5, #0
 8006b9a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006b9c:	1c62      	adds	r2, r4, #1
 8006b9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ba0:	7862      	ldrb	r2, [r4, #1]
 8006ba2:	2a2b      	cmp	r2, #43	@ 0x2b
 8006ba4:	d077      	beq.n	8006c96 <_strtod_l+0x276>
 8006ba6:	2a2d      	cmp	r2, #45	@ 0x2d
 8006ba8:	d07b      	beq.n	8006ca2 <_strtod_l+0x282>
 8006baa:	f04f 0c00 	mov.w	ip, #0
 8006bae:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006bb2:	2909      	cmp	r1, #9
 8006bb4:	f240 8082 	bls.w	8006cbc <_strtod_l+0x29c>
 8006bb8:	9419      	str	r4, [sp, #100]	@ 0x64
 8006bba:	f04f 0800 	mov.w	r8, #0
 8006bbe:	e0a2      	b.n	8006d06 <_strtod_l+0x2e6>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e7c7      	b.n	8006b54 <_strtod_l+0x134>
 8006bc4:	2f08      	cmp	r7, #8
 8006bc6:	bfd5      	itete	le
 8006bc8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006bca:	9908      	ldrgt	r1, [sp, #32]
 8006bcc:	fb02 3301 	mlale	r3, r2, r1, r3
 8006bd0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006bd4:	f100 0001 	add.w	r0, r0, #1
 8006bd8:	bfd4      	ite	le
 8006bda:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006bdc:	9308      	strgt	r3, [sp, #32]
 8006bde:	3701      	adds	r7, #1
 8006be0:	9019      	str	r0, [sp, #100]	@ 0x64
 8006be2:	e7bf      	b.n	8006b64 <_strtod_l+0x144>
 8006be4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	9219      	str	r2, [sp, #100]	@ 0x64
 8006bea:	785a      	ldrb	r2, [r3, #1]
 8006bec:	b37f      	cbz	r7, 8006c4e <_strtod_l+0x22e>
 8006bee:	4681      	mov	r9, r0
 8006bf0:	463d      	mov	r5, r7
 8006bf2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006bf6:	2b09      	cmp	r3, #9
 8006bf8:	d912      	bls.n	8006c20 <_strtod_l+0x200>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e7c4      	b.n	8006b88 <_strtod_l+0x168>
 8006bfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c00:	3001      	adds	r0, #1
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c06:	785a      	ldrb	r2, [r3, #1]
 8006c08:	2a30      	cmp	r2, #48	@ 0x30
 8006c0a:	d0f8      	beq.n	8006bfe <_strtod_l+0x1de>
 8006c0c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	f200 84cb 	bhi.w	80075ac <_strtod_l+0xb8c>
 8006c16:	4681      	mov	r9, r0
 8006c18:	2000      	movs	r0, #0
 8006c1a:	4605      	mov	r5, r0
 8006c1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c20:	3a30      	subs	r2, #48	@ 0x30
 8006c22:	f100 0301 	add.w	r3, r0, #1
 8006c26:	d02a      	beq.n	8006c7e <_strtod_l+0x25e>
 8006c28:	4499      	add	r9, r3
 8006c2a:	210a      	movs	r1, #10
 8006c2c:	462b      	mov	r3, r5
 8006c2e:	eb00 0c05 	add.w	ip, r0, r5
 8006c32:	4563      	cmp	r3, ip
 8006c34:	d10d      	bne.n	8006c52 <_strtod_l+0x232>
 8006c36:	1c69      	adds	r1, r5, #1
 8006c38:	4401      	add	r1, r0
 8006c3a:	4428      	add	r0, r5
 8006c3c:	2808      	cmp	r0, #8
 8006c3e:	dc16      	bgt.n	8006c6e <_strtod_l+0x24e>
 8006c40:	230a      	movs	r3, #10
 8006c42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006c44:	fb03 2300 	mla	r3, r3, r0, r2
 8006c48:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e018      	b.n	8006c80 <_strtod_l+0x260>
 8006c4e:	4638      	mov	r0, r7
 8006c50:	e7da      	b.n	8006c08 <_strtod_l+0x1e8>
 8006c52:	2b08      	cmp	r3, #8
 8006c54:	f103 0301 	add.w	r3, r3, #1
 8006c58:	dc03      	bgt.n	8006c62 <_strtod_l+0x242>
 8006c5a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006c5c:	434e      	muls	r6, r1
 8006c5e:	960a      	str	r6, [sp, #40]	@ 0x28
 8006c60:	e7e7      	b.n	8006c32 <_strtod_l+0x212>
 8006c62:	2b10      	cmp	r3, #16
 8006c64:	bfde      	ittt	le
 8006c66:	9e08      	ldrle	r6, [sp, #32]
 8006c68:	434e      	mulle	r6, r1
 8006c6a:	9608      	strle	r6, [sp, #32]
 8006c6c:	e7e1      	b.n	8006c32 <_strtod_l+0x212>
 8006c6e:	280f      	cmp	r0, #15
 8006c70:	dceb      	bgt.n	8006c4a <_strtod_l+0x22a>
 8006c72:	230a      	movs	r3, #10
 8006c74:	9808      	ldr	r0, [sp, #32]
 8006c76:	fb03 2300 	mla	r3, r3, r0, r2
 8006c7a:	9308      	str	r3, [sp, #32]
 8006c7c:	e7e5      	b.n	8006c4a <_strtod_l+0x22a>
 8006c7e:	4629      	mov	r1, r5
 8006c80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006c82:	460d      	mov	r5, r1
 8006c84:	1c50      	adds	r0, r2, #1
 8006c86:	9019      	str	r0, [sp, #100]	@ 0x64
 8006c88:	7852      	ldrb	r2, [r2, #1]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	e7b1      	b.n	8006bf2 <_strtod_l+0x1d2>
 8006c8e:	f04f 0900 	mov.w	r9, #0
 8006c92:	2301      	movs	r3, #1
 8006c94:	e77d      	b.n	8006b92 <_strtod_l+0x172>
 8006c96:	f04f 0c00 	mov.w	ip, #0
 8006c9a:	1ca2      	adds	r2, r4, #2
 8006c9c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c9e:	78a2      	ldrb	r2, [r4, #2]
 8006ca0:	e785      	b.n	8006bae <_strtod_l+0x18e>
 8006ca2:	f04f 0c01 	mov.w	ip, #1
 8006ca6:	e7f8      	b.n	8006c9a <_strtod_l+0x27a>
 8006ca8:	08008c58 	.word	0x08008c58
 8006cac:	7ff00000 	.word	0x7ff00000
 8006cb0:	08008c40 	.word	0x08008c40
 8006cb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006cb6:	1c51      	adds	r1, r2, #1
 8006cb8:	9119      	str	r1, [sp, #100]	@ 0x64
 8006cba:	7852      	ldrb	r2, [r2, #1]
 8006cbc:	2a30      	cmp	r2, #48	@ 0x30
 8006cbe:	d0f9      	beq.n	8006cb4 <_strtod_l+0x294>
 8006cc0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006cc4:	2908      	cmp	r1, #8
 8006cc6:	f63f af78 	bhi.w	8006bba <_strtod_l+0x19a>
 8006cca:	f04f 080a 	mov.w	r8, #10
 8006cce:	3a30      	subs	r2, #48	@ 0x30
 8006cd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006cd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006cd4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006cd6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006cd8:	1c56      	adds	r6, r2, #1
 8006cda:	9619      	str	r6, [sp, #100]	@ 0x64
 8006cdc:	7852      	ldrb	r2, [r2, #1]
 8006cde:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006ce2:	f1be 0f09 	cmp.w	lr, #9
 8006ce6:	d939      	bls.n	8006d5c <_strtod_l+0x33c>
 8006ce8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006cea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006cee:	1a76      	subs	r6, r6, r1
 8006cf0:	2e08      	cmp	r6, #8
 8006cf2:	dc03      	bgt.n	8006cfc <_strtod_l+0x2dc>
 8006cf4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006cf6:	4588      	cmp	r8, r1
 8006cf8:	bfa8      	it	ge
 8006cfa:	4688      	movge	r8, r1
 8006cfc:	f1bc 0f00 	cmp.w	ip, #0
 8006d00:	d001      	beq.n	8006d06 <_strtod_l+0x2e6>
 8006d02:	f1c8 0800 	rsb	r8, r8, #0
 8006d06:	2d00      	cmp	r5, #0
 8006d08:	d14e      	bne.n	8006da8 <_strtod_l+0x388>
 8006d0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d0c:	4308      	orrs	r0, r1
 8006d0e:	f47f aec0 	bne.w	8006a92 <_strtod_l+0x72>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f47f aed6 	bne.w	8006ac4 <_strtod_l+0xa4>
 8006d18:	2a69      	cmp	r2, #105	@ 0x69
 8006d1a:	d028      	beq.n	8006d6e <_strtod_l+0x34e>
 8006d1c:	dc25      	bgt.n	8006d6a <_strtod_l+0x34a>
 8006d1e:	2a49      	cmp	r2, #73	@ 0x49
 8006d20:	d025      	beq.n	8006d6e <_strtod_l+0x34e>
 8006d22:	2a4e      	cmp	r2, #78	@ 0x4e
 8006d24:	f47f aece 	bne.w	8006ac4 <_strtod_l+0xa4>
 8006d28:	499a      	ldr	r1, [pc, #616]	@ (8006f94 <_strtod_l+0x574>)
 8006d2a:	a819      	add	r0, sp, #100	@ 0x64
 8006d2c:	f001 f9de 	bl	80080ec <__match>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f43f aec7 	beq.w	8006ac4 <_strtod_l+0xa4>
 8006d36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	2b28      	cmp	r3, #40	@ 0x28
 8006d3c:	d12e      	bne.n	8006d9c <_strtod_l+0x37c>
 8006d3e:	4996      	ldr	r1, [pc, #600]	@ (8006f98 <_strtod_l+0x578>)
 8006d40:	aa1c      	add	r2, sp, #112	@ 0x70
 8006d42:	a819      	add	r0, sp, #100	@ 0x64
 8006d44:	f001 f9e6 	bl	8008114 <__hexnan>
 8006d48:	2805      	cmp	r0, #5
 8006d4a:	d127      	bne.n	8006d9c <_strtod_l+0x37c>
 8006d4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006d4e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006d52:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006d56:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006d5a:	e69a      	b.n	8006a92 <_strtod_l+0x72>
 8006d5c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006d5e:	fb08 2101 	mla	r1, r8, r1, r2
 8006d62:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006d66:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d68:	e7b5      	b.n	8006cd6 <_strtod_l+0x2b6>
 8006d6a:	2a6e      	cmp	r2, #110	@ 0x6e
 8006d6c:	e7da      	b.n	8006d24 <_strtod_l+0x304>
 8006d6e:	498b      	ldr	r1, [pc, #556]	@ (8006f9c <_strtod_l+0x57c>)
 8006d70:	a819      	add	r0, sp, #100	@ 0x64
 8006d72:	f001 f9bb 	bl	80080ec <__match>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	f43f aea4 	beq.w	8006ac4 <_strtod_l+0xa4>
 8006d7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d7e:	4988      	ldr	r1, [pc, #544]	@ (8006fa0 <_strtod_l+0x580>)
 8006d80:	3b01      	subs	r3, #1
 8006d82:	a819      	add	r0, sp, #100	@ 0x64
 8006d84:	9319      	str	r3, [sp, #100]	@ 0x64
 8006d86:	f001 f9b1 	bl	80080ec <__match>
 8006d8a:	b910      	cbnz	r0, 8006d92 <_strtod_l+0x372>
 8006d8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d8e:	3301      	adds	r3, #1
 8006d90:	9319      	str	r3, [sp, #100]	@ 0x64
 8006d92:	f04f 0a00 	mov.w	sl, #0
 8006d96:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006fa4 <_strtod_l+0x584>
 8006d9a:	e67a      	b.n	8006a92 <_strtod_l+0x72>
 8006d9c:	4882      	ldr	r0, [pc, #520]	@ (8006fa8 <_strtod_l+0x588>)
 8006d9e:	f000 fee3 	bl	8007b68 <nan>
 8006da2:	4682      	mov	sl, r0
 8006da4:	468b      	mov	fp, r1
 8006da6:	e674      	b.n	8006a92 <_strtod_l+0x72>
 8006da8:	eba8 0309 	sub.w	r3, r8, r9
 8006dac:	2f00      	cmp	r7, #0
 8006dae:	bf08      	it	eq
 8006db0:	462f      	moveq	r7, r5
 8006db2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006db4:	2d10      	cmp	r5, #16
 8006db6:	462c      	mov	r4, r5
 8006db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dba:	bfa8      	it	ge
 8006dbc:	2410      	movge	r4, #16
 8006dbe:	f7f9 fb11 	bl	80003e4 <__aeabi_ui2d>
 8006dc2:	2d09      	cmp	r5, #9
 8006dc4:	4682      	mov	sl, r0
 8006dc6:	468b      	mov	fp, r1
 8006dc8:	dc11      	bgt.n	8006dee <_strtod_l+0x3ce>
 8006dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f43f ae60 	beq.w	8006a92 <_strtod_l+0x72>
 8006dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd4:	dd76      	ble.n	8006ec4 <_strtod_l+0x4a4>
 8006dd6:	2b16      	cmp	r3, #22
 8006dd8:	dc5d      	bgt.n	8006e96 <_strtod_l+0x476>
 8006dda:	4974      	ldr	r1, [pc, #464]	@ (8006fac <_strtod_l+0x58c>)
 8006ddc:	4652      	mov	r2, sl
 8006dde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006de2:	465b      	mov	r3, fp
 8006de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006de8:	f7f9 fb76 	bl	80004d8 <__aeabi_dmul>
 8006dec:	e7d9      	b.n	8006da2 <_strtod_l+0x382>
 8006dee:	4b6f      	ldr	r3, [pc, #444]	@ (8006fac <_strtod_l+0x58c>)
 8006df0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006df4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006df8:	f7f9 fb6e 	bl	80004d8 <__aeabi_dmul>
 8006dfc:	4682      	mov	sl, r0
 8006dfe:	9808      	ldr	r0, [sp, #32]
 8006e00:	468b      	mov	fp, r1
 8006e02:	f7f9 faef 	bl	80003e4 <__aeabi_ui2d>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4650      	mov	r0, sl
 8006e0c:	4659      	mov	r1, fp
 8006e0e:	f7f9 f9ad 	bl	800016c <__adddf3>
 8006e12:	2d0f      	cmp	r5, #15
 8006e14:	4682      	mov	sl, r0
 8006e16:	468b      	mov	fp, r1
 8006e18:	ddd7      	ble.n	8006dca <_strtod_l+0x3aa>
 8006e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e1c:	1b2c      	subs	r4, r5, r4
 8006e1e:	441c      	add	r4, r3
 8006e20:	2c00      	cmp	r4, #0
 8006e22:	f340 8096 	ble.w	8006f52 <_strtod_l+0x532>
 8006e26:	f014 030f 	ands.w	r3, r4, #15
 8006e2a:	d00a      	beq.n	8006e42 <_strtod_l+0x422>
 8006e2c:	495f      	ldr	r1, [pc, #380]	@ (8006fac <_strtod_l+0x58c>)
 8006e2e:	4652      	mov	r2, sl
 8006e30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e38:	465b      	mov	r3, fp
 8006e3a:	f7f9 fb4d 	bl	80004d8 <__aeabi_dmul>
 8006e3e:	4682      	mov	sl, r0
 8006e40:	468b      	mov	fp, r1
 8006e42:	f034 040f 	bics.w	r4, r4, #15
 8006e46:	d073      	beq.n	8006f30 <_strtod_l+0x510>
 8006e48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006e4c:	dd48      	ble.n	8006ee0 <_strtod_l+0x4c0>
 8006e4e:	2400      	movs	r4, #0
 8006e50:	46a0      	mov	r8, r4
 8006e52:	46a1      	mov	r9, r4
 8006e54:	940a      	str	r4, [sp, #40]	@ 0x28
 8006e56:	2322      	movs	r3, #34	@ 0x22
 8006e58:	f04f 0a00 	mov.w	sl, #0
 8006e5c:	9a05      	ldr	r2, [sp, #20]
 8006e5e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006fa4 <_strtod_l+0x584>
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f43f ae13 	beq.w	8006a92 <_strtod_l+0x72>
 8006e6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e6e:	9805      	ldr	r0, [sp, #20]
 8006e70:	f7ff f94c 	bl	800610c <_Bfree>
 8006e74:	4649      	mov	r1, r9
 8006e76:	9805      	ldr	r0, [sp, #20]
 8006e78:	f7ff f948 	bl	800610c <_Bfree>
 8006e7c:	4641      	mov	r1, r8
 8006e7e:	9805      	ldr	r0, [sp, #20]
 8006e80:	f7ff f944 	bl	800610c <_Bfree>
 8006e84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e86:	9805      	ldr	r0, [sp, #20]
 8006e88:	f7ff f940 	bl	800610c <_Bfree>
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	9805      	ldr	r0, [sp, #20]
 8006e90:	f7ff f93c 	bl	800610c <_Bfree>
 8006e94:	e5fd      	b.n	8006a92 <_strtod_l+0x72>
 8006e96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	dbbc      	blt.n	8006e1a <_strtod_l+0x3fa>
 8006ea0:	4c42      	ldr	r4, [pc, #264]	@ (8006fac <_strtod_l+0x58c>)
 8006ea2:	f1c5 050f 	rsb	r5, r5, #15
 8006ea6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006eaa:	4652      	mov	r2, sl
 8006eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eb0:	465b      	mov	r3, fp
 8006eb2:	f7f9 fb11 	bl	80004d8 <__aeabi_dmul>
 8006eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb8:	1b5d      	subs	r5, r3, r5
 8006eba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006ebe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006ec2:	e791      	b.n	8006de8 <_strtod_l+0x3c8>
 8006ec4:	3316      	adds	r3, #22
 8006ec6:	dba8      	blt.n	8006e1a <_strtod_l+0x3fa>
 8006ec8:	4b38      	ldr	r3, [pc, #224]	@ (8006fac <_strtod_l+0x58c>)
 8006eca:	eba9 0808 	sub.w	r8, r9, r8
 8006ece:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006ed2:	4650      	mov	r0, sl
 8006ed4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006ed8:	4659      	mov	r1, fp
 8006eda:	f7f9 fc27 	bl	800072c <__aeabi_ddiv>
 8006ede:	e760      	b.n	8006da2 <_strtod_l+0x382>
 8006ee0:	4b33      	ldr	r3, [pc, #204]	@ (8006fb0 <_strtod_l+0x590>)
 8006ee2:	4650      	mov	r0, sl
 8006ee4:	9308      	str	r3, [sp, #32]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	4659      	mov	r1, fp
 8006eea:	461e      	mov	r6, r3
 8006eec:	1124      	asrs	r4, r4, #4
 8006eee:	2c01      	cmp	r4, #1
 8006ef0:	dc21      	bgt.n	8006f36 <_strtod_l+0x516>
 8006ef2:	b10b      	cbz	r3, 8006ef8 <_strtod_l+0x4d8>
 8006ef4:	4682      	mov	sl, r0
 8006ef6:	468b      	mov	fp, r1
 8006ef8:	492d      	ldr	r1, [pc, #180]	@ (8006fb0 <_strtod_l+0x590>)
 8006efa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006efe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006f02:	4652      	mov	r2, sl
 8006f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f08:	465b      	mov	r3, fp
 8006f0a:	f7f9 fae5 	bl	80004d8 <__aeabi_dmul>
 8006f0e:	4b25      	ldr	r3, [pc, #148]	@ (8006fa4 <_strtod_l+0x584>)
 8006f10:	460a      	mov	r2, r1
 8006f12:	400b      	ands	r3, r1
 8006f14:	4927      	ldr	r1, [pc, #156]	@ (8006fb4 <_strtod_l+0x594>)
 8006f16:	4682      	mov	sl, r0
 8006f18:	428b      	cmp	r3, r1
 8006f1a:	d898      	bhi.n	8006e4e <_strtod_l+0x42e>
 8006f1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006f20:	428b      	cmp	r3, r1
 8006f22:	bf86      	itte	hi
 8006f24:	f04f 3aff 	movhi.w	sl, #4294967295
 8006f28:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006fb8 <_strtod_l+0x598>
 8006f2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006f30:	2300      	movs	r3, #0
 8006f32:	9308      	str	r3, [sp, #32]
 8006f34:	e07a      	b.n	800702c <_strtod_l+0x60c>
 8006f36:	07e2      	lsls	r2, r4, #31
 8006f38:	d505      	bpl.n	8006f46 <_strtod_l+0x526>
 8006f3a:	9b08      	ldr	r3, [sp, #32]
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	f7f9 faca 	bl	80004d8 <__aeabi_dmul>
 8006f44:	2301      	movs	r3, #1
 8006f46:	9a08      	ldr	r2, [sp, #32]
 8006f48:	3601      	adds	r6, #1
 8006f4a:	3208      	adds	r2, #8
 8006f4c:	1064      	asrs	r4, r4, #1
 8006f4e:	9208      	str	r2, [sp, #32]
 8006f50:	e7cd      	b.n	8006eee <_strtod_l+0x4ce>
 8006f52:	d0ed      	beq.n	8006f30 <_strtod_l+0x510>
 8006f54:	4264      	negs	r4, r4
 8006f56:	f014 020f 	ands.w	r2, r4, #15
 8006f5a:	d00a      	beq.n	8006f72 <_strtod_l+0x552>
 8006f5c:	4b13      	ldr	r3, [pc, #76]	@ (8006fac <_strtod_l+0x58c>)
 8006f5e:	4650      	mov	r0, sl
 8006f60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f64:	4659      	mov	r1, fp
 8006f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6a:	f7f9 fbdf 	bl	800072c <__aeabi_ddiv>
 8006f6e:	4682      	mov	sl, r0
 8006f70:	468b      	mov	fp, r1
 8006f72:	1124      	asrs	r4, r4, #4
 8006f74:	d0dc      	beq.n	8006f30 <_strtod_l+0x510>
 8006f76:	2c1f      	cmp	r4, #31
 8006f78:	dd20      	ble.n	8006fbc <_strtod_l+0x59c>
 8006f7a:	2400      	movs	r4, #0
 8006f7c:	46a0      	mov	r8, r4
 8006f7e:	46a1      	mov	r9, r4
 8006f80:	940a      	str	r4, [sp, #40]	@ 0x28
 8006f82:	2322      	movs	r3, #34	@ 0x22
 8006f84:	9a05      	ldr	r2, [sp, #20]
 8006f86:	f04f 0a00 	mov.w	sl, #0
 8006f8a:	f04f 0b00 	mov.w	fp, #0
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	e768      	b.n	8006e64 <_strtod_l+0x444>
 8006f92:	bf00      	nop
 8006f94:	08008a2b 	.word	0x08008a2b
 8006f98:	08008c44 	.word	0x08008c44
 8006f9c:	08008a23 	.word	0x08008a23
 8006fa0:	08008a5a 	.word	0x08008a5a
 8006fa4:	7ff00000 	.word	0x7ff00000
 8006fa8:	08008ded 	.word	0x08008ded
 8006fac:	08008b78 	.word	0x08008b78
 8006fb0:	08008b50 	.word	0x08008b50
 8006fb4:	7ca00000 	.word	0x7ca00000
 8006fb8:	7fefffff 	.word	0x7fefffff
 8006fbc:	f014 0310 	ands.w	r3, r4, #16
 8006fc0:	bf18      	it	ne
 8006fc2:	236a      	movne	r3, #106	@ 0x6a
 8006fc4:	4650      	mov	r0, sl
 8006fc6:	9308      	str	r3, [sp, #32]
 8006fc8:	4659      	mov	r1, fp
 8006fca:	2300      	movs	r3, #0
 8006fcc:	4ea9      	ldr	r6, [pc, #676]	@ (8007274 <_strtod_l+0x854>)
 8006fce:	07e2      	lsls	r2, r4, #31
 8006fd0:	d504      	bpl.n	8006fdc <_strtod_l+0x5bc>
 8006fd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006fd6:	f7f9 fa7f 	bl	80004d8 <__aeabi_dmul>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	1064      	asrs	r4, r4, #1
 8006fde:	f106 0608 	add.w	r6, r6, #8
 8006fe2:	d1f4      	bne.n	8006fce <_strtod_l+0x5ae>
 8006fe4:	b10b      	cbz	r3, 8006fea <_strtod_l+0x5ca>
 8006fe6:	4682      	mov	sl, r0
 8006fe8:	468b      	mov	fp, r1
 8006fea:	9b08      	ldr	r3, [sp, #32]
 8006fec:	b1b3      	cbz	r3, 800701c <_strtod_l+0x5fc>
 8006fee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006ff2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	4659      	mov	r1, fp
 8006ffa:	dd0f      	ble.n	800701c <_strtod_l+0x5fc>
 8006ffc:	2b1f      	cmp	r3, #31
 8006ffe:	dd57      	ble.n	80070b0 <_strtod_l+0x690>
 8007000:	2b34      	cmp	r3, #52	@ 0x34
 8007002:	bfd8      	it	le
 8007004:	f04f 33ff 	movle.w	r3, #4294967295
 8007008:	f04f 0a00 	mov.w	sl, #0
 800700c:	bfcf      	iteee	gt
 800700e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007012:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007016:	4093      	lslle	r3, r2
 8007018:	ea03 0b01 	andle.w	fp, r3, r1
 800701c:	2200      	movs	r2, #0
 800701e:	2300      	movs	r3, #0
 8007020:	4650      	mov	r0, sl
 8007022:	4659      	mov	r1, fp
 8007024:	f7f9 fcc0 	bl	80009a8 <__aeabi_dcmpeq>
 8007028:	2800      	cmp	r0, #0
 800702a:	d1a6      	bne.n	8006f7a <_strtod_l+0x55a>
 800702c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800702e:	463a      	mov	r2, r7
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007034:	462b      	mov	r3, r5
 8007036:	9805      	ldr	r0, [sp, #20]
 8007038:	f7ff f8d0 	bl	80061dc <__s2b>
 800703c:	900a      	str	r0, [sp, #40]	@ 0x28
 800703e:	2800      	cmp	r0, #0
 8007040:	f43f af05 	beq.w	8006e4e <_strtod_l+0x42e>
 8007044:	2400      	movs	r4, #0
 8007046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007048:	eba9 0308 	sub.w	r3, r9, r8
 800704c:	2a00      	cmp	r2, #0
 800704e:	bfa8      	it	ge
 8007050:	2300      	movge	r3, #0
 8007052:	46a0      	mov	r8, r4
 8007054:	9312      	str	r3, [sp, #72]	@ 0x48
 8007056:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800705a:	9316      	str	r3, [sp, #88]	@ 0x58
 800705c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800705e:	9805      	ldr	r0, [sp, #20]
 8007060:	6859      	ldr	r1, [r3, #4]
 8007062:	f7ff f813 	bl	800608c <_Balloc>
 8007066:	4681      	mov	r9, r0
 8007068:	2800      	cmp	r0, #0
 800706a:	f43f aef4 	beq.w	8006e56 <_strtod_l+0x436>
 800706e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007070:	300c      	adds	r0, #12
 8007072:	691a      	ldr	r2, [r3, #16]
 8007074:	f103 010c 	add.w	r1, r3, #12
 8007078:	3202      	adds	r2, #2
 800707a:	0092      	lsls	r2, r2, #2
 800707c:	f000 fd66 	bl	8007b4c <memcpy>
 8007080:	ab1c      	add	r3, sp, #112	@ 0x70
 8007082:	9301      	str	r3, [sp, #4]
 8007084:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	4652      	mov	r2, sl
 800708a:	465b      	mov	r3, fp
 800708c:	9805      	ldr	r0, [sp, #20]
 800708e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007092:	f7ff fbd5 	bl	8006840 <__d2b>
 8007096:	901a      	str	r0, [sp, #104]	@ 0x68
 8007098:	2800      	cmp	r0, #0
 800709a:	f43f aedc 	beq.w	8006e56 <_strtod_l+0x436>
 800709e:	2101      	movs	r1, #1
 80070a0:	9805      	ldr	r0, [sp, #20]
 80070a2:	f7ff f931 	bl	8006308 <__i2b>
 80070a6:	4680      	mov	r8, r0
 80070a8:	b948      	cbnz	r0, 80070be <_strtod_l+0x69e>
 80070aa:	f04f 0800 	mov.w	r8, #0
 80070ae:	e6d2      	b.n	8006e56 <_strtod_l+0x436>
 80070b0:	f04f 32ff 	mov.w	r2, #4294967295
 80070b4:	fa02 f303 	lsl.w	r3, r2, r3
 80070b8:	ea03 0a0a 	and.w	sl, r3, sl
 80070bc:	e7ae      	b.n	800701c <_strtod_l+0x5fc>
 80070be:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80070c0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80070c2:	2d00      	cmp	r5, #0
 80070c4:	bfab      	itete	ge
 80070c6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80070c8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80070ca:	18ef      	addge	r7, r5, r3
 80070cc:	1b5e      	sublt	r6, r3, r5
 80070ce:	9b08      	ldr	r3, [sp, #32]
 80070d0:	bfa8      	it	ge
 80070d2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80070d4:	eba5 0503 	sub.w	r5, r5, r3
 80070d8:	4415      	add	r5, r2
 80070da:	4b67      	ldr	r3, [pc, #412]	@ (8007278 <_strtod_l+0x858>)
 80070dc:	f105 35ff 	add.w	r5, r5, #4294967295
 80070e0:	bfb8      	it	lt
 80070e2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80070e4:	429d      	cmp	r5, r3
 80070e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80070ea:	da50      	bge.n	800718e <_strtod_l+0x76e>
 80070ec:	1b5b      	subs	r3, r3, r5
 80070ee:	2b1f      	cmp	r3, #31
 80070f0:	f04f 0101 	mov.w	r1, #1
 80070f4:	eba2 0203 	sub.w	r2, r2, r3
 80070f8:	dc3d      	bgt.n	8007176 <_strtod_l+0x756>
 80070fa:	fa01 f303 	lsl.w	r3, r1, r3
 80070fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007100:	2300      	movs	r3, #0
 8007102:	9310      	str	r3, [sp, #64]	@ 0x40
 8007104:	18bd      	adds	r5, r7, r2
 8007106:	9b08      	ldr	r3, [sp, #32]
 8007108:	42af      	cmp	r7, r5
 800710a:	4416      	add	r6, r2
 800710c:	441e      	add	r6, r3
 800710e:	463b      	mov	r3, r7
 8007110:	bfa8      	it	ge
 8007112:	462b      	movge	r3, r5
 8007114:	42b3      	cmp	r3, r6
 8007116:	bfa8      	it	ge
 8007118:	4633      	movge	r3, r6
 800711a:	2b00      	cmp	r3, #0
 800711c:	bfc2      	ittt	gt
 800711e:	1aed      	subgt	r5, r5, r3
 8007120:	1af6      	subgt	r6, r6, r3
 8007122:	1aff      	subgt	r7, r7, r3
 8007124:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007126:	2b00      	cmp	r3, #0
 8007128:	dd16      	ble.n	8007158 <_strtod_l+0x738>
 800712a:	4641      	mov	r1, r8
 800712c:	461a      	mov	r2, r3
 800712e:	9805      	ldr	r0, [sp, #20]
 8007130:	f7ff f9a8 	bl	8006484 <__pow5mult>
 8007134:	4680      	mov	r8, r0
 8007136:	2800      	cmp	r0, #0
 8007138:	d0b7      	beq.n	80070aa <_strtod_l+0x68a>
 800713a:	4601      	mov	r1, r0
 800713c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800713e:	9805      	ldr	r0, [sp, #20]
 8007140:	f7ff f8f8 	bl	8006334 <__multiply>
 8007144:	900e      	str	r0, [sp, #56]	@ 0x38
 8007146:	2800      	cmp	r0, #0
 8007148:	f43f ae85 	beq.w	8006e56 <_strtod_l+0x436>
 800714c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800714e:	9805      	ldr	r0, [sp, #20]
 8007150:	f7fe ffdc 	bl	800610c <_Bfree>
 8007154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007156:	931a      	str	r3, [sp, #104]	@ 0x68
 8007158:	2d00      	cmp	r5, #0
 800715a:	dc1d      	bgt.n	8007198 <_strtod_l+0x778>
 800715c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800715e:	2b00      	cmp	r3, #0
 8007160:	dd23      	ble.n	80071aa <_strtod_l+0x78a>
 8007162:	4649      	mov	r1, r9
 8007164:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007166:	9805      	ldr	r0, [sp, #20]
 8007168:	f7ff f98c 	bl	8006484 <__pow5mult>
 800716c:	4681      	mov	r9, r0
 800716e:	b9e0      	cbnz	r0, 80071aa <_strtod_l+0x78a>
 8007170:	f04f 0900 	mov.w	r9, #0
 8007174:	e66f      	b.n	8006e56 <_strtod_l+0x436>
 8007176:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800717a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800717e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007182:	35e2      	adds	r5, #226	@ 0xe2
 8007184:	fa01 f305 	lsl.w	r3, r1, r5
 8007188:	9310      	str	r3, [sp, #64]	@ 0x40
 800718a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800718c:	e7ba      	b.n	8007104 <_strtod_l+0x6e4>
 800718e:	2300      	movs	r3, #0
 8007190:	9310      	str	r3, [sp, #64]	@ 0x40
 8007192:	2301      	movs	r3, #1
 8007194:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007196:	e7b5      	b.n	8007104 <_strtod_l+0x6e4>
 8007198:	462a      	mov	r2, r5
 800719a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800719c:	9805      	ldr	r0, [sp, #20]
 800719e:	f7ff f9cb 	bl	8006538 <__lshift>
 80071a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d1d9      	bne.n	800715c <_strtod_l+0x73c>
 80071a8:	e655      	b.n	8006e56 <_strtod_l+0x436>
 80071aa:	2e00      	cmp	r6, #0
 80071ac:	dd07      	ble.n	80071be <_strtod_l+0x79e>
 80071ae:	4649      	mov	r1, r9
 80071b0:	4632      	mov	r2, r6
 80071b2:	9805      	ldr	r0, [sp, #20]
 80071b4:	f7ff f9c0 	bl	8006538 <__lshift>
 80071b8:	4681      	mov	r9, r0
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d0d8      	beq.n	8007170 <_strtod_l+0x750>
 80071be:	2f00      	cmp	r7, #0
 80071c0:	dd08      	ble.n	80071d4 <_strtod_l+0x7b4>
 80071c2:	4641      	mov	r1, r8
 80071c4:	463a      	mov	r2, r7
 80071c6:	9805      	ldr	r0, [sp, #20]
 80071c8:	f7ff f9b6 	bl	8006538 <__lshift>
 80071cc:	4680      	mov	r8, r0
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f43f ae41 	beq.w	8006e56 <_strtod_l+0x436>
 80071d4:	464a      	mov	r2, r9
 80071d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071d8:	9805      	ldr	r0, [sp, #20]
 80071da:	f7ff fa35 	bl	8006648 <__mdiff>
 80071de:	4604      	mov	r4, r0
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f43f ae38 	beq.w	8006e56 <_strtod_l+0x436>
 80071e6:	68c3      	ldr	r3, [r0, #12]
 80071e8:	4641      	mov	r1, r8
 80071ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071ec:	2300      	movs	r3, #0
 80071ee:	60c3      	str	r3, [r0, #12]
 80071f0:	f7ff fa0e 	bl	8006610 <__mcmp>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	da45      	bge.n	8007284 <_strtod_l+0x864>
 80071f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071fa:	ea53 030a 	orrs.w	r3, r3, sl
 80071fe:	d16b      	bne.n	80072d8 <_strtod_l+0x8b8>
 8007200:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007204:	2b00      	cmp	r3, #0
 8007206:	d167      	bne.n	80072d8 <_strtod_l+0x8b8>
 8007208:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800720c:	0d1b      	lsrs	r3, r3, #20
 800720e:	051b      	lsls	r3, r3, #20
 8007210:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007214:	d960      	bls.n	80072d8 <_strtod_l+0x8b8>
 8007216:	6963      	ldr	r3, [r4, #20]
 8007218:	b913      	cbnz	r3, 8007220 <_strtod_l+0x800>
 800721a:	6923      	ldr	r3, [r4, #16]
 800721c:	2b01      	cmp	r3, #1
 800721e:	dd5b      	ble.n	80072d8 <_strtod_l+0x8b8>
 8007220:	4621      	mov	r1, r4
 8007222:	2201      	movs	r2, #1
 8007224:	9805      	ldr	r0, [sp, #20]
 8007226:	f7ff f987 	bl	8006538 <__lshift>
 800722a:	4641      	mov	r1, r8
 800722c:	4604      	mov	r4, r0
 800722e:	f7ff f9ef 	bl	8006610 <__mcmp>
 8007232:	2800      	cmp	r0, #0
 8007234:	dd50      	ble.n	80072d8 <_strtod_l+0x8b8>
 8007236:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800723a:	9a08      	ldr	r2, [sp, #32]
 800723c:	0d1b      	lsrs	r3, r3, #20
 800723e:	051b      	lsls	r3, r3, #20
 8007240:	2a00      	cmp	r2, #0
 8007242:	d06a      	beq.n	800731a <_strtod_l+0x8fa>
 8007244:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007248:	d867      	bhi.n	800731a <_strtod_l+0x8fa>
 800724a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800724e:	f67f ae98 	bls.w	8006f82 <_strtod_l+0x562>
 8007252:	4650      	mov	r0, sl
 8007254:	4659      	mov	r1, fp
 8007256:	4b09      	ldr	r3, [pc, #36]	@ (800727c <_strtod_l+0x85c>)
 8007258:	2200      	movs	r2, #0
 800725a:	f7f9 f93d 	bl	80004d8 <__aeabi_dmul>
 800725e:	4b08      	ldr	r3, [pc, #32]	@ (8007280 <_strtod_l+0x860>)
 8007260:	4682      	mov	sl, r0
 8007262:	400b      	ands	r3, r1
 8007264:	468b      	mov	fp, r1
 8007266:	2b00      	cmp	r3, #0
 8007268:	f47f ae00 	bne.w	8006e6c <_strtod_l+0x44c>
 800726c:	2322      	movs	r3, #34	@ 0x22
 800726e:	9a05      	ldr	r2, [sp, #20]
 8007270:	6013      	str	r3, [r2, #0]
 8007272:	e5fb      	b.n	8006e6c <_strtod_l+0x44c>
 8007274:	08008c70 	.word	0x08008c70
 8007278:	fffffc02 	.word	0xfffffc02
 800727c:	39500000 	.word	0x39500000
 8007280:	7ff00000 	.word	0x7ff00000
 8007284:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007288:	d165      	bne.n	8007356 <_strtod_l+0x936>
 800728a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800728c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007290:	b35a      	cbz	r2, 80072ea <_strtod_l+0x8ca>
 8007292:	4a99      	ldr	r2, [pc, #612]	@ (80074f8 <_strtod_l+0xad8>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d12b      	bne.n	80072f0 <_strtod_l+0x8d0>
 8007298:	9b08      	ldr	r3, [sp, #32]
 800729a:	4651      	mov	r1, sl
 800729c:	b303      	cbz	r3, 80072e0 <_strtod_l+0x8c0>
 800729e:	465a      	mov	r2, fp
 80072a0:	4b96      	ldr	r3, [pc, #600]	@ (80074fc <_strtod_l+0xadc>)
 80072a2:	4013      	ands	r3, r2
 80072a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80072a8:	f04f 32ff 	mov.w	r2, #4294967295
 80072ac:	d81b      	bhi.n	80072e6 <_strtod_l+0x8c6>
 80072ae:	0d1b      	lsrs	r3, r3, #20
 80072b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	4299      	cmp	r1, r3
 80072ba:	d119      	bne.n	80072f0 <_strtod_l+0x8d0>
 80072bc:	4b90      	ldr	r3, [pc, #576]	@ (8007500 <_strtod_l+0xae0>)
 80072be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d102      	bne.n	80072ca <_strtod_l+0x8aa>
 80072c4:	3101      	adds	r1, #1
 80072c6:	f43f adc6 	beq.w	8006e56 <_strtod_l+0x436>
 80072ca:	f04f 0a00 	mov.w	sl, #0
 80072ce:	4b8b      	ldr	r3, [pc, #556]	@ (80074fc <_strtod_l+0xadc>)
 80072d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072d2:	401a      	ands	r2, r3
 80072d4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80072d8:	9b08      	ldr	r3, [sp, #32]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1b9      	bne.n	8007252 <_strtod_l+0x832>
 80072de:	e5c5      	b.n	8006e6c <_strtod_l+0x44c>
 80072e0:	f04f 33ff 	mov.w	r3, #4294967295
 80072e4:	e7e8      	b.n	80072b8 <_strtod_l+0x898>
 80072e6:	4613      	mov	r3, r2
 80072e8:	e7e6      	b.n	80072b8 <_strtod_l+0x898>
 80072ea:	ea53 030a 	orrs.w	r3, r3, sl
 80072ee:	d0a2      	beq.n	8007236 <_strtod_l+0x816>
 80072f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80072f2:	b1db      	cbz	r3, 800732c <_strtod_l+0x90c>
 80072f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072f6:	4213      	tst	r3, r2
 80072f8:	d0ee      	beq.n	80072d8 <_strtod_l+0x8b8>
 80072fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072fc:	4650      	mov	r0, sl
 80072fe:	4659      	mov	r1, fp
 8007300:	9a08      	ldr	r2, [sp, #32]
 8007302:	b1bb      	cbz	r3, 8007334 <_strtod_l+0x914>
 8007304:	f7ff fb68 	bl	80069d8 <sulp>
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007310:	f7f8 ff2c 	bl	800016c <__adddf3>
 8007314:	4682      	mov	sl, r0
 8007316:	468b      	mov	fp, r1
 8007318:	e7de      	b.n	80072d8 <_strtod_l+0x8b8>
 800731a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800731e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007322:	f04f 3aff 	mov.w	sl, #4294967295
 8007326:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800732a:	e7d5      	b.n	80072d8 <_strtod_l+0x8b8>
 800732c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800732e:	ea13 0f0a 	tst.w	r3, sl
 8007332:	e7e1      	b.n	80072f8 <_strtod_l+0x8d8>
 8007334:	f7ff fb50 	bl	80069d8 <sulp>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007340:	f7f8 ff12 	bl	8000168 <__aeabi_dsub>
 8007344:	2200      	movs	r2, #0
 8007346:	2300      	movs	r3, #0
 8007348:	4682      	mov	sl, r0
 800734a:	468b      	mov	fp, r1
 800734c:	f7f9 fb2c 	bl	80009a8 <__aeabi_dcmpeq>
 8007350:	2800      	cmp	r0, #0
 8007352:	d0c1      	beq.n	80072d8 <_strtod_l+0x8b8>
 8007354:	e615      	b.n	8006f82 <_strtod_l+0x562>
 8007356:	4641      	mov	r1, r8
 8007358:	4620      	mov	r0, r4
 800735a:	f7ff fac9 	bl	80068f0 <__ratio>
 800735e:	2200      	movs	r2, #0
 8007360:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007364:	4606      	mov	r6, r0
 8007366:	460f      	mov	r7, r1
 8007368:	f7f9 fb32 	bl	80009d0 <__aeabi_dcmple>
 800736c:	2800      	cmp	r0, #0
 800736e:	d06d      	beq.n	800744c <_strtod_l+0xa2c>
 8007370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d178      	bne.n	8007468 <_strtod_l+0xa48>
 8007376:	f1ba 0f00 	cmp.w	sl, #0
 800737a:	d156      	bne.n	800742a <_strtod_l+0xa0a>
 800737c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800737e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007382:	2b00      	cmp	r3, #0
 8007384:	d158      	bne.n	8007438 <_strtod_l+0xa18>
 8007386:	2200      	movs	r2, #0
 8007388:	4630      	mov	r0, r6
 800738a:	4639      	mov	r1, r7
 800738c:	4b5d      	ldr	r3, [pc, #372]	@ (8007504 <_strtod_l+0xae4>)
 800738e:	f7f9 fb15 	bl	80009bc <__aeabi_dcmplt>
 8007392:	2800      	cmp	r0, #0
 8007394:	d157      	bne.n	8007446 <_strtod_l+0xa26>
 8007396:	4630      	mov	r0, r6
 8007398:	4639      	mov	r1, r7
 800739a:	2200      	movs	r2, #0
 800739c:	4b5a      	ldr	r3, [pc, #360]	@ (8007508 <_strtod_l+0xae8>)
 800739e:	f7f9 f89b 	bl	80004d8 <__aeabi_dmul>
 80073a2:	4606      	mov	r6, r0
 80073a4:	460f      	mov	r7, r1
 80073a6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80073aa:	9606      	str	r6, [sp, #24]
 80073ac:	9307      	str	r3, [sp, #28]
 80073ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073b2:	4d52      	ldr	r5, [pc, #328]	@ (80074fc <_strtod_l+0xadc>)
 80073b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80073b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073ba:	401d      	ands	r5, r3
 80073bc:	4b53      	ldr	r3, [pc, #332]	@ (800750c <_strtod_l+0xaec>)
 80073be:	429d      	cmp	r5, r3
 80073c0:	f040 80aa 	bne.w	8007518 <_strtod_l+0xaf8>
 80073c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073c6:	4650      	mov	r0, sl
 80073c8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80073cc:	4659      	mov	r1, fp
 80073ce:	f7ff f9cf 	bl	8006770 <__ulp>
 80073d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073d6:	f7f9 f87f 	bl	80004d8 <__aeabi_dmul>
 80073da:	4652      	mov	r2, sl
 80073dc:	465b      	mov	r3, fp
 80073de:	f7f8 fec5 	bl	800016c <__adddf3>
 80073e2:	460b      	mov	r3, r1
 80073e4:	4945      	ldr	r1, [pc, #276]	@ (80074fc <_strtod_l+0xadc>)
 80073e6:	4a4a      	ldr	r2, [pc, #296]	@ (8007510 <_strtod_l+0xaf0>)
 80073e8:	4019      	ands	r1, r3
 80073ea:	4291      	cmp	r1, r2
 80073ec:	4682      	mov	sl, r0
 80073ee:	d942      	bls.n	8007476 <_strtod_l+0xa56>
 80073f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80073f2:	4b43      	ldr	r3, [pc, #268]	@ (8007500 <_strtod_l+0xae0>)
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d103      	bne.n	8007400 <_strtod_l+0x9e0>
 80073f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073fa:	3301      	adds	r3, #1
 80073fc:	f43f ad2b 	beq.w	8006e56 <_strtod_l+0x436>
 8007400:	f04f 3aff 	mov.w	sl, #4294967295
 8007404:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007500 <_strtod_l+0xae0>
 8007408:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800740a:	9805      	ldr	r0, [sp, #20]
 800740c:	f7fe fe7e 	bl	800610c <_Bfree>
 8007410:	4649      	mov	r1, r9
 8007412:	9805      	ldr	r0, [sp, #20]
 8007414:	f7fe fe7a 	bl	800610c <_Bfree>
 8007418:	4641      	mov	r1, r8
 800741a:	9805      	ldr	r0, [sp, #20]
 800741c:	f7fe fe76 	bl	800610c <_Bfree>
 8007420:	4621      	mov	r1, r4
 8007422:	9805      	ldr	r0, [sp, #20]
 8007424:	f7fe fe72 	bl	800610c <_Bfree>
 8007428:	e618      	b.n	800705c <_strtod_l+0x63c>
 800742a:	f1ba 0f01 	cmp.w	sl, #1
 800742e:	d103      	bne.n	8007438 <_strtod_l+0xa18>
 8007430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007432:	2b00      	cmp	r3, #0
 8007434:	f43f ada5 	beq.w	8006f82 <_strtod_l+0x562>
 8007438:	2200      	movs	r2, #0
 800743a:	4b36      	ldr	r3, [pc, #216]	@ (8007514 <_strtod_l+0xaf4>)
 800743c:	2600      	movs	r6, #0
 800743e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007442:	4f30      	ldr	r7, [pc, #192]	@ (8007504 <_strtod_l+0xae4>)
 8007444:	e7b3      	b.n	80073ae <_strtod_l+0x98e>
 8007446:	2600      	movs	r6, #0
 8007448:	4f2f      	ldr	r7, [pc, #188]	@ (8007508 <_strtod_l+0xae8>)
 800744a:	e7ac      	b.n	80073a6 <_strtod_l+0x986>
 800744c:	4630      	mov	r0, r6
 800744e:	4639      	mov	r1, r7
 8007450:	4b2d      	ldr	r3, [pc, #180]	@ (8007508 <_strtod_l+0xae8>)
 8007452:	2200      	movs	r2, #0
 8007454:	f7f9 f840 	bl	80004d8 <__aeabi_dmul>
 8007458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800745a:	4606      	mov	r6, r0
 800745c:	460f      	mov	r7, r1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0a1      	beq.n	80073a6 <_strtod_l+0x986>
 8007462:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007466:	e7a2      	b.n	80073ae <_strtod_l+0x98e>
 8007468:	2200      	movs	r2, #0
 800746a:	4b26      	ldr	r3, [pc, #152]	@ (8007504 <_strtod_l+0xae4>)
 800746c:	4616      	mov	r6, r2
 800746e:	461f      	mov	r7, r3
 8007470:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007474:	e79b      	b.n	80073ae <_strtod_l+0x98e>
 8007476:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800747a:	9b08      	ldr	r3, [sp, #32]
 800747c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1c1      	bne.n	8007408 <_strtod_l+0x9e8>
 8007484:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007488:	0d1b      	lsrs	r3, r3, #20
 800748a:	051b      	lsls	r3, r3, #20
 800748c:	429d      	cmp	r5, r3
 800748e:	d1bb      	bne.n	8007408 <_strtod_l+0x9e8>
 8007490:	4630      	mov	r0, r6
 8007492:	4639      	mov	r1, r7
 8007494:	f7f9 fb68 	bl	8000b68 <__aeabi_d2lz>
 8007498:	f7f8 fff0 	bl	800047c <__aeabi_l2d>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4630      	mov	r0, r6
 80074a2:	4639      	mov	r1, r7
 80074a4:	f7f8 fe60 	bl	8000168 <__aeabi_dsub>
 80074a8:	460b      	mov	r3, r1
 80074aa:	4602      	mov	r2, r0
 80074ac:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80074b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80074b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074b6:	ea46 060a 	orr.w	r6, r6, sl
 80074ba:	431e      	orrs	r6, r3
 80074bc:	d069      	beq.n	8007592 <_strtod_l+0xb72>
 80074be:	a30a      	add	r3, pc, #40	@ (adr r3, 80074e8 <_strtod_l+0xac8>)
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f7f9 fa7a 	bl	80009bc <__aeabi_dcmplt>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	f47f accf 	bne.w	8006e6c <_strtod_l+0x44c>
 80074ce:	a308      	add	r3, pc, #32	@ (adr r3, 80074f0 <_strtod_l+0xad0>)
 80074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074d8:	f7f9 fa8e 	bl	80009f8 <__aeabi_dcmpgt>
 80074dc:	2800      	cmp	r0, #0
 80074de:	d093      	beq.n	8007408 <_strtod_l+0x9e8>
 80074e0:	e4c4      	b.n	8006e6c <_strtod_l+0x44c>
 80074e2:	bf00      	nop
 80074e4:	f3af 8000 	nop.w
 80074e8:	94a03595 	.word	0x94a03595
 80074ec:	3fdfffff 	.word	0x3fdfffff
 80074f0:	35afe535 	.word	0x35afe535
 80074f4:	3fe00000 	.word	0x3fe00000
 80074f8:	000fffff 	.word	0x000fffff
 80074fc:	7ff00000 	.word	0x7ff00000
 8007500:	7fefffff 	.word	0x7fefffff
 8007504:	3ff00000 	.word	0x3ff00000
 8007508:	3fe00000 	.word	0x3fe00000
 800750c:	7fe00000 	.word	0x7fe00000
 8007510:	7c9fffff 	.word	0x7c9fffff
 8007514:	bff00000 	.word	0xbff00000
 8007518:	9b08      	ldr	r3, [sp, #32]
 800751a:	b323      	cbz	r3, 8007566 <_strtod_l+0xb46>
 800751c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007520:	d821      	bhi.n	8007566 <_strtod_l+0xb46>
 8007522:	a327      	add	r3, pc, #156	@ (adr r3, 80075c0 <_strtod_l+0xba0>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	4630      	mov	r0, r6
 800752a:	4639      	mov	r1, r7
 800752c:	f7f9 fa50 	bl	80009d0 <__aeabi_dcmple>
 8007530:	b1a0      	cbz	r0, 800755c <_strtod_l+0xb3c>
 8007532:	4639      	mov	r1, r7
 8007534:	4630      	mov	r0, r6
 8007536:	f7f9 faa7 	bl	8000a88 <__aeabi_d2uiz>
 800753a:	2801      	cmp	r0, #1
 800753c:	bf38      	it	cc
 800753e:	2001      	movcc	r0, #1
 8007540:	f7f8 ff50 	bl	80003e4 <__aeabi_ui2d>
 8007544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007546:	4606      	mov	r6, r0
 8007548:	460f      	mov	r7, r1
 800754a:	b9fb      	cbnz	r3, 800758c <_strtod_l+0xb6c>
 800754c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007550:	9014      	str	r0, [sp, #80]	@ 0x50
 8007552:	9315      	str	r3, [sp, #84]	@ 0x54
 8007554:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007558:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800755c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800755e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007562:	1b5b      	subs	r3, r3, r5
 8007564:	9311      	str	r3, [sp, #68]	@ 0x44
 8007566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800756a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800756e:	f7ff f8ff 	bl	8006770 <__ulp>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4650      	mov	r0, sl
 8007578:	4659      	mov	r1, fp
 800757a:	f7f8 ffad 	bl	80004d8 <__aeabi_dmul>
 800757e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007582:	f7f8 fdf3 	bl	800016c <__adddf3>
 8007586:	4682      	mov	sl, r0
 8007588:	468b      	mov	fp, r1
 800758a:	e776      	b.n	800747a <_strtod_l+0xa5a>
 800758c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007590:	e7e0      	b.n	8007554 <_strtod_l+0xb34>
 8007592:	a30d      	add	r3, pc, #52	@ (adr r3, 80075c8 <_strtod_l+0xba8>)
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f7f9 fa10 	bl	80009bc <__aeabi_dcmplt>
 800759c:	e79e      	b.n	80074dc <_strtod_l+0xabc>
 800759e:	2300      	movs	r3, #0
 80075a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075a4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	f7ff ba77 	b.w	8006a9a <_strtod_l+0x7a>
 80075ac:	2a65      	cmp	r2, #101	@ 0x65
 80075ae:	f43f ab6e 	beq.w	8006c8e <_strtod_l+0x26e>
 80075b2:	2a45      	cmp	r2, #69	@ 0x45
 80075b4:	f43f ab6b 	beq.w	8006c8e <_strtod_l+0x26e>
 80075b8:	2301      	movs	r3, #1
 80075ba:	f7ff bba6 	b.w	8006d0a <_strtod_l+0x2ea>
 80075be:	bf00      	nop
 80075c0:	ffc00000 	.word	0xffc00000
 80075c4:	41dfffff 	.word	0x41dfffff
 80075c8:	94a03595 	.word	0x94a03595
 80075cc:	3fcfffff 	.word	0x3fcfffff

080075d0 <_strtod_r>:
 80075d0:	4b01      	ldr	r3, [pc, #4]	@ (80075d8 <_strtod_r+0x8>)
 80075d2:	f7ff ba25 	b.w	8006a20 <_strtod_l>
 80075d6:	bf00      	nop
 80075d8:	20000068 	.word	0x20000068

080075dc <_strtol_l.constprop.0>:
 80075dc:	2b24      	cmp	r3, #36	@ 0x24
 80075de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e2:	4686      	mov	lr, r0
 80075e4:	4690      	mov	r8, r2
 80075e6:	d801      	bhi.n	80075ec <_strtol_l.constprop.0+0x10>
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d106      	bne.n	80075fa <_strtol_l.constprop.0+0x1e>
 80075ec:	f7fd fdc0 	bl	8005170 <__errno>
 80075f0:	2316      	movs	r3, #22
 80075f2:	6003      	str	r3, [r0, #0]
 80075f4:	2000      	movs	r0, #0
 80075f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fa:	460d      	mov	r5, r1
 80075fc:	4833      	ldr	r0, [pc, #204]	@ (80076cc <_strtol_l.constprop.0+0xf0>)
 80075fe:	462a      	mov	r2, r5
 8007600:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007604:	5d06      	ldrb	r6, [r0, r4]
 8007606:	f016 0608 	ands.w	r6, r6, #8
 800760a:	d1f8      	bne.n	80075fe <_strtol_l.constprop.0+0x22>
 800760c:	2c2d      	cmp	r4, #45	@ 0x2d
 800760e:	d12d      	bne.n	800766c <_strtol_l.constprop.0+0x90>
 8007610:	2601      	movs	r6, #1
 8007612:	782c      	ldrb	r4, [r5, #0]
 8007614:	1c95      	adds	r5, r2, #2
 8007616:	f033 0210 	bics.w	r2, r3, #16
 800761a:	d109      	bne.n	8007630 <_strtol_l.constprop.0+0x54>
 800761c:	2c30      	cmp	r4, #48	@ 0x30
 800761e:	d12a      	bne.n	8007676 <_strtol_l.constprop.0+0x9a>
 8007620:	782a      	ldrb	r2, [r5, #0]
 8007622:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007626:	2a58      	cmp	r2, #88	@ 0x58
 8007628:	d125      	bne.n	8007676 <_strtol_l.constprop.0+0x9a>
 800762a:	2310      	movs	r3, #16
 800762c:	786c      	ldrb	r4, [r5, #1]
 800762e:	3502      	adds	r5, #2
 8007630:	2200      	movs	r2, #0
 8007632:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007636:	f10c 3cff 	add.w	ip, ip, #4294967295
 800763a:	fbbc f9f3 	udiv	r9, ip, r3
 800763e:	4610      	mov	r0, r2
 8007640:	fb03 ca19 	mls	sl, r3, r9, ip
 8007644:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007648:	2f09      	cmp	r7, #9
 800764a:	d81b      	bhi.n	8007684 <_strtol_l.constprop.0+0xa8>
 800764c:	463c      	mov	r4, r7
 800764e:	42a3      	cmp	r3, r4
 8007650:	dd27      	ble.n	80076a2 <_strtol_l.constprop.0+0xc6>
 8007652:	1c57      	adds	r7, r2, #1
 8007654:	d007      	beq.n	8007666 <_strtol_l.constprop.0+0x8a>
 8007656:	4581      	cmp	r9, r0
 8007658:	d320      	bcc.n	800769c <_strtol_l.constprop.0+0xc0>
 800765a:	d101      	bne.n	8007660 <_strtol_l.constprop.0+0x84>
 800765c:	45a2      	cmp	sl, r4
 800765e:	db1d      	blt.n	800769c <_strtol_l.constprop.0+0xc0>
 8007660:	2201      	movs	r2, #1
 8007662:	fb00 4003 	mla	r0, r0, r3, r4
 8007666:	f815 4b01 	ldrb.w	r4, [r5], #1
 800766a:	e7eb      	b.n	8007644 <_strtol_l.constprop.0+0x68>
 800766c:	2c2b      	cmp	r4, #43	@ 0x2b
 800766e:	bf04      	itt	eq
 8007670:	782c      	ldrbeq	r4, [r5, #0]
 8007672:	1c95      	addeq	r5, r2, #2
 8007674:	e7cf      	b.n	8007616 <_strtol_l.constprop.0+0x3a>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1da      	bne.n	8007630 <_strtol_l.constprop.0+0x54>
 800767a:	2c30      	cmp	r4, #48	@ 0x30
 800767c:	bf0c      	ite	eq
 800767e:	2308      	moveq	r3, #8
 8007680:	230a      	movne	r3, #10
 8007682:	e7d5      	b.n	8007630 <_strtol_l.constprop.0+0x54>
 8007684:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007688:	2f19      	cmp	r7, #25
 800768a:	d801      	bhi.n	8007690 <_strtol_l.constprop.0+0xb4>
 800768c:	3c37      	subs	r4, #55	@ 0x37
 800768e:	e7de      	b.n	800764e <_strtol_l.constprop.0+0x72>
 8007690:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007694:	2f19      	cmp	r7, #25
 8007696:	d804      	bhi.n	80076a2 <_strtol_l.constprop.0+0xc6>
 8007698:	3c57      	subs	r4, #87	@ 0x57
 800769a:	e7d8      	b.n	800764e <_strtol_l.constprop.0+0x72>
 800769c:	f04f 32ff 	mov.w	r2, #4294967295
 80076a0:	e7e1      	b.n	8007666 <_strtol_l.constprop.0+0x8a>
 80076a2:	1c53      	adds	r3, r2, #1
 80076a4:	d108      	bne.n	80076b8 <_strtol_l.constprop.0+0xdc>
 80076a6:	2322      	movs	r3, #34	@ 0x22
 80076a8:	4660      	mov	r0, ip
 80076aa:	f8ce 3000 	str.w	r3, [lr]
 80076ae:	f1b8 0f00 	cmp.w	r8, #0
 80076b2:	d0a0      	beq.n	80075f6 <_strtol_l.constprop.0+0x1a>
 80076b4:	1e69      	subs	r1, r5, #1
 80076b6:	e006      	b.n	80076c6 <_strtol_l.constprop.0+0xea>
 80076b8:	b106      	cbz	r6, 80076bc <_strtol_l.constprop.0+0xe0>
 80076ba:	4240      	negs	r0, r0
 80076bc:	f1b8 0f00 	cmp.w	r8, #0
 80076c0:	d099      	beq.n	80075f6 <_strtol_l.constprop.0+0x1a>
 80076c2:	2a00      	cmp	r2, #0
 80076c4:	d1f6      	bne.n	80076b4 <_strtol_l.constprop.0+0xd8>
 80076c6:	f8c8 1000 	str.w	r1, [r8]
 80076ca:	e794      	b.n	80075f6 <_strtol_l.constprop.0+0x1a>
 80076cc:	08008c99 	.word	0x08008c99

080076d0 <_strtol_r>:
 80076d0:	f7ff bf84 	b.w	80075dc <_strtol_l.constprop.0>

080076d4 <__ssputs_r>:
 80076d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d8:	461f      	mov	r7, r3
 80076da:	688e      	ldr	r6, [r1, #8]
 80076dc:	4682      	mov	sl, r0
 80076de:	42be      	cmp	r6, r7
 80076e0:	460c      	mov	r4, r1
 80076e2:	4690      	mov	r8, r2
 80076e4:	680b      	ldr	r3, [r1, #0]
 80076e6:	d82d      	bhi.n	8007744 <__ssputs_r+0x70>
 80076e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80076f0:	d026      	beq.n	8007740 <__ssputs_r+0x6c>
 80076f2:	6965      	ldr	r5, [r4, #20]
 80076f4:	6909      	ldr	r1, [r1, #16]
 80076f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076fa:	eba3 0901 	sub.w	r9, r3, r1
 80076fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007702:	1c7b      	adds	r3, r7, #1
 8007704:	444b      	add	r3, r9
 8007706:	106d      	asrs	r5, r5, #1
 8007708:	429d      	cmp	r5, r3
 800770a:	bf38      	it	cc
 800770c:	461d      	movcc	r5, r3
 800770e:	0553      	lsls	r3, r2, #21
 8007710:	d527      	bpl.n	8007762 <__ssputs_r+0x8e>
 8007712:	4629      	mov	r1, r5
 8007714:	f7fe fc2e 	bl	8005f74 <_malloc_r>
 8007718:	4606      	mov	r6, r0
 800771a:	b360      	cbz	r0, 8007776 <__ssputs_r+0xa2>
 800771c:	464a      	mov	r2, r9
 800771e:	6921      	ldr	r1, [r4, #16]
 8007720:	f000 fa14 	bl	8007b4c <memcpy>
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800772a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800772e:	81a3      	strh	r3, [r4, #12]
 8007730:	6126      	str	r6, [r4, #16]
 8007732:	444e      	add	r6, r9
 8007734:	6026      	str	r6, [r4, #0]
 8007736:	463e      	mov	r6, r7
 8007738:	6165      	str	r5, [r4, #20]
 800773a:	eba5 0509 	sub.w	r5, r5, r9
 800773e:	60a5      	str	r5, [r4, #8]
 8007740:	42be      	cmp	r6, r7
 8007742:	d900      	bls.n	8007746 <__ssputs_r+0x72>
 8007744:	463e      	mov	r6, r7
 8007746:	4632      	mov	r2, r6
 8007748:	4641      	mov	r1, r8
 800774a:	6820      	ldr	r0, [r4, #0]
 800774c:	f000 f9c2 	bl	8007ad4 <memmove>
 8007750:	2000      	movs	r0, #0
 8007752:	68a3      	ldr	r3, [r4, #8]
 8007754:	1b9b      	subs	r3, r3, r6
 8007756:	60a3      	str	r3, [r4, #8]
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	4433      	add	r3, r6
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007762:	462a      	mov	r2, r5
 8007764:	f000 fd83 	bl	800826e <_realloc_r>
 8007768:	4606      	mov	r6, r0
 800776a:	2800      	cmp	r0, #0
 800776c:	d1e0      	bne.n	8007730 <__ssputs_r+0x5c>
 800776e:	4650      	mov	r0, sl
 8007770:	6921      	ldr	r1, [r4, #16]
 8007772:	f7fe fb8d 	bl	8005e90 <_free_r>
 8007776:	230c      	movs	r3, #12
 8007778:	f8ca 3000 	str.w	r3, [sl]
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	f04f 30ff 	mov.w	r0, #4294967295
 8007782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007786:	81a3      	strh	r3, [r4, #12]
 8007788:	e7e9      	b.n	800775e <__ssputs_r+0x8a>
	...

0800778c <_svfiprintf_r>:
 800778c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007790:	4698      	mov	r8, r3
 8007792:	898b      	ldrh	r3, [r1, #12]
 8007794:	4607      	mov	r7, r0
 8007796:	061b      	lsls	r3, r3, #24
 8007798:	460d      	mov	r5, r1
 800779a:	4614      	mov	r4, r2
 800779c:	b09d      	sub	sp, #116	@ 0x74
 800779e:	d510      	bpl.n	80077c2 <_svfiprintf_r+0x36>
 80077a0:	690b      	ldr	r3, [r1, #16]
 80077a2:	b973      	cbnz	r3, 80077c2 <_svfiprintf_r+0x36>
 80077a4:	2140      	movs	r1, #64	@ 0x40
 80077a6:	f7fe fbe5 	bl	8005f74 <_malloc_r>
 80077aa:	6028      	str	r0, [r5, #0]
 80077ac:	6128      	str	r0, [r5, #16]
 80077ae:	b930      	cbnz	r0, 80077be <_svfiprintf_r+0x32>
 80077b0:	230c      	movs	r3, #12
 80077b2:	603b      	str	r3, [r7, #0]
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295
 80077b8:	b01d      	add	sp, #116	@ 0x74
 80077ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077be:	2340      	movs	r3, #64	@ 0x40
 80077c0:	616b      	str	r3, [r5, #20]
 80077c2:	2300      	movs	r3, #0
 80077c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80077c6:	2320      	movs	r3, #32
 80077c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80077cc:	2330      	movs	r3, #48	@ 0x30
 80077ce:	f04f 0901 	mov.w	r9, #1
 80077d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80077d6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007970 <_svfiprintf_r+0x1e4>
 80077da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80077de:	4623      	mov	r3, r4
 80077e0:	469a      	mov	sl, r3
 80077e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077e6:	b10a      	cbz	r2, 80077ec <_svfiprintf_r+0x60>
 80077e8:	2a25      	cmp	r2, #37	@ 0x25
 80077ea:	d1f9      	bne.n	80077e0 <_svfiprintf_r+0x54>
 80077ec:	ebba 0b04 	subs.w	fp, sl, r4
 80077f0:	d00b      	beq.n	800780a <_svfiprintf_r+0x7e>
 80077f2:	465b      	mov	r3, fp
 80077f4:	4622      	mov	r2, r4
 80077f6:	4629      	mov	r1, r5
 80077f8:	4638      	mov	r0, r7
 80077fa:	f7ff ff6b 	bl	80076d4 <__ssputs_r>
 80077fe:	3001      	adds	r0, #1
 8007800:	f000 80a7 	beq.w	8007952 <_svfiprintf_r+0x1c6>
 8007804:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007806:	445a      	add	r2, fp
 8007808:	9209      	str	r2, [sp, #36]	@ 0x24
 800780a:	f89a 3000 	ldrb.w	r3, [sl]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 809f 	beq.w	8007952 <_svfiprintf_r+0x1c6>
 8007814:	2300      	movs	r3, #0
 8007816:	f04f 32ff 	mov.w	r2, #4294967295
 800781a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800781e:	f10a 0a01 	add.w	sl, sl, #1
 8007822:	9304      	str	r3, [sp, #16]
 8007824:	9307      	str	r3, [sp, #28]
 8007826:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800782a:	931a      	str	r3, [sp, #104]	@ 0x68
 800782c:	4654      	mov	r4, sl
 800782e:	2205      	movs	r2, #5
 8007830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007834:	484e      	ldr	r0, [pc, #312]	@ (8007970 <_svfiprintf_r+0x1e4>)
 8007836:	f7fd fcc8 	bl	80051ca <memchr>
 800783a:	9a04      	ldr	r2, [sp, #16]
 800783c:	b9d8      	cbnz	r0, 8007876 <_svfiprintf_r+0xea>
 800783e:	06d0      	lsls	r0, r2, #27
 8007840:	bf44      	itt	mi
 8007842:	2320      	movmi	r3, #32
 8007844:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007848:	0711      	lsls	r1, r2, #28
 800784a:	bf44      	itt	mi
 800784c:	232b      	movmi	r3, #43	@ 0x2b
 800784e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007852:	f89a 3000 	ldrb.w	r3, [sl]
 8007856:	2b2a      	cmp	r3, #42	@ 0x2a
 8007858:	d015      	beq.n	8007886 <_svfiprintf_r+0xfa>
 800785a:	4654      	mov	r4, sl
 800785c:	2000      	movs	r0, #0
 800785e:	f04f 0c0a 	mov.w	ip, #10
 8007862:	9a07      	ldr	r2, [sp, #28]
 8007864:	4621      	mov	r1, r4
 8007866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800786a:	3b30      	subs	r3, #48	@ 0x30
 800786c:	2b09      	cmp	r3, #9
 800786e:	d94b      	bls.n	8007908 <_svfiprintf_r+0x17c>
 8007870:	b1b0      	cbz	r0, 80078a0 <_svfiprintf_r+0x114>
 8007872:	9207      	str	r2, [sp, #28]
 8007874:	e014      	b.n	80078a0 <_svfiprintf_r+0x114>
 8007876:	eba0 0308 	sub.w	r3, r0, r8
 800787a:	fa09 f303 	lsl.w	r3, r9, r3
 800787e:	4313      	orrs	r3, r2
 8007880:	46a2      	mov	sl, r4
 8007882:	9304      	str	r3, [sp, #16]
 8007884:	e7d2      	b.n	800782c <_svfiprintf_r+0xa0>
 8007886:	9b03      	ldr	r3, [sp, #12]
 8007888:	1d19      	adds	r1, r3, #4
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	9103      	str	r1, [sp, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	bfbb      	ittet	lt
 8007892:	425b      	neglt	r3, r3
 8007894:	f042 0202 	orrlt.w	r2, r2, #2
 8007898:	9307      	strge	r3, [sp, #28]
 800789a:	9307      	strlt	r3, [sp, #28]
 800789c:	bfb8      	it	lt
 800789e:	9204      	strlt	r2, [sp, #16]
 80078a0:	7823      	ldrb	r3, [r4, #0]
 80078a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80078a4:	d10a      	bne.n	80078bc <_svfiprintf_r+0x130>
 80078a6:	7863      	ldrb	r3, [r4, #1]
 80078a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80078aa:	d132      	bne.n	8007912 <_svfiprintf_r+0x186>
 80078ac:	9b03      	ldr	r3, [sp, #12]
 80078ae:	3402      	adds	r4, #2
 80078b0:	1d1a      	adds	r2, r3, #4
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	9203      	str	r2, [sp, #12]
 80078b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078ba:	9305      	str	r3, [sp, #20]
 80078bc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007974 <_svfiprintf_r+0x1e8>
 80078c0:	2203      	movs	r2, #3
 80078c2:	4650      	mov	r0, sl
 80078c4:	7821      	ldrb	r1, [r4, #0]
 80078c6:	f7fd fc80 	bl	80051ca <memchr>
 80078ca:	b138      	cbz	r0, 80078dc <_svfiprintf_r+0x150>
 80078cc:	2240      	movs	r2, #64	@ 0x40
 80078ce:	9b04      	ldr	r3, [sp, #16]
 80078d0:	eba0 000a 	sub.w	r0, r0, sl
 80078d4:	4082      	lsls	r2, r0
 80078d6:	4313      	orrs	r3, r2
 80078d8:	3401      	adds	r4, #1
 80078da:	9304      	str	r3, [sp, #16]
 80078dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e0:	2206      	movs	r2, #6
 80078e2:	4825      	ldr	r0, [pc, #148]	@ (8007978 <_svfiprintf_r+0x1ec>)
 80078e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078e8:	f7fd fc6f 	bl	80051ca <memchr>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d036      	beq.n	800795e <_svfiprintf_r+0x1d2>
 80078f0:	4b22      	ldr	r3, [pc, #136]	@ (800797c <_svfiprintf_r+0x1f0>)
 80078f2:	bb1b      	cbnz	r3, 800793c <_svfiprintf_r+0x1b0>
 80078f4:	9b03      	ldr	r3, [sp, #12]
 80078f6:	3307      	adds	r3, #7
 80078f8:	f023 0307 	bic.w	r3, r3, #7
 80078fc:	3308      	adds	r3, #8
 80078fe:	9303      	str	r3, [sp, #12]
 8007900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007902:	4433      	add	r3, r6
 8007904:	9309      	str	r3, [sp, #36]	@ 0x24
 8007906:	e76a      	b.n	80077de <_svfiprintf_r+0x52>
 8007908:	460c      	mov	r4, r1
 800790a:	2001      	movs	r0, #1
 800790c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007910:	e7a8      	b.n	8007864 <_svfiprintf_r+0xd8>
 8007912:	2300      	movs	r3, #0
 8007914:	f04f 0c0a 	mov.w	ip, #10
 8007918:	4619      	mov	r1, r3
 800791a:	3401      	adds	r4, #1
 800791c:	9305      	str	r3, [sp, #20]
 800791e:	4620      	mov	r0, r4
 8007920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007924:	3a30      	subs	r2, #48	@ 0x30
 8007926:	2a09      	cmp	r2, #9
 8007928:	d903      	bls.n	8007932 <_svfiprintf_r+0x1a6>
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0c6      	beq.n	80078bc <_svfiprintf_r+0x130>
 800792e:	9105      	str	r1, [sp, #20]
 8007930:	e7c4      	b.n	80078bc <_svfiprintf_r+0x130>
 8007932:	4604      	mov	r4, r0
 8007934:	2301      	movs	r3, #1
 8007936:	fb0c 2101 	mla	r1, ip, r1, r2
 800793a:	e7f0      	b.n	800791e <_svfiprintf_r+0x192>
 800793c:	ab03      	add	r3, sp, #12
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	462a      	mov	r2, r5
 8007942:	4638      	mov	r0, r7
 8007944:	4b0e      	ldr	r3, [pc, #56]	@ (8007980 <_svfiprintf_r+0x1f4>)
 8007946:	a904      	add	r1, sp, #16
 8007948:	f7fc fcaa 	bl	80042a0 <_printf_float>
 800794c:	1c42      	adds	r2, r0, #1
 800794e:	4606      	mov	r6, r0
 8007950:	d1d6      	bne.n	8007900 <_svfiprintf_r+0x174>
 8007952:	89ab      	ldrh	r3, [r5, #12]
 8007954:	065b      	lsls	r3, r3, #25
 8007956:	f53f af2d 	bmi.w	80077b4 <_svfiprintf_r+0x28>
 800795a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800795c:	e72c      	b.n	80077b8 <_svfiprintf_r+0x2c>
 800795e:	ab03      	add	r3, sp, #12
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	462a      	mov	r2, r5
 8007964:	4638      	mov	r0, r7
 8007966:	4b06      	ldr	r3, [pc, #24]	@ (8007980 <_svfiprintf_r+0x1f4>)
 8007968:	a904      	add	r1, sp, #16
 800796a:	f7fc ff37 	bl	80047dc <_printf_i>
 800796e:	e7ed      	b.n	800794c <_svfiprintf_r+0x1c0>
 8007970:	08008d99 	.word	0x08008d99
 8007974:	08008d9f 	.word	0x08008d9f
 8007978:	08008da3 	.word	0x08008da3
 800797c:	080042a1 	.word	0x080042a1
 8007980:	080076d5 	.word	0x080076d5

08007984 <__sflush_r>:
 8007984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	0716      	lsls	r6, r2, #28
 800798c:	4605      	mov	r5, r0
 800798e:	460c      	mov	r4, r1
 8007990:	d454      	bmi.n	8007a3c <__sflush_r+0xb8>
 8007992:	684b      	ldr	r3, [r1, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	dc02      	bgt.n	800799e <__sflush_r+0x1a>
 8007998:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	dd48      	ble.n	8007a30 <__sflush_r+0xac>
 800799e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079a0:	2e00      	cmp	r6, #0
 80079a2:	d045      	beq.n	8007a30 <__sflush_r+0xac>
 80079a4:	2300      	movs	r3, #0
 80079a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80079aa:	682f      	ldr	r7, [r5, #0]
 80079ac:	6a21      	ldr	r1, [r4, #32]
 80079ae:	602b      	str	r3, [r5, #0]
 80079b0:	d030      	beq.n	8007a14 <__sflush_r+0x90>
 80079b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	0759      	lsls	r1, r3, #29
 80079b8:	d505      	bpl.n	80079c6 <__sflush_r+0x42>
 80079ba:	6863      	ldr	r3, [r4, #4]
 80079bc:	1ad2      	subs	r2, r2, r3
 80079be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80079c0:	b10b      	cbz	r3, 80079c6 <__sflush_r+0x42>
 80079c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80079c4:	1ad2      	subs	r2, r2, r3
 80079c6:	2300      	movs	r3, #0
 80079c8:	4628      	mov	r0, r5
 80079ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079cc:	6a21      	ldr	r1, [r4, #32]
 80079ce:	47b0      	blx	r6
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	d106      	bne.n	80079e4 <__sflush_r+0x60>
 80079d6:	6829      	ldr	r1, [r5, #0]
 80079d8:	291d      	cmp	r1, #29
 80079da:	d82b      	bhi.n	8007a34 <__sflush_r+0xb0>
 80079dc:	4a28      	ldr	r2, [pc, #160]	@ (8007a80 <__sflush_r+0xfc>)
 80079de:	410a      	asrs	r2, r1
 80079e0:	07d6      	lsls	r6, r2, #31
 80079e2:	d427      	bmi.n	8007a34 <__sflush_r+0xb0>
 80079e4:	2200      	movs	r2, #0
 80079e6:	6062      	str	r2, [r4, #4]
 80079e8:	6922      	ldr	r2, [r4, #16]
 80079ea:	04d9      	lsls	r1, r3, #19
 80079ec:	6022      	str	r2, [r4, #0]
 80079ee:	d504      	bpl.n	80079fa <__sflush_r+0x76>
 80079f0:	1c42      	adds	r2, r0, #1
 80079f2:	d101      	bne.n	80079f8 <__sflush_r+0x74>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b903      	cbnz	r3, 80079fa <__sflush_r+0x76>
 80079f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80079fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079fc:	602f      	str	r7, [r5, #0]
 80079fe:	b1b9      	cbz	r1, 8007a30 <__sflush_r+0xac>
 8007a00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a04:	4299      	cmp	r1, r3
 8007a06:	d002      	beq.n	8007a0e <__sflush_r+0x8a>
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f7fe fa41 	bl	8005e90 <_free_r>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a12:	e00d      	b.n	8007a30 <__sflush_r+0xac>
 8007a14:	2301      	movs	r3, #1
 8007a16:	4628      	mov	r0, r5
 8007a18:	47b0      	blx	r6
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	1c50      	adds	r0, r2, #1
 8007a1e:	d1c9      	bne.n	80079b4 <__sflush_r+0x30>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0c6      	beq.n	80079b4 <__sflush_r+0x30>
 8007a26:	2b1d      	cmp	r3, #29
 8007a28:	d001      	beq.n	8007a2e <__sflush_r+0xaa>
 8007a2a:	2b16      	cmp	r3, #22
 8007a2c:	d11d      	bne.n	8007a6a <__sflush_r+0xe6>
 8007a2e:	602f      	str	r7, [r5, #0]
 8007a30:	2000      	movs	r0, #0
 8007a32:	e021      	b.n	8007a78 <__sflush_r+0xf4>
 8007a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a38:	b21b      	sxth	r3, r3
 8007a3a:	e01a      	b.n	8007a72 <__sflush_r+0xee>
 8007a3c:	690f      	ldr	r7, [r1, #16]
 8007a3e:	2f00      	cmp	r7, #0
 8007a40:	d0f6      	beq.n	8007a30 <__sflush_r+0xac>
 8007a42:	0793      	lsls	r3, r2, #30
 8007a44:	bf18      	it	ne
 8007a46:	2300      	movne	r3, #0
 8007a48:	680e      	ldr	r6, [r1, #0]
 8007a4a:	bf08      	it	eq
 8007a4c:	694b      	ldreq	r3, [r1, #20]
 8007a4e:	1bf6      	subs	r6, r6, r7
 8007a50:	600f      	str	r7, [r1, #0]
 8007a52:	608b      	str	r3, [r1, #8]
 8007a54:	2e00      	cmp	r6, #0
 8007a56:	ddeb      	ble.n	8007a30 <__sflush_r+0xac>
 8007a58:	4633      	mov	r3, r6
 8007a5a:	463a      	mov	r2, r7
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	6a21      	ldr	r1, [r4, #32]
 8007a60:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007a64:	47e0      	blx	ip
 8007a66:	2800      	cmp	r0, #0
 8007a68:	dc07      	bgt.n	8007a7a <__sflush_r+0xf6>
 8007a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295
 8007a76:	81a3      	strh	r3, [r4, #12]
 8007a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a7a:	4407      	add	r7, r0
 8007a7c:	1a36      	subs	r6, r6, r0
 8007a7e:	e7e9      	b.n	8007a54 <__sflush_r+0xd0>
 8007a80:	dfbffffe 	.word	0xdfbffffe

08007a84 <_fflush_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	690b      	ldr	r3, [r1, #16]
 8007a88:	4605      	mov	r5, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	b913      	cbnz	r3, 8007a94 <_fflush_r+0x10>
 8007a8e:	2500      	movs	r5, #0
 8007a90:	4628      	mov	r0, r5
 8007a92:	bd38      	pop	{r3, r4, r5, pc}
 8007a94:	b118      	cbz	r0, 8007a9e <_fflush_r+0x1a>
 8007a96:	6a03      	ldr	r3, [r0, #32]
 8007a98:	b90b      	cbnz	r3, 8007a9e <_fflush_r+0x1a>
 8007a9a:	f7fd fa5b 	bl	8004f54 <__sinit>
 8007a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d0f3      	beq.n	8007a8e <_fflush_r+0xa>
 8007aa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007aa8:	07d0      	lsls	r0, r2, #31
 8007aaa:	d404      	bmi.n	8007ab6 <_fflush_r+0x32>
 8007aac:	0599      	lsls	r1, r3, #22
 8007aae:	d402      	bmi.n	8007ab6 <_fflush_r+0x32>
 8007ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ab2:	f7fd fb88 	bl	80051c6 <__retarget_lock_acquire_recursive>
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	4621      	mov	r1, r4
 8007aba:	f7ff ff63 	bl	8007984 <__sflush_r>
 8007abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	07da      	lsls	r2, r3, #31
 8007ac4:	d4e4      	bmi.n	8007a90 <_fflush_r+0xc>
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	059b      	lsls	r3, r3, #22
 8007aca:	d4e1      	bmi.n	8007a90 <_fflush_r+0xc>
 8007acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ace:	f7fd fb7b 	bl	80051c8 <__retarget_lock_release_recursive>
 8007ad2:	e7dd      	b.n	8007a90 <_fflush_r+0xc>

08007ad4 <memmove>:
 8007ad4:	4288      	cmp	r0, r1
 8007ad6:	b510      	push	{r4, lr}
 8007ad8:	eb01 0402 	add.w	r4, r1, r2
 8007adc:	d902      	bls.n	8007ae4 <memmove+0x10>
 8007ade:	4284      	cmp	r4, r0
 8007ae0:	4623      	mov	r3, r4
 8007ae2:	d807      	bhi.n	8007af4 <memmove+0x20>
 8007ae4:	1e43      	subs	r3, r0, #1
 8007ae6:	42a1      	cmp	r1, r4
 8007ae8:	d008      	beq.n	8007afc <memmove+0x28>
 8007aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007af2:	e7f8      	b.n	8007ae6 <memmove+0x12>
 8007af4:	4601      	mov	r1, r0
 8007af6:	4402      	add	r2, r0
 8007af8:	428a      	cmp	r2, r1
 8007afa:	d100      	bne.n	8007afe <memmove+0x2a>
 8007afc:	bd10      	pop	{r4, pc}
 8007afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b06:	e7f7      	b.n	8007af8 <memmove+0x24>

08007b08 <strncmp>:
 8007b08:	b510      	push	{r4, lr}
 8007b0a:	b16a      	cbz	r2, 8007b28 <strncmp+0x20>
 8007b0c:	3901      	subs	r1, #1
 8007b0e:	1884      	adds	r4, r0, r2
 8007b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d103      	bne.n	8007b24 <strncmp+0x1c>
 8007b1c:	42a0      	cmp	r0, r4
 8007b1e:	d001      	beq.n	8007b24 <strncmp+0x1c>
 8007b20:	2a00      	cmp	r2, #0
 8007b22:	d1f5      	bne.n	8007b10 <strncmp+0x8>
 8007b24:	1ad0      	subs	r0, r2, r3
 8007b26:	bd10      	pop	{r4, pc}
 8007b28:	4610      	mov	r0, r2
 8007b2a:	e7fc      	b.n	8007b26 <strncmp+0x1e>

08007b2c <_sbrk_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	2300      	movs	r3, #0
 8007b30:	4d05      	ldr	r5, [pc, #20]	@ (8007b48 <_sbrk_r+0x1c>)
 8007b32:	4604      	mov	r4, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	602b      	str	r3, [r5, #0]
 8007b38:	f7fa f808 	bl	8001b4c <_sbrk>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d102      	bne.n	8007b46 <_sbrk_r+0x1a>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	b103      	cbz	r3, 8007b46 <_sbrk_r+0x1a>
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	2000043c 	.word	0x2000043c

08007b4c <memcpy>:
 8007b4c:	440a      	add	r2, r1
 8007b4e:	4291      	cmp	r1, r2
 8007b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b54:	d100      	bne.n	8007b58 <memcpy+0xc>
 8007b56:	4770      	bx	lr
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b5e:	4291      	cmp	r1, r2
 8007b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b64:	d1f9      	bne.n	8007b5a <memcpy+0xe>
 8007b66:	bd10      	pop	{r4, pc}

08007b68 <nan>:
 8007b68:	2000      	movs	r0, #0
 8007b6a:	4901      	ldr	r1, [pc, #4]	@ (8007b70 <nan+0x8>)
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	7ff80000 	.word	0x7ff80000

08007b74 <__assert_func>:
 8007b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b76:	4614      	mov	r4, r2
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4b09      	ldr	r3, [pc, #36]	@ (8007ba0 <__assert_func+0x2c>)
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68d8      	ldr	r0, [r3, #12]
 8007b82:	b954      	cbnz	r4, 8007b9a <__assert_func+0x26>
 8007b84:	4b07      	ldr	r3, [pc, #28]	@ (8007ba4 <__assert_func+0x30>)
 8007b86:	461c      	mov	r4, r3
 8007b88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b8c:	9100      	str	r1, [sp, #0]
 8007b8e:	462b      	mov	r3, r5
 8007b90:	4905      	ldr	r1, [pc, #20]	@ (8007ba8 <__assert_func+0x34>)
 8007b92:	f000 fba7 	bl	80082e4 <fiprintf>
 8007b96:	f000 fbb7 	bl	8008308 <abort>
 8007b9a:	4b04      	ldr	r3, [pc, #16]	@ (8007bac <__assert_func+0x38>)
 8007b9c:	e7f4      	b.n	8007b88 <__assert_func+0x14>
 8007b9e:	bf00      	nop
 8007ba0:	20000018 	.word	0x20000018
 8007ba4:	08008ded 	.word	0x08008ded
 8007ba8:	08008dbf 	.word	0x08008dbf
 8007bac:	08008db2 	.word	0x08008db2

08007bb0 <_calloc_r>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	fba1 5402 	umull	r5, r4, r1, r2
 8007bb6:	b93c      	cbnz	r4, 8007bc8 <_calloc_r+0x18>
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7fe f9db 	bl	8005f74 <_malloc_r>
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	b928      	cbnz	r0, 8007bce <_calloc_r+0x1e>
 8007bc2:	2600      	movs	r6, #0
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	220c      	movs	r2, #12
 8007bca:	6002      	str	r2, [r0, #0]
 8007bcc:	e7f9      	b.n	8007bc2 <_calloc_r+0x12>
 8007bce:	462a      	mov	r2, r5
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	f7fd fa58 	bl	8005086 <memset>
 8007bd6:	e7f5      	b.n	8007bc4 <_calloc_r+0x14>

08007bd8 <rshift>:
 8007bd8:	6903      	ldr	r3, [r0, #16]
 8007bda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007be2:	f100 0414 	add.w	r4, r0, #20
 8007be6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007bea:	dd46      	ble.n	8007c7a <rshift+0xa2>
 8007bec:	f011 011f 	ands.w	r1, r1, #31
 8007bf0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007bf4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007bf8:	d10c      	bne.n	8007c14 <rshift+0x3c>
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	f100 0710 	add.w	r7, r0, #16
 8007c00:	42b1      	cmp	r1, r6
 8007c02:	d335      	bcc.n	8007c70 <rshift+0x98>
 8007c04:	1a9b      	subs	r3, r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	1eea      	subs	r2, r5, #3
 8007c0a:	4296      	cmp	r6, r2
 8007c0c:	bf38      	it	cc
 8007c0e:	2300      	movcc	r3, #0
 8007c10:	4423      	add	r3, r4
 8007c12:	e015      	b.n	8007c40 <rshift+0x68>
 8007c14:	46a1      	mov	r9, r4
 8007c16:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007c1a:	f1c1 0820 	rsb	r8, r1, #32
 8007c1e:	40cf      	lsrs	r7, r1
 8007c20:	f105 0e04 	add.w	lr, r5, #4
 8007c24:	4576      	cmp	r6, lr
 8007c26:	46f4      	mov	ip, lr
 8007c28:	d816      	bhi.n	8007c58 <rshift+0x80>
 8007c2a:	1a9a      	subs	r2, r3, r2
 8007c2c:	0092      	lsls	r2, r2, #2
 8007c2e:	3a04      	subs	r2, #4
 8007c30:	3501      	adds	r5, #1
 8007c32:	42ae      	cmp	r6, r5
 8007c34:	bf38      	it	cc
 8007c36:	2200      	movcc	r2, #0
 8007c38:	18a3      	adds	r3, r4, r2
 8007c3a:	50a7      	str	r7, [r4, r2]
 8007c3c:	b107      	cbz	r7, 8007c40 <rshift+0x68>
 8007c3e:	3304      	adds	r3, #4
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	eba3 0204 	sub.w	r2, r3, r4
 8007c46:	bf08      	it	eq
 8007c48:	2300      	moveq	r3, #0
 8007c4a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007c4e:	6102      	str	r2, [r0, #16]
 8007c50:	bf08      	it	eq
 8007c52:	6143      	streq	r3, [r0, #20]
 8007c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c58:	f8dc c000 	ldr.w	ip, [ip]
 8007c5c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c60:	ea4c 0707 	orr.w	r7, ip, r7
 8007c64:	f849 7b04 	str.w	r7, [r9], #4
 8007c68:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c6c:	40cf      	lsrs	r7, r1
 8007c6e:	e7d9      	b.n	8007c24 <rshift+0x4c>
 8007c70:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c74:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c78:	e7c2      	b.n	8007c00 <rshift+0x28>
 8007c7a:	4623      	mov	r3, r4
 8007c7c:	e7e0      	b.n	8007c40 <rshift+0x68>

08007c7e <__hexdig_fun>:
 8007c7e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007c82:	2b09      	cmp	r3, #9
 8007c84:	d802      	bhi.n	8007c8c <__hexdig_fun+0xe>
 8007c86:	3820      	subs	r0, #32
 8007c88:	b2c0      	uxtb	r0, r0
 8007c8a:	4770      	bx	lr
 8007c8c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007c90:	2b05      	cmp	r3, #5
 8007c92:	d801      	bhi.n	8007c98 <__hexdig_fun+0x1a>
 8007c94:	3847      	subs	r0, #71	@ 0x47
 8007c96:	e7f7      	b.n	8007c88 <__hexdig_fun+0xa>
 8007c98:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007c9c:	2b05      	cmp	r3, #5
 8007c9e:	d801      	bhi.n	8007ca4 <__hexdig_fun+0x26>
 8007ca0:	3827      	subs	r0, #39	@ 0x27
 8007ca2:	e7f1      	b.n	8007c88 <__hexdig_fun+0xa>
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	4770      	bx	lr

08007ca8 <__gethex>:
 8007ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cac:	468a      	mov	sl, r1
 8007cae:	4690      	mov	r8, r2
 8007cb0:	b085      	sub	sp, #20
 8007cb2:	9302      	str	r3, [sp, #8]
 8007cb4:	680b      	ldr	r3, [r1, #0]
 8007cb6:	9001      	str	r0, [sp, #4]
 8007cb8:	1c9c      	adds	r4, r3, #2
 8007cba:	46a1      	mov	r9, r4
 8007cbc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007cc0:	2830      	cmp	r0, #48	@ 0x30
 8007cc2:	d0fa      	beq.n	8007cba <__gethex+0x12>
 8007cc4:	eba9 0303 	sub.w	r3, r9, r3
 8007cc8:	f1a3 0b02 	sub.w	fp, r3, #2
 8007ccc:	f7ff ffd7 	bl	8007c7e <__hexdig_fun>
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d168      	bne.n	8007da8 <__gethex+0x100>
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	4648      	mov	r0, r9
 8007cda:	499f      	ldr	r1, [pc, #636]	@ (8007f58 <__gethex+0x2b0>)
 8007cdc:	f7ff ff14 	bl	8007b08 <strncmp>
 8007ce0:	4607      	mov	r7, r0
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d167      	bne.n	8007db6 <__gethex+0x10e>
 8007ce6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007cea:	4626      	mov	r6, r4
 8007cec:	f7ff ffc7 	bl	8007c7e <__hexdig_fun>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d062      	beq.n	8007dba <__gethex+0x112>
 8007cf4:	4623      	mov	r3, r4
 8007cf6:	7818      	ldrb	r0, [r3, #0]
 8007cf8:	4699      	mov	r9, r3
 8007cfa:	2830      	cmp	r0, #48	@ 0x30
 8007cfc:	f103 0301 	add.w	r3, r3, #1
 8007d00:	d0f9      	beq.n	8007cf6 <__gethex+0x4e>
 8007d02:	f7ff ffbc 	bl	8007c7e <__hexdig_fun>
 8007d06:	fab0 f580 	clz	r5, r0
 8007d0a:	f04f 0b01 	mov.w	fp, #1
 8007d0e:	096d      	lsrs	r5, r5, #5
 8007d10:	464a      	mov	r2, r9
 8007d12:	4616      	mov	r6, r2
 8007d14:	7830      	ldrb	r0, [r6, #0]
 8007d16:	3201      	adds	r2, #1
 8007d18:	f7ff ffb1 	bl	8007c7e <__hexdig_fun>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d1f8      	bne.n	8007d12 <__gethex+0x6a>
 8007d20:	2201      	movs	r2, #1
 8007d22:	4630      	mov	r0, r6
 8007d24:	498c      	ldr	r1, [pc, #560]	@ (8007f58 <__gethex+0x2b0>)
 8007d26:	f7ff feef 	bl	8007b08 <strncmp>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d13f      	bne.n	8007dae <__gethex+0x106>
 8007d2e:	b944      	cbnz	r4, 8007d42 <__gethex+0x9a>
 8007d30:	1c74      	adds	r4, r6, #1
 8007d32:	4622      	mov	r2, r4
 8007d34:	4616      	mov	r6, r2
 8007d36:	7830      	ldrb	r0, [r6, #0]
 8007d38:	3201      	adds	r2, #1
 8007d3a:	f7ff ffa0 	bl	8007c7e <__hexdig_fun>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d1f8      	bne.n	8007d34 <__gethex+0x8c>
 8007d42:	1ba4      	subs	r4, r4, r6
 8007d44:	00a7      	lsls	r7, r4, #2
 8007d46:	7833      	ldrb	r3, [r6, #0]
 8007d48:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007d4c:	2b50      	cmp	r3, #80	@ 0x50
 8007d4e:	d13e      	bne.n	8007dce <__gethex+0x126>
 8007d50:	7873      	ldrb	r3, [r6, #1]
 8007d52:	2b2b      	cmp	r3, #43	@ 0x2b
 8007d54:	d033      	beq.n	8007dbe <__gethex+0x116>
 8007d56:	2b2d      	cmp	r3, #45	@ 0x2d
 8007d58:	d034      	beq.n	8007dc4 <__gethex+0x11c>
 8007d5a:	2400      	movs	r4, #0
 8007d5c:	1c71      	adds	r1, r6, #1
 8007d5e:	7808      	ldrb	r0, [r1, #0]
 8007d60:	f7ff ff8d 	bl	8007c7e <__hexdig_fun>
 8007d64:	1e43      	subs	r3, r0, #1
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b18      	cmp	r3, #24
 8007d6a:	d830      	bhi.n	8007dce <__gethex+0x126>
 8007d6c:	f1a0 0210 	sub.w	r2, r0, #16
 8007d70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d74:	f7ff ff83 	bl	8007c7e <__hexdig_fun>
 8007d78:	f100 3cff 	add.w	ip, r0, #4294967295
 8007d7c:	fa5f fc8c 	uxtb.w	ip, ip
 8007d80:	f1bc 0f18 	cmp.w	ip, #24
 8007d84:	f04f 030a 	mov.w	r3, #10
 8007d88:	d91e      	bls.n	8007dc8 <__gethex+0x120>
 8007d8a:	b104      	cbz	r4, 8007d8e <__gethex+0xe6>
 8007d8c:	4252      	negs	r2, r2
 8007d8e:	4417      	add	r7, r2
 8007d90:	f8ca 1000 	str.w	r1, [sl]
 8007d94:	b1ed      	cbz	r5, 8007dd2 <__gethex+0x12a>
 8007d96:	f1bb 0f00 	cmp.w	fp, #0
 8007d9a:	bf0c      	ite	eq
 8007d9c:	2506      	moveq	r5, #6
 8007d9e:	2500      	movne	r5, #0
 8007da0:	4628      	mov	r0, r5
 8007da2:	b005      	add	sp, #20
 8007da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da8:	2500      	movs	r5, #0
 8007daa:	462c      	mov	r4, r5
 8007dac:	e7b0      	b.n	8007d10 <__gethex+0x68>
 8007dae:	2c00      	cmp	r4, #0
 8007db0:	d1c7      	bne.n	8007d42 <__gethex+0x9a>
 8007db2:	4627      	mov	r7, r4
 8007db4:	e7c7      	b.n	8007d46 <__gethex+0x9e>
 8007db6:	464e      	mov	r6, r9
 8007db8:	462f      	mov	r7, r5
 8007dba:	2501      	movs	r5, #1
 8007dbc:	e7c3      	b.n	8007d46 <__gethex+0x9e>
 8007dbe:	2400      	movs	r4, #0
 8007dc0:	1cb1      	adds	r1, r6, #2
 8007dc2:	e7cc      	b.n	8007d5e <__gethex+0xb6>
 8007dc4:	2401      	movs	r4, #1
 8007dc6:	e7fb      	b.n	8007dc0 <__gethex+0x118>
 8007dc8:	fb03 0002 	mla	r0, r3, r2, r0
 8007dcc:	e7ce      	b.n	8007d6c <__gethex+0xc4>
 8007dce:	4631      	mov	r1, r6
 8007dd0:	e7de      	b.n	8007d90 <__gethex+0xe8>
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	eba6 0309 	sub.w	r3, r6, r9
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	2b07      	cmp	r3, #7
 8007ddc:	dc0a      	bgt.n	8007df4 <__gethex+0x14c>
 8007dde:	9801      	ldr	r0, [sp, #4]
 8007de0:	f7fe f954 	bl	800608c <_Balloc>
 8007de4:	4604      	mov	r4, r0
 8007de6:	b940      	cbnz	r0, 8007dfa <__gethex+0x152>
 8007de8:	4602      	mov	r2, r0
 8007dea:	21e4      	movs	r1, #228	@ 0xe4
 8007dec:	4b5b      	ldr	r3, [pc, #364]	@ (8007f5c <__gethex+0x2b4>)
 8007dee:	485c      	ldr	r0, [pc, #368]	@ (8007f60 <__gethex+0x2b8>)
 8007df0:	f7ff fec0 	bl	8007b74 <__assert_func>
 8007df4:	3101      	adds	r1, #1
 8007df6:	105b      	asrs	r3, r3, #1
 8007df8:	e7ef      	b.n	8007dda <__gethex+0x132>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f100 0a14 	add.w	sl, r0, #20
 8007e00:	4655      	mov	r5, sl
 8007e02:	469b      	mov	fp, r3
 8007e04:	45b1      	cmp	r9, r6
 8007e06:	d337      	bcc.n	8007e78 <__gethex+0x1d0>
 8007e08:	f845 bb04 	str.w	fp, [r5], #4
 8007e0c:	eba5 050a 	sub.w	r5, r5, sl
 8007e10:	10ad      	asrs	r5, r5, #2
 8007e12:	6125      	str	r5, [r4, #16]
 8007e14:	4658      	mov	r0, fp
 8007e16:	f7fe fa2b 	bl	8006270 <__hi0bits>
 8007e1a:	016d      	lsls	r5, r5, #5
 8007e1c:	f8d8 6000 	ldr.w	r6, [r8]
 8007e20:	1a2d      	subs	r5, r5, r0
 8007e22:	42b5      	cmp	r5, r6
 8007e24:	dd54      	ble.n	8007ed0 <__gethex+0x228>
 8007e26:	1bad      	subs	r5, r5, r6
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f7fe fdb3 	bl	8006996 <__any_on>
 8007e30:	4681      	mov	r9, r0
 8007e32:	b178      	cbz	r0, 8007e54 <__gethex+0x1ac>
 8007e34:	f04f 0901 	mov.w	r9, #1
 8007e38:	1e6b      	subs	r3, r5, #1
 8007e3a:	1159      	asrs	r1, r3, #5
 8007e3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007e40:	f003 021f 	and.w	r2, r3, #31
 8007e44:	fa09 f202 	lsl.w	r2, r9, r2
 8007e48:	420a      	tst	r2, r1
 8007e4a:	d003      	beq.n	8007e54 <__gethex+0x1ac>
 8007e4c:	454b      	cmp	r3, r9
 8007e4e:	dc36      	bgt.n	8007ebe <__gethex+0x216>
 8007e50:	f04f 0902 	mov.w	r9, #2
 8007e54:	4629      	mov	r1, r5
 8007e56:	4620      	mov	r0, r4
 8007e58:	f7ff febe 	bl	8007bd8 <rshift>
 8007e5c:	442f      	add	r7, r5
 8007e5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e62:	42bb      	cmp	r3, r7
 8007e64:	da42      	bge.n	8007eec <__gethex+0x244>
 8007e66:	4621      	mov	r1, r4
 8007e68:	9801      	ldr	r0, [sp, #4]
 8007e6a:	f7fe f94f 	bl	800610c <_Bfree>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e72:	25a3      	movs	r5, #163	@ 0xa3
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	e793      	b.n	8007da0 <__gethex+0xf8>
 8007e78:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007e7c:	2a2e      	cmp	r2, #46	@ 0x2e
 8007e7e:	d012      	beq.n	8007ea6 <__gethex+0x1fe>
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d104      	bne.n	8007e8e <__gethex+0x1e6>
 8007e84:	f845 bb04 	str.w	fp, [r5], #4
 8007e88:	f04f 0b00 	mov.w	fp, #0
 8007e8c:	465b      	mov	r3, fp
 8007e8e:	7830      	ldrb	r0, [r6, #0]
 8007e90:	9303      	str	r3, [sp, #12]
 8007e92:	f7ff fef4 	bl	8007c7e <__hexdig_fun>
 8007e96:	9b03      	ldr	r3, [sp, #12]
 8007e98:	f000 000f 	and.w	r0, r0, #15
 8007e9c:	4098      	lsls	r0, r3
 8007e9e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	e7ae      	b.n	8007e04 <__gethex+0x15c>
 8007ea6:	45b1      	cmp	r9, r6
 8007ea8:	d8ea      	bhi.n	8007e80 <__gethex+0x1d8>
 8007eaa:	2201      	movs	r2, #1
 8007eac:	4630      	mov	r0, r6
 8007eae:	492a      	ldr	r1, [pc, #168]	@ (8007f58 <__gethex+0x2b0>)
 8007eb0:	9303      	str	r3, [sp, #12]
 8007eb2:	f7ff fe29 	bl	8007b08 <strncmp>
 8007eb6:	9b03      	ldr	r3, [sp, #12]
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d1e1      	bne.n	8007e80 <__gethex+0x1d8>
 8007ebc:	e7a2      	b.n	8007e04 <__gethex+0x15c>
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	1ea9      	subs	r1, r5, #2
 8007ec2:	f7fe fd68 	bl	8006996 <__any_on>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d0c2      	beq.n	8007e50 <__gethex+0x1a8>
 8007eca:	f04f 0903 	mov.w	r9, #3
 8007ece:	e7c1      	b.n	8007e54 <__gethex+0x1ac>
 8007ed0:	da09      	bge.n	8007ee6 <__gethex+0x23e>
 8007ed2:	1b75      	subs	r5, r6, r5
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	462a      	mov	r2, r5
 8007ed8:	9801      	ldr	r0, [sp, #4]
 8007eda:	f7fe fb2d 	bl	8006538 <__lshift>
 8007ede:	4604      	mov	r4, r0
 8007ee0:	1b7f      	subs	r7, r7, r5
 8007ee2:	f100 0a14 	add.w	sl, r0, #20
 8007ee6:	f04f 0900 	mov.w	r9, #0
 8007eea:	e7b8      	b.n	8007e5e <__gethex+0x1b6>
 8007eec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007ef0:	42bd      	cmp	r5, r7
 8007ef2:	dd6f      	ble.n	8007fd4 <__gethex+0x32c>
 8007ef4:	1bed      	subs	r5, r5, r7
 8007ef6:	42ae      	cmp	r6, r5
 8007ef8:	dc34      	bgt.n	8007f64 <__gethex+0x2bc>
 8007efa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d022      	beq.n	8007f48 <__gethex+0x2a0>
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d024      	beq.n	8007f50 <__gethex+0x2a8>
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d115      	bne.n	8007f36 <__gethex+0x28e>
 8007f0a:	42ae      	cmp	r6, r5
 8007f0c:	d113      	bne.n	8007f36 <__gethex+0x28e>
 8007f0e:	2e01      	cmp	r6, #1
 8007f10:	d10b      	bne.n	8007f2a <__gethex+0x282>
 8007f12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007f16:	9a02      	ldr	r2, [sp, #8]
 8007f18:	2562      	movs	r5, #98	@ 0x62
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	6123      	str	r3, [r4, #16]
 8007f20:	f8ca 3000 	str.w	r3, [sl]
 8007f24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f26:	601c      	str	r4, [r3, #0]
 8007f28:	e73a      	b.n	8007da0 <__gethex+0xf8>
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	1e71      	subs	r1, r6, #1
 8007f2e:	f7fe fd32 	bl	8006996 <__any_on>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d1ed      	bne.n	8007f12 <__gethex+0x26a>
 8007f36:	4621      	mov	r1, r4
 8007f38:	9801      	ldr	r0, [sp, #4]
 8007f3a:	f7fe f8e7 	bl	800610c <_Bfree>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f42:	2550      	movs	r5, #80	@ 0x50
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	e72b      	b.n	8007da0 <__gethex+0xf8>
 8007f48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1f3      	bne.n	8007f36 <__gethex+0x28e>
 8007f4e:	e7e0      	b.n	8007f12 <__gethex+0x26a>
 8007f50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1dd      	bne.n	8007f12 <__gethex+0x26a>
 8007f56:	e7ee      	b.n	8007f36 <__gethex+0x28e>
 8007f58:	08008c40 	.word	0x08008c40
 8007f5c:	08008ad3 	.word	0x08008ad3
 8007f60:	08008dee 	.word	0x08008dee
 8007f64:	1e6f      	subs	r7, r5, #1
 8007f66:	f1b9 0f00 	cmp.w	r9, #0
 8007f6a:	d130      	bne.n	8007fce <__gethex+0x326>
 8007f6c:	b127      	cbz	r7, 8007f78 <__gethex+0x2d0>
 8007f6e:	4639      	mov	r1, r7
 8007f70:	4620      	mov	r0, r4
 8007f72:	f7fe fd10 	bl	8006996 <__any_on>
 8007f76:	4681      	mov	r9, r0
 8007f78:	2301      	movs	r3, #1
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	1b76      	subs	r6, r6, r5
 8007f7e:	2502      	movs	r5, #2
 8007f80:	117a      	asrs	r2, r7, #5
 8007f82:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007f86:	f007 071f 	and.w	r7, r7, #31
 8007f8a:	40bb      	lsls	r3, r7
 8007f8c:	4213      	tst	r3, r2
 8007f8e:	4620      	mov	r0, r4
 8007f90:	bf18      	it	ne
 8007f92:	f049 0902 	orrne.w	r9, r9, #2
 8007f96:	f7ff fe1f 	bl	8007bd8 <rshift>
 8007f9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007f9e:	f1b9 0f00 	cmp.w	r9, #0
 8007fa2:	d047      	beq.n	8008034 <__gethex+0x38c>
 8007fa4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d015      	beq.n	8007fd8 <__gethex+0x330>
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d017      	beq.n	8007fe0 <__gethex+0x338>
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d109      	bne.n	8007fc8 <__gethex+0x320>
 8007fb4:	f019 0f02 	tst.w	r9, #2
 8007fb8:	d006      	beq.n	8007fc8 <__gethex+0x320>
 8007fba:	f8da 3000 	ldr.w	r3, [sl]
 8007fbe:	ea49 0903 	orr.w	r9, r9, r3
 8007fc2:	f019 0f01 	tst.w	r9, #1
 8007fc6:	d10e      	bne.n	8007fe6 <__gethex+0x33e>
 8007fc8:	f045 0510 	orr.w	r5, r5, #16
 8007fcc:	e032      	b.n	8008034 <__gethex+0x38c>
 8007fce:	f04f 0901 	mov.w	r9, #1
 8007fd2:	e7d1      	b.n	8007f78 <__gethex+0x2d0>
 8007fd4:	2501      	movs	r5, #1
 8007fd6:	e7e2      	b.n	8007f9e <__gethex+0x2f6>
 8007fd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fda:	f1c3 0301 	rsb	r3, r3, #1
 8007fde:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007fe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0f0      	beq.n	8007fc8 <__gethex+0x320>
 8007fe6:	f04f 0c00 	mov.w	ip, #0
 8007fea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007fee:	f104 0314 	add.w	r3, r4, #20
 8007ff2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007ff6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008000:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008004:	d01b      	beq.n	800803e <__gethex+0x396>
 8008006:	3201      	adds	r2, #1
 8008008:	6002      	str	r2, [r0, #0]
 800800a:	2d02      	cmp	r5, #2
 800800c:	f104 0314 	add.w	r3, r4, #20
 8008010:	d13c      	bne.n	800808c <__gethex+0x3e4>
 8008012:	f8d8 2000 	ldr.w	r2, [r8]
 8008016:	3a01      	subs	r2, #1
 8008018:	42b2      	cmp	r2, r6
 800801a:	d109      	bne.n	8008030 <__gethex+0x388>
 800801c:	2201      	movs	r2, #1
 800801e:	1171      	asrs	r1, r6, #5
 8008020:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008024:	f006 061f 	and.w	r6, r6, #31
 8008028:	fa02 f606 	lsl.w	r6, r2, r6
 800802c:	421e      	tst	r6, r3
 800802e:	d13a      	bne.n	80080a6 <__gethex+0x3fe>
 8008030:	f045 0520 	orr.w	r5, r5, #32
 8008034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008036:	601c      	str	r4, [r3, #0]
 8008038:	9b02      	ldr	r3, [sp, #8]
 800803a:	601f      	str	r7, [r3, #0]
 800803c:	e6b0      	b.n	8007da0 <__gethex+0xf8>
 800803e:	4299      	cmp	r1, r3
 8008040:	f843 cc04 	str.w	ip, [r3, #-4]
 8008044:	d8d9      	bhi.n	8007ffa <__gethex+0x352>
 8008046:	68a3      	ldr	r3, [r4, #8]
 8008048:	459b      	cmp	fp, r3
 800804a:	db17      	blt.n	800807c <__gethex+0x3d4>
 800804c:	6861      	ldr	r1, [r4, #4]
 800804e:	9801      	ldr	r0, [sp, #4]
 8008050:	3101      	adds	r1, #1
 8008052:	f7fe f81b 	bl	800608c <_Balloc>
 8008056:	4681      	mov	r9, r0
 8008058:	b918      	cbnz	r0, 8008062 <__gethex+0x3ba>
 800805a:	4602      	mov	r2, r0
 800805c:	2184      	movs	r1, #132	@ 0x84
 800805e:	4b19      	ldr	r3, [pc, #100]	@ (80080c4 <__gethex+0x41c>)
 8008060:	e6c5      	b.n	8007dee <__gethex+0x146>
 8008062:	6922      	ldr	r2, [r4, #16]
 8008064:	f104 010c 	add.w	r1, r4, #12
 8008068:	3202      	adds	r2, #2
 800806a:	0092      	lsls	r2, r2, #2
 800806c:	300c      	adds	r0, #12
 800806e:	f7ff fd6d 	bl	8007b4c <memcpy>
 8008072:	4621      	mov	r1, r4
 8008074:	9801      	ldr	r0, [sp, #4]
 8008076:	f7fe f849 	bl	800610c <_Bfree>
 800807a:	464c      	mov	r4, r9
 800807c:	6923      	ldr	r3, [r4, #16]
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	6122      	str	r2, [r4, #16]
 8008082:	2201      	movs	r2, #1
 8008084:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008088:	615a      	str	r2, [r3, #20]
 800808a:	e7be      	b.n	800800a <__gethex+0x362>
 800808c:	6922      	ldr	r2, [r4, #16]
 800808e:	455a      	cmp	r2, fp
 8008090:	dd0b      	ble.n	80080aa <__gethex+0x402>
 8008092:	2101      	movs	r1, #1
 8008094:	4620      	mov	r0, r4
 8008096:	f7ff fd9f 	bl	8007bd8 <rshift>
 800809a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800809e:	3701      	adds	r7, #1
 80080a0:	42bb      	cmp	r3, r7
 80080a2:	f6ff aee0 	blt.w	8007e66 <__gethex+0x1be>
 80080a6:	2501      	movs	r5, #1
 80080a8:	e7c2      	b.n	8008030 <__gethex+0x388>
 80080aa:	f016 061f 	ands.w	r6, r6, #31
 80080ae:	d0fa      	beq.n	80080a6 <__gethex+0x3fe>
 80080b0:	4453      	add	r3, sl
 80080b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80080b6:	f7fe f8db 	bl	8006270 <__hi0bits>
 80080ba:	f1c6 0620 	rsb	r6, r6, #32
 80080be:	42b0      	cmp	r0, r6
 80080c0:	dbe7      	blt.n	8008092 <__gethex+0x3ea>
 80080c2:	e7f0      	b.n	80080a6 <__gethex+0x3fe>
 80080c4:	08008ad3 	.word	0x08008ad3

080080c8 <L_shift>:
 80080c8:	f1c2 0208 	rsb	r2, r2, #8
 80080cc:	0092      	lsls	r2, r2, #2
 80080ce:	b570      	push	{r4, r5, r6, lr}
 80080d0:	f1c2 0620 	rsb	r6, r2, #32
 80080d4:	6843      	ldr	r3, [r0, #4]
 80080d6:	6804      	ldr	r4, [r0, #0]
 80080d8:	fa03 f506 	lsl.w	r5, r3, r6
 80080dc:	432c      	orrs	r4, r5
 80080de:	40d3      	lsrs	r3, r2
 80080e0:	6004      	str	r4, [r0, #0]
 80080e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80080e6:	4288      	cmp	r0, r1
 80080e8:	d3f4      	bcc.n	80080d4 <L_shift+0xc>
 80080ea:	bd70      	pop	{r4, r5, r6, pc}

080080ec <__match>:
 80080ec:	b530      	push	{r4, r5, lr}
 80080ee:	6803      	ldr	r3, [r0, #0]
 80080f0:	3301      	adds	r3, #1
 80080f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080f6:	b914      	cbnz	r4, 80080fe <__match+0x12>
 80080f8:	6003      	str	r3, [r0, #0]
 80080fa:	2001      	movs	r0, #1
 80080fc:	bd30      	pop	{r4, r5, pc}
 80080fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008102:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008106:	2d19      	cmp	r5, #25
 8008108:	bf98      	it	ls
 800810a:	3220      	addls	r2, #32
 800810c:	42a2      	cmp	r2, r4
 800810e:	d0f0      	beq.n	80080f2 <__match+0x6>
 8008110:	2000      	movs	r0, #0
 8008112:	e7f3      	b.n	80080fc <__match+0x10>

08008114 <__hexnan>:
 8008114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008118:	2500      	movs	r5, #0
 800811a:	680b      	ldr	r3, [r1, #0]
 800811c:	4682      	mov	sl, r0
 800811e:	115e      	asrs	r6, r3, #5
 8008120:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008124:	f013 031f 	ands.w	r3, r3, #31
 8008128:	bf18      	it	ne
 800812a:	3604      	addne	r6, #4
 800812c:	1f37      	subs	r7, r6, #4
 800812e:	4690      	mov	r8, r2
 8008130:	46b9      	mov	r9, r7
 8008132:	463c      	mov	r4, r7
 8008134:	46ab      	mov	fp, r5
 8008136:	b087      	sub	sp, #28
 8008138:	6801      	ldr	r1, [r0, #0]
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008140:	9502      	str	r5, [sp, #8]
 8008142:	784a      	ldrb	r2, [r1, #1]
 8008144:	1c4b      	adds	r3, r1, #1
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	b342      	cbz	r2, 800819c <__hexnan+0x88>
 800814a:	4610      	mov	r0, r2
 800814c:	9105      	str	r1, [sp, #20]
 800814e:	9204      	str	r2, [sp, #16]
 8008150:	f7ff fd95 	bl	8007c7e <__hexdig_fun>
 8008154:	2800      	cmp	r0, #0
 8008156:	d151      	bne.n	80081fc <__hexnan+0xe8>
 8008158:	9a04      	ldr	r2, [sp, #16]
 800815a:	9905      	ldr	r1, [sp, #20]
 800815c:	2a20      	cmp	r2, #32
 800815e:	d818      	bhi.n	8008192 <__hexnan+0x7e>
 8008160:	9b02      	ldr	r3, [sp, #8]
 8008162:	459b      	cmp	fp, r3
 8008164:	dd13      	ble.n	800818e <__hexnan+0x7a>
 8008166:	454c      	cmp	r4, r9
 8008168:	d206      	bcs.n	8008178 <__hexnan+0x64>
 800816a:	2d07      	cmp	r5, #7
 800816c:	dc04      	bgt.n	8008178 <__hexnan+0x64>
 800816e:	462a      	mov	r2, r5
 8008170:	4649      	mov	r1, r9
 8008172:	4620      	mov	r0, r4
 8008174:	f7ff ffa8 	bl	80080c8 <L_shift>
 8008178:	4544      	cmp	r4, r8
 800817a:	d952      	bls.n	8008222 <__hexnan+0x10e>
 800817c:	2300      	movs	r3, #0
 800817e:	f1a4 0904 	sub.w	r9, r4, #4
 8008182:	f844 3c04 	str.w	r3, [r4, #-4]
 8008186:	461d      	mov	r5, r3
 8008188:	464c      	mov	r4, r9
 800818a:	f8cd b008 	str.w	fp, [sp, #8]
 800818e:	9903      	ldr	r1, [sp, #12]
 8008190:	e7d7      	b.n	8008142 <__hexnan+0x2e>
 8008192:	2a29      	cmp	r2, #41	@ 0x29
 8008194:	d157      	bne.n	8008246 <__hexnan+0x132>
 8008196:	3102      	adds	r1, #2
 8008198:	f8ca 1000 	str.w	r1, [sl]
 800819c:	f1bb 0f00 	cmp.w	fp, #0
 80081a0:	d051      	beq.n	8008246 <__hexnan+0x132>
 80081a2:	454c      	cmp	r4, r9
 80081a4:	d206      	bcs.n	80081b4 <__hexnan+0xa0>
 80081a6:	2d07      	cmp	r5, #7
 80081a8:	dc04      	bgt.n	80081b4 <__hexnan+0xa0>
 80081aa:	462a      	mov	r2, r5
 80081ac:	4649      	mov	r1, r9
 80081ae:	4620      	mov	r0, r4
 80081b0:	f7ff ff8a 	bl	80080c8 <L_shift>
 80081b4:	4544      	cmp	r4, r8
 80081b6:	d936      	bls.n	8008226 <__hexnan+0x112>
 80081b8:	4623      	mov	r3, r4
 80081ba:	f1a8 0204 	sub.w	r2, r8, #4
 80081be:	f853 1b04 	ldr.w	r1, [r3], #4
 80081c2:	429f      	cmp	r7, r3
 80081c4:	f842 1f04 	str.w	r1, [r2, #4]!
 80081c8:	d2f9      	bcs.n	80081be <__hexnan+0xaa>
 80081ca:	1b3b      	subs	r3, r7, r4
 80081cc:	f023 0303 	bic.w	r3, r3, #3
 80081d0:	3304      	adds	r3, #4
 80081d2:	3401      	adds	r4, #1
 80081d4:	3e03      	subs	r6, #3
 80081d6:	42b4      	cmp	r4, r6
 80081d8:	bf88      	it	hi
 80081da:	2304      	movhi	r3, #4
 80081dc:	2200      	movs	r2, #0
 80081de:	4443      	add	r3, r8
 80081e0:	f843 2b04 	str.w	r2, [r3], #4
 80081e4:	429f      	cmp	r7, r3
 80081e6:	d2fb      	bcs.n	80081e0 <__hexnan+0xcc>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	b91b      	cbnz	r3, 80081f4 <__hexnan+0xe0>
 80081ec:	4547      	cmp	r7, r8
 80081ee:	d128      	bne.n	8008242 <__hexnan+0x12e>
 80081f0:	2301      	movs	r3, #1
 80081f2:	603b      	str	r3, [r7, #0]
 80081f4:	2005      	movs	r0, #5
 80081f6:	b007      	add	sp, #28
 80081f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fc:	3501      	adds	r5, #1
 80081fe:	2d08      	cmp	r5, #8
 8008200:	f10b 0b01 	add.w	fp, fp, #1
 8008204:	dd06      	ble.n	8008214 <__hexnan+0x100>
 8008206:	4544      	cmp	r4, r8
 8008208:	d9c1      	bls.n	800818e <__hexnan+0x7a>
 800820a:	2300      	movs	r3, #0
 800820c:	2501      	movs	r5, #1
 800820e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008212:	3c04      	subs	r4, #4
 8008214:	6822      	ldr	r2, [r4, #0]
 8008216:	f000 000f 	and.w	r0, r0, #15
 800821a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800821e:	6020      	str	r0, [r4, #0]
 8008220:	e7b5      	b.n	800818e <__hexnan+0x7a>
 8008222:	2508      	movs	r5, #8
 8008224:	e7b3      	b.n	800818e <__hexnan+0x7a>
 8008226:	9b01      	ldr	r3, [sp, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0dd      	beq.n	80081e8 <__hexnan+0xd4>
 800822c:	f04f 32ff 	mov.w	r2, #4294967295
 8008230:	f1c3 0320 	rsb	r3, r3, #32
 8008234:	40da      	lsrs	r2, r3
 8008236:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800823a:	4013      	ands	r3, r2
 800823c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008240:	e7d2      	b.n	80081e8 <__hexnan+0xd4>
 8008242:	3f04      	subs	r7, #4
 8008244:	e7d0      	b.n	80081e8 <__hexnan+0xd4>
 8008246:	2004      	movs	r0, #4
 8008248:	e7d5      	b.n	80081f6 <__hexnan+0xe2>

0800824a <__ascii_mbtowc>:
 800824a:	b082      	sub	sp, #8
 800824c:	b901      	cbnz	r1, 8008250 <__ascii_mbtowc+0x6>
 800824e:	a901      	add	r1, sp, #4
 8008250:	b142      	cbz	r2, 8008264 <__ascii_mbtowc+0x1a>
 8008252:	b14b      	cbz	r3, 8008268 <__ascii_mbtowc+0x1e>
 8008254:	7813      	ldrb	r3, [r2, #0]
 8008256:	600b      	str	r3, [r1, #0]
 8008258:	7812      	ldrb	r2, [r2, #0]
 800825a:	1e10      	subs	r0, r2, #0
 800825c:	bf18      	it	ne
 800825e:	2001      	movne	r0, #1
 8008260:	b002      	add	sp, #8
 8008262:	4770      	bx	lr
 8008264:	4610      	mov	r0, r2
 8008266:	e7fb      	b.n	8008260 <__ascii_mbtowc+0x16>
 8008268:	f06f 0001 	mvn.w	r0, #1
 800826c:	e7f8      	b.n	8008260 <__ascii_mbtowc+0x16>

0800826e <_realloc_r>:
 800826e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008272:	4680      	mov	r8, r0
 8008274:	4615      	mov	r5, r2
 8008276:	460c      	mov	r4, r1
 8008278:	b921      	cbnz	r1, 8008284 <_realloc_r+0x16>
 800827a:	4611      	mov	r1, r2
 800827c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008280:	f7fd be78 	b.w	8005f74 <_malloc_r>
 8008284:	b92a      	cbnz	r2, 8008292 <_realloc_r+0x24>
 8008286:	f7fd fe03 	bl	8005e90 <_free_r>
 800828a:	2400      	movs	r4, #0
 800828c:	4620      	mov	r0, r4
 800828e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008292:	f000 f840 	bl	8008316 <_malloc_usable_size_r>
 8008296:	4285      	cmp	r5, r0
 8008298:	4606      	mov	r6, r0
 800829a:	d802      	bhi.n	80082a2 <_realloc_r+0x34>
 800829c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80082a0:	d8f4      	bhi.n	800828c <_realloc_r+0x1e>
 80082a2:	4629      	mov	r1, r5
 80082a4:	4640      	mov	r0, r8
 80082a6:	f7fd fe65 	bl	8005f74 <_malloc_r>
 80082aa:	4607      	mov	r7, r0
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d0ec      	beq.n	800828a <_realloc_r+0x1c>
 80082b0:	42b5      	cmp	r5, r6
 80082b2:	462a      	mov	r2, r5
 80082b4:	4621      	mov	r1, r4
 80082b6:	bf28      	it	cs
 80082b8:	4632      	movcs	r2, r6
 80082ba:	f7ff fc47 	bl	8007b4c <memcpy>
 80082be:	4621      	mov	r1, r4
 80082c0:	4640      	mov	r0, r8
 80082c2:	f7fd fde5 	bl	8005e90 <_free_r>
 80082c6:	463c      	mov	r4, r7
 80082c8:	e7e0      	b.n	800828c <_realloc_r+0x1e>

080082ca <__ascii_wctomb>:
 80082ca:	4603      	mov	r3, r0
 80082cc:	4608      	mov	r0, r1
 80082ce:	b141      	cbz	r1, 80082e2 <__ascii_wctomb+0x18>
 80082d0:	2aff      	cmp	r2, #255	@ 0xff
 80082d2:	d904      	bls.n	80082de <__ascii_wctomb+0x14>
 80082d4:	228a      	movs	r2, #138	@ 0x8a
 80082d6:	f04f 30ff 	mov.w	r0, #4294967295
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	4770      	bx	lr
 80082de:	2001      	movs	r0, #1
 80082e0:	700a      	strb	r2, [r1, #0]
 80082e2:	4770      	bx	lr

080082e4 <fiprintf>:
 80082e4:	b40e      	push	{r1, r2, r3}
 80082e6:	b503      	push	{r0, r1, lr}
 80082e8:	4601      	mov	r1, r0
 80082ea:	ab03      	add	r3, sp, #12
 80082ec:	4805      	ldr	r0, [pc, #20]	@ (8008304 <fiprintf+0x20>)
 80082ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f2:	6800      	ldr	r0, [r0, #0]
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	f000 f83d 	bl	8008374 <_vfiprintf_r>
 80082fa:	b002      	add	sp, #8
 80082fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008300:	b003      	add	sp, #12
 8008302:	4770      	bx	lr
 8008304:	20000018 	.word	0x20000018

08008308 <abort>:
 8008308:	2006      	movs	r0, #6
 800830a:	b508      	push	{r3, lr}
 800830c:	f000 fa06 	bl	800871c <raise>
 8008310:	2001      	movs	r0, #1
 8008312:	f7f9 fba6 	bl	8001a62 <_exit>

08008316 <_malloc_usable_size_r>:
 8008316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800831a:	1f18      	subs	r0, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	bfbc      	itt	lt
 8008320:	580b      	ldrlt	r3, [r1, r0]
 8008322:	18c0      	addlt	r0, r0, r3
 8008324:	4770      	bx	lr

08008326 <__sfputc_r>:
 8008326:	6893      	ldr	r3, [r2, #8]
 8008328:	b410      	push	{r4}
 800832a:	3b01      	subs	r3, #1
 800832c:	2b00      	cmp	r3, #0
 800832e:	6093      	str	r3, [r2, #8]
 8008330:	da07      	bge.n	8008342 <__sfputc_r+0x1c>
 8008332:	6994      	ldr	r4, [r2, #24]
 8008334:	42a3      	cmp	r3, r4
 8008336:	db01      	blt.n	800833c <__sfputc_r+0x16>
 8008338:	290a      	cmp	r1, #10
 800833a:	d102      	bne.n	8008342 <__sfputc_r+0x1c>
 800833c:	bc10      	pop	{r4}
 800833e:	f000 b931 	b.w	80085a4 <__swbuf_r>
 8008342:	6813      	ldr	r3, [r2, #0]
 8008344:	1c58      	adds	r0, r3, #1
 8008346:	6010      	str	r0, [r2, #0]
 8008348:	7019      	strb	r1, [r3, #0]
 800834a:	4608      	mov	r0, r1
 800834c:	bc10      	pop	{r4}
 800834e:	4770      	bx	lr

08008350 <__sfputs_r>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	4606      	mov	r6, r0
 8008354:	460f      	mov	r7, r1
 8008356:	4614      	mov	r4, r2
 8008358:	18d5      	adds	r5, r2, r3
 800835a:	42ac      	cmp	r4, r5
 800835c:	d101      	bne.n	8008362 <__sfputs_r+0x12>
 800835e:	2000      	movs	r0, #0
 8008360:	e007      	b.n	8008372 <__sfputs_r+0x22>
 8008362:	463a      	mov	r2, r7
 8008364:	4630      	mov	r0, r6
 8008366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836a:	f7ff ffdc 	bl	8008326 <__sfputc_r>
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	d1f3      	bne.n	800835a <__sfputs_r+0xa>
 8008372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008374 <_vfiprintf_r>:
 8008374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	460d      	mov	r5, r1
 800837a:	4614      	mov	r4, r2
 800837c:	4698      	mov	r8, r3
 800837e:	4606      	mov	r6, r0
 8008380:	b09d      	sub	sp, #116	@ 0x74
 8008382:	b118      	cbz	r0, 800838c <_vfiprintf_r+0x18>
 8008384:	6a03      	ldr	r3, [r0, #32]
 8008386:	b90b      	cbnz	r3, 800838c <_vfiprintf_r+0x18>
 8008388:	f7fc fde4 	bl	8004f54 <__sinit>
 800838c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800838e:	07d9      	lsls	r1, r3, #31
 8008390:	d405      	bmi.n	800839e <_vfiprintf_r+0x2a>
 8008392:	89ab      	ldrh	r3, [r5, #12]
 8008394:	059a      	lsls	r2, r3, #22
 8008396:	d402      	bmi.n	800839e <_vfiprintf_r+0x2a>
 8008398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800839a:	f7fc ff14 	bl	80051c6 <__retarget_lock_acquire_recursive>
 800839e:	89ab      	ldrh	r3, [r5, #12]
 80083a0:	071b      	lsls	r3, r3, #28
 80083a2:	d501      	bpl.n	80083a8 <_vfiprintf_r+0x34>
 80083a4:	692b      	ldr	r3, [r5, #16]
 80083a6:	b99b      	cbnz	r3, 80083d0 <_vfiprintf_r+0x5c>
 80083a8:	4629      	mov	r1, r5
 80083aa:	4630      	mov	r0, r6
 80083ac:	f000 f938 	bl	8008620 <__swsetup_r>
 80083b0:	b170      	cbz	r0, 80083d0 <_vfiprintf_r+0x5c>
 80083b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083b4:	07dc      	lsls	r4, r3, #31
 80083b6:	d504      	bpl.n	80083c2 <_vfiprintf_r+0x4e>
 80083b8:	f04f 30ff 	mov.w	r0, #4294967295
 80083bc:	b01d      	add	sp, #116	@ 0x74
 80083be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c2:	89ab      	ldrh	r3, [r5, #12]
 80083c4:	0598      	lsls	r0, r3, #22
 80083c6:	d4f7      	bmi.n	80083b8 <_vfiprintf_r+0x44>
 80083c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ca:	f7fc fefd 	bl	80051c8 <__retarget_lock_release_recursive>
 80083ce:	e7f3      	b.n	80083b8 <_vfiprintf_r+0x44>
 80083d0:	2300      	movs	r3, #0
 80083d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80083d4:	2320      	movs	r3, #32
 80083d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083da:	2330      	movs	r3, #48	@ 0x30
 80083dc:	f04f 0901 	mov.w	r9, #1
 80083e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80083e4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008590 <_vfiprintf_r+0x21c>
 80083e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083ec:	4623      	mov	r3, r4
 80083ee:	469a      	mov	sl, r3
 80083f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083f4:	b10a      	cbz	r2, 80083fa <_vfiprintf_r+0x86>
 80083f6:	2a25      	cmp	r2, #37	@ 0x25
 80083f8:	d1f9      	bne.n	80083ee <_vfiprintf_r+0x7a>
 80083fa:	ebba 0b04 	subs.w	fp, sl, r4
 80083fe:	d00b      	beq.n	8008418 <_vfiprintf_r+0xa4>
 8008400:	465b      	mov	r3, fp
 8008402:	4622      	mov	r2, r4
 8008404:	4629      	mov	r1, r5
 8008406:	4630      	mov	r0, r6
 8008408:	f7ff ffa2 	bl	8008350 <__sfputs_r>
 800840c:	3001      	adds	r0, #1
 800840e:	f000 80a7 	beq.w	8008560 <_vfiprintf_r+0x1ec>
 8008412:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008414:	445a      	add	r2, fp
 8008416:	9209      	str	r2, [sp, #36]	@ 0x24
 8008418:	f89a 3000 	ldrb.w	r3, [sl]
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 809f 	beq.w	8008560 <_vfiprintf_r+0x1ec>
 8008422:	2300      	movs	r3, #0
 8008424:	f04f 32ff 	mov.w	r2, #4294967295
 8008428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800842c:	f10a 0a01 	add.w	sl, sl, #1
 8008430:	9304      	str	r3, [sp, #16]
 8008432:	9307      	str	r3, [sp, #28]
 8008434:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008438:	931a      	str	r3, [sp, #104]	@ 0x68
 800843a:	4654      	mov	r4, sl
 800843c:	2205      	movs	r2, #5
 800843e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008442:	4853      	ldr	r0, [pc, #332]	@ (8008590 <_vfiprintf_r+0x21c>)
 8008444:	f7fc fec1 	bl	80051ca <memchr>
 8008448:	9a04      	ldr	r2, [sp, #16]
 800844a:	b9d8      	cbnz	r0, 8008484 <_vfiprintf_r+0x110>
 800844c:	06d1      	lsls	r1, r2, #27
 800844e:	bf44      	itt	mi
 8008450:	2320      	movmi	r3, #32
 8008452:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008456:	0713      	lsls	r3, r2, #28
 8008458:	bf44      	itt	mi
 800845a:	232b      	movmi	r3, #43	@ 0x2b
 800845c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008460:	f89a 3000 	ldrb.w	r3, [sl]
 8008464:	2b2a      	cmp	r3, #42	@ 0x2a
 8008466:	d015      	beq.n	8008494 <_vfiprintf_r+0x120>
 8008468:	4654      	mov	r4, sl
 800846a:	2000      	movs	r0, #0
 800846c:	f04f 0c0a 	mov.w	ip, #10
 8008470:	9a07      	ldr	r2, [sp, #28]
 8008472:	4621      	mov	r1, r4
 8008474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008478:	3b30      	subs	r3, #48	@ 0x30
 800847a:	2b09      	cmp	r3, #9
 800847c:	d94b      	bls.n	8008516 <_vfiprintf_r+0x1a2>
 800847e:	b1b0      	cbz	r0, 80084ae <_vfiprintf_r+0x13a>
 8008480:	9207      	str	r2, [sp, #28]
 8008482:	e014      	b.n	80084ae <_vfiprintf_r+0x13a>
 8008484:	eba0 0308 	sub.w	r3, r0, r8
 8008488:	fa09 f303 	lsl.w	r3, r9, r3
 800848c:	4313      	orrs	r3, r2
 800848e:	46a2      	mov	sl, r4
 8008490:	9304      	str	r3, [sp, #16]
 8008492:	e7d2      	b.n	800843a <_vfiprintf_r+0xc6>
 8008494:	9b03      	ldr	r3, [sp, #12]
 8008496:	1d19      	adds	r1, r3, #4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	9103      	str	r1, [sp, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	bfbb      	ittet	lt
 80084a0:	425b      	neglt	r3, r3
 80084a2:	f042 0202 	orrlt.w	r2, r2, #2
 80084a6:	9307      	strge	r3, [sp, #28]
 80084a8:	9307      	strlt	r3, [sp, #28]
 80084aa:	bfb8      	it	lt
 80084ac:	9204      	strlt	r2, [sp, #16]
 80084ae:	7823      	ldrb	r3, [r4, #0]
 80084b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80084b2:	d10a      	bne.n	80084ca <_vfiprintf_r+0x156>
 80084b4:	7863      	ldrb	r3, [r4, #1]
 80084b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80084b8:	d132      	bne.n	8008520 <_vfiprintf_r+0x1ac>
 80084ba:	9b03      	ldr	r3, [sp, #12]
 80084bc:	3402      	adds	r4, #2
 80084be:	1d1a      	adds	r2, r3, #4
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	9203      	str	r2, [sp, #12]
 80084c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084c8:	9305      	str	r3, [sp, #20]
 80084ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008594 <_vfiprintf_r+0x220>
 80084ce:	2203      	movs	r2, #3
 80084d0:	4650      	mov	r0, sl
 80084d2:	7821      	ldrb	r1, [r4, #0]
 80084d4:	f7fc fe79 	bl	80051ca <memchr>
 80084d8:	b138      	cbz	r0, 80084ea <_vfiprintf_r+0x176>
 80084da:	2240      	movs	r2, #64	@ 0x40
 80084dc:	9b04      	ldr	r3, [sp, #16]
 80084de:	eba0 000a 	sub.w	r0, r0, sl
 80084e2:	4082      	lsls	r2, r0
 80084e4:	4313      	orrs	r3, r2
 80084e6:	3401      	adds	r4, #1
 80084e8:	9304      	str	r3, [sp, #16]
 80084ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ee:	2206      	movs	r2, #6
 80084f0:	4829      	ldr	r0, [pc, #164]	@ (8008598 <_vfiprintf_r+0x224>)
 80084f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084f6:	f7fc fe68 	bl	80051ca <memchr>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d03f      	beq.n	800857e <_vfiprintf_r+0x20a>
 80084fe:	4b27      	ldr	r3, [pc, #156]	@ (800859c <_vfiprintf_r+0x228>)
 8008500:	bb1b      	cbnz	r3, 800854a <_vfiprintf_r+0x1d6>
 8008502:	9b03      	ldr	r3, [sp, #12]
 8008504:	3307      	adds	r3, #7
 8008506:	f023 0307 	bic.w	r3, r3, #7
 800850a:	3308      	adds	r3, #8
 800850c:	9303      	str	r3, [sp, #12]
 800850e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008510:	443b      	add	r3, r7
 8008512:	9309      	str	r3, [sp, #36]	@ 0x24
 8008514:	e76a      	b.n	80083ec <_vfiprintf_r+0x78>
 8008516:	460c      	mov	r4, r1
 8008518:	2001      	movs	r0, #1
 800851a:	fb0c 3202 	mla	r2, ip, r2, r3
 800851e:	e7a8      	b.n	8008472 <_vfiprintf_r+0xfe>
 8008520:	2300      	movs	r3, #0
 8008522:	f04f 0c0a 	mov.w	ip, #10
 8008526:	4619      	mov	r1, r3
 8008528:	3401      	adds	r4, #1
 800852a:	9305      	str	r3, [sp, #20]
 800852c:	4620      	mov	r0, r4
 800852e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008532:	3a30      	subs	r2, #48	@ 0x30
 8008534:	2a09      	cmp	r2, #9
 8008536:	d903      	bls.n	8008540 <_vfiprintf_r+0x1cc>
 8008538:	2b00      	cmp	r3, #0
 800853a:	d0c6      	beq.n	80084ca <_vfiprintf_r+0x156>
 800853c:	9105      	str	r1, [sp, #20]
 800853e:	e7c4      	b.n	80084ca <_vfiprintf_r+0x156>
 8008540:	4604      	mov	r4, r0
 8008542:	2301      	movs	r3, #1
 8008544:	fb0c 2101 	mla	r1, ip, r1, r2
 8008548:	e7f0      	b.n	800852c <_vfiprintf_r+0x1b8>
 800854a:	ab03      	add	r3, sp, #12
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	462a      	mov	r2, r5
 8008550:	4630      	mov	r0, r6
 8008552:	4b13      	ldr	r3, [pc, #76]	@ (80085a0 <_vfiprintf_r+0x22c>)
 8008554:	a904      	add	r1, sp, #16
 8008556:	f7fb fea3 	bl	80042a0 <_printf_float>
 800855a:	4607      	mov	r7, r0
 800855c:	1c78      	adds	r0, r7, #1
 800855e:	d1d6      	bne.n	800850e <_vfiprintf_r+0x19a>
 8008560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008562:	07d9      	lsls	r1, r3, #31
 8008564:	d405      	bmi.n	8008572 <_vfiprintf_r+0x1fe>
 8008566:	89ab      	ldrh	r3, [r5, #12]
 8008568:	059a      	lsls	r2, r3, #22
 800856a:	d402      	bmi.n	8008572 <_vfiprintf_r+0x1fe>
 800856c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800856e:	f7fc fe2b 	bl	80051c8 <__retarget_lock_release_recursive>
 8008572:	89ab      	ldrh	r3, [r5, #12]
 8008574:	065b      	lsls	r3, r3, #25
 8008576:	f53f af1f 	bmi.w	80083b8 <_vfiprintf_r+0x44>
 800857a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800857c:	e71e      	b.n	80083bc <_vfiprintf_r+0x48>
 800857e:	ab03      	add	r3, sp, #12
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	462a      	mov	r2, r5
 8008584:	4630      	mov	r0, r6
 8008586:	4b06      	ldr	r3, [pc, #24]	@ (80085a0 <_vfiprintf_r+0x22c>)
 8008588:	a904      	add	r1, sp, #16
 800858a:	f7fc f927 	bl	80047dc <_printf_i>
 800858e:	e7e4      	b.n	800855a <_vfiprintf_r+0x1e6>
 8008590:	08008d99 	.word	0x08008d99
 8008594:	08008d9f 	.word	0x08008d9f
 8008598:	08008da3 	.word	0x08008da3
 800859c:	080042a1 	.word	0x080042a1
 80085a0:	08008351 	.word	0x08008351

080085a4 <__swbuf_r>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	460e      	mov	r6, r1
 80085a8:	4614      	mov	r4, r2
 80085aa:	4605      	mov	r5, r0
 80085ac:	b118      	cbz	r0, 80085b6 <__swbuf_r+0x12>
 80085ae:	6a03      	ldr	r3, [r0, #32]
 80085b0:	b90b      	cbnz	r3, 80085b6 <__swbuf_r+0x12>
 80085b2:	f7fc fccf 	bl	8004f54 <__sinit>
 80085b6:	69a3      	ldr	r3, [r4, #24]
 80085b8:	60a3      	str	r3, [r4, #8]
 80085ba:	89a3      	ldrh	r3, [r4, #12]
 80085bc:	071a      	lsls	r2, r3, #28
 80085be:	d501      	bpl.n	80085c4 <__swbuf_r+0x20>
 80085c0:	6923      	ldr	r3, [r4, #16]
 80085c2:	b943      	cbnz	r3, 80085d6 <__swbuf_r+0x32>
 80085c4:	4621      	mov	r1, r4
 80085c6:	4628      	mov	r0, r5
 80085c8:	f000 f82a 	bl	8008620 <__swsetup_r>
 80085cc:	b118      	cbz	r0, 80085d6 <__swbuf_r+0x32>
 80085ce:	f04f 37ff 	mov.w	r7, #4294967295
 80085d2:	4638      	mov	r0, r7
 80085d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	6922      	ldr	r2, [r4, #16]
 80085da:	b2f6      	uxtb	r6, r6
 80085dc:	1a98      	subs	r0, r3, r2
 80085de:	6963      	ldr	r3, [r4, #20]
 80085e0:	4637      	mov	r7, r6
 80085e2:	4283      	cmp	r3, r0
 80085e4:	dc05      	bgt.n	80085f2 <__swbuf_r+0x4e>
 80085e6:	4621      	mov	r1, r4
 80085e8:	4628      	mov	r0, r5
 80085ea:	f7ff fa4b 	bl	8007a84 <_fflush_r>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d1ed      	bne.n	80085ce <__swbuf_r+0x2a>
 80085f2:	68a3      	ldr	r3, [r4, #8]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	60a3      	str	r3, [r4, #8]
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	6022      	str	r2, [r4, #0]
 80085fe:	701e      	strb	r6, [r3, #0]
 8008600:	6962      	ldr	r2, [r4, #20]
 8008602:	1c43      	adds	r3, r0, #1
 8008604:	429a      	cmp	r2, r3
 8008606:	d004      	beq.n	8008612 <__swbuf_r+0x6e>
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	07db      	lsls	r3, r3, #31
 800860c:	d5e1      	bpl.n	80085d2 <__swbuf_r+0x2e>
 800860e:	2e0a      	cmp	r6, #10
 8008610:	d1df      	bne.n	80085d2 <__swbuf_r+0x2e>
 8008612:	4621      	mov	r1, r4
 8008614:	4628      	mov	r0, r5
 8008616:	f7ff fa35 	bl	8007a84 <_fflush_r>
 800861a:	2800      	cmp	r0, #0
 800861c:	d0d9      	beq.n	80085d2 <__swbuf_r+0x2e>
 800861e:	e7d6      	b.n	80085ce <__swbuf_r+0x2a>

08008620 <__swsetup_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4b29      	ldr	r3, [pc, #164]	@ (80086c8 <__swsetup_r+0xa8>)
 8008624:	4605      	mov	r5, r0
 8008626:	6818      	ldr	r0, [r3, #0]
 8008628:	460c      	mov	r4, r1
 800862a:	b118      	cbz	r0, 8008634 <__swsetup_r+0x14>
 800862c:	6a03      	ldr	r3, [r0, #32]
 800862e:	b90b      	cbnz	r3, 8008634 <__swsetup_r+0x14>
 8008630:	f7fc fc90 	bl	8004f54 <__sinit>
 8008634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008638:	0719      	lsls	r1, r3, #28
 800863a:	d422      	bmi.n	8008682 <__swsetup_r+0x62>
 800863c:	06da      	lsls	r2, r3, #27
 800863e:	d407      	bmi.n	8008650 <__swsetup_r+0x30>
 8008640:	2209      	movs	r2, #9
 8008642:	602a      	str	r2, [r5, #0]
 8008644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008648:	f04f 30ff 	mov.w	r0, #4294967295
 800864c:	81a3      	strh	r3, [r4, #12]
 800864e:	e033      	b.n	80086b8 <__swsetup_r+0x98>
 8008650:	0758      	lsls	r0, r3, #29
 8008652:	d512      	bpl.n	800867a <__swsetup_r+0x5a>
 8008654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008656:	b141      	cbz	r1, 800866a <__swsetup_r+0x4a>
 8008658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800865c:	4299      	cmp	r1, r3
 800865e:	d002      	beq.n	8008666 <__swsetup_r+0x46>
 8008660:	4628      	mov	r0, r5
 8008662:	f7fd fc15 	bl	8005e90 <_free_r>
 8008666:	2300      	movs	r3, #0
 8008668:	6363      	str	r3, [r4, #52]	@ 0x34
 800866a:	89a3      	ldrh	r3, [r4, #12]
 800866c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008670:	81a3      	strh	r3, [r4, #12]
 8008672:	2300      	movs	r3, #0
 8008674:	6063      	str	r3, [r4, #4]
 8008676:	6923      	ldr	r3, [r4, #16]
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	f043 0308 	orr.w	r3, r3, #8
 8008680:	81a3      	strh	r3, [r4, #12]
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	b94b      	cbnz	r3, 800869a <__swsetup_r+0x7a>
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800868c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008690:	d003      	beq.n	800869a <__swsetup_r+0x7a>
 8008692:	4621      	mov	r1, r4
 8008694:	4628      	mov	r0, r5
 8008696:	f000 f882 	bl	800879e <__smakebuf_r>
 800869a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800869e:	f013 0201 	ands.w	r2, r3, #1
 80086a2:	d00a      	beq.n	80086ba <__swsetup_r+0x9a>
 80086a4:	2200      	movs	r2, #0
 80086a6:	60a2      	str	r2, [r4, #8]
 80086a8:	6962      	ldr	r2, [r4, #20]
 80086aa:	4252      	negs	r2, r2
 80086ac:	61a2      	str	r2, [r4, #24]
 80086ae:	6922      	ldr	r2, [r4, #16]
 80086b0:	b942      	cbnz	r2, 80086c4 <__swsetup_r+0xa4>
 80086b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086b6:	d1c5      	bne.n	8008644 <__swsetup_r+0x24>
 80086b8:	bd38      	pop	{r3, r4, r5, pc}
 80086ba:	0799      	lsls	r1, r3, #30
 80086bc:	bf58      	it	pl
 80086be:	6962      	ldrpl	r2, [r4, #20]
 80086c0:	60a2      	str	r2, [r4, #8]
 80086c2:	e7f4      	b.n	80086ae <__swsetup_r+0x8e>
 80086c4:	2000      	movs	r0, #0
 80086c6:	e7f7      	b.n	80086b8 <__swsetup_r+0x98>
 80086c8:	20000018 	.word	0x20000018

080086cc <_raise_r>:
 80086cc:	291f      	cmp	r1, #31
 80086ce:	b538      	push	{r3, r4, r5, lr}
 80086d0:	4605      	mov	r5, r0
 80086d2:	460c      	mov	r4, r1
 80086d4:	d904      	bls.n	80086e0 <_raise_r+0x14>
 80086d6:	2316      	movs	r3, #22
 80086d8:	6003      	str	r3, [r0, #0]
 80086da:	f04f 30ff 	mov.w	r0, #4294967295
 80086de:	bd38      	pop	{r3, r4, r5, pc}
 80086e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80086e2:	b112      	cbz	r2, 80086ea <_raise_r+0x1e>
 80086e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086e8:	b94b      	cbnz	r3, 80086fe <_raise_r+0x32>
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 f830 	bl	8008750 <_getpid_r>
 80086f0:	4622      	mov	r2, r4
 80086f2:	4601      	mov	r1, r0
 80086f4:	4628      	mov	r0, r5
 80086f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086fa:	f000 b817 	b.w	800872c <_kill_r>
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d00a      	beq.n	8008718 <_raise_r+0x4c>
 8008702:	1c59      	adds	r1, r3, #1
 8008704:	d103      	bne.n	800870e <_raise_r+0x42>
 8008706:	2316      	movs	r3, #22
 8008708:	6003      	str	r3, [r0, #0]
 800870a:	2001      	movs	r0, #1
 800870c:	e7e7      	b.n	80086de <_raise_r+0x12>
 800870e:	2100      	movs	r1, #0
 8008710:	4620      	mov	r0, r4
 8008712:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008716:	4798      	blx	r3
 8008718:	2000      	movs	r0, #0
 800871a:	e7e0      	b.n	80086de <_raise_r+0x12>

0800871c <raise>:
 800871c:	4b02      	ldr	r3, [pc, #8]	@ (8008728 <raise+0xc>)
 800871e:	4601      	mov	r1, r0
 8008720:	6818      	ldr	r0, [r3, #0]
 8008722:	f7ff bfd3 	b.w	80086cc <_raise_r>
 8008726:	bf00      	nop
 8008728:	20000018 	.word	0x20000018

0800872c <_kill_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	2300      	movs	r3, #0
 8008730:	4d06      	ldr	r5, [pc, #24]	@ (800874c <_kill_r+0x20>)
 8008732:	4604      	mov	r4, r0
 8008734:	4608      	mov	r0, r1
 8008736:	4611      	mov	r1, r2
 8008738:	602b      	str	r3, [r5, #0]
 800873a:	f7f9 f982 	bl	8001a42 <_kill>
 800873e:	1c43      	adds	r3, r0, #1
 8008740:	d102      	bne.n	8008748 <_kill_r+0x1c>
 8008742:	682b      	ldr	r3, [r5, #0]
 8008744:	b103      	cbz	r3, 8008748 <_kill_r+0x1c>
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	bd38      	pop	{r3, r4, r5, pc}
 800874a:	bf00      	nop
 800874c:	2000043c 	.word	0x2000043c

08008750 <_getpid_r>:
 8008750:	f7f9 b970 	b.w	8001a34 <_getpid>

08008754 <__swhatbuf_r>:
 8008754:	b570      	push	{r4, r5, r6, lr}
 8008756:	460c      	mov	r4, r1
 8008758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800875c:	4615      	mov	r5, r2
 800875e:	2900      	cmp	r1, #0
 8008760:	461e      	mov	r6, r3
 8008762:	b096      	sub	sp, #88	@ 0x58
 8008764:	da0c      	bge.n	8008780 <__swhatbuf_r+0x2c>
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	2100      	movs	r1, #0
 800876a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800876e:	bf14      	ite	ne
 8008770:	2340      	movne	r3, #64	@ 0x40
 8008772:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008776:	2000      	movs	r0, #0
 8008778:	6031      	str	r1, [r6, #0]
 800877a:	602b      	str	r3, [r5, #0]
 800877c:	b016      	add	sp, #88	@ 0x58
 800877e:	bd70      	pop	{r4, r5, r6, pc}
 8008780:	466a      	mov	r2, sp
 8008782:	f000 f849 	bl	8008818 <_fstat_r>
 8008786:	2800      	cmp	r0, #0
 8008788:	dbed      	blt.n	8008766 <__swhatbuf_r+0x12>
 800878a:	9901      	ldr	r1, [sp, #4]
 800878c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008790:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008794:	4259      	negs	r1, r3
 8008796:	4159      	adcs	r1, r3
 8008798:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800879c:	e7eb      	b.n	8008776 <__swhatbuf_r+0x22>

0800879e <__smakebuf_r>:
 800879e:	898b      	ldrh	r3, [r1, #12]
 80087a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087a2:	079d      	lsls	r5, r3, #30
 80087a4:	4606      	mov	r6, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	d507      	bpl.n	80087ba <__smakebuf_r+0x1c>
 80087aa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087ae:	6023      	str	r3, [r4, #0]
 80087b0:	6123      	str	r3, [r4, #16]
 80087b2:	2301      	movs	r3, #1
 80087b4:	6163      	str	r3, [r4, #20]
 80087b6:	b003      	add	sp, #12
 80087b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ba:	466a      	mov	r2, sp
 80087bc:	ab01      	add	r3, sp, #4
 80087be:	f7ff ffc9 	bl	8008754 <__swhatbuf_r>
 80087c2:	9f00      	ldr	r7, [sp, #0]
 80087c4:	4605      	mov	r5, r0
 80087c6:	4639      	mov	r1, r7
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7fd fbd3 	bl	8005f74 <_malloc_r>
 80087ce:	b948      	cbnz	r0, 80087e4 <__smakebuf_r+0x46>
 80087d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087d4:	059a      	lsls	r2, r3, #22
 80087d6:	d4ee      	bmi.n	80087b6 <__smakebuf_r+0x18>
 80087d8:	f023 0303 	bic.w	r3, r3, #3
 80087dc:	f043 0302 	orr.w	r3, r3, #2
 80087e0:	81a3      	strh	r3, [r4, #12]
 80087e2:	e7e2      	b.n	80087aa <__smakebuf_r+0xc>
 80087e4:	89a3      	ldrh	r3, [r4, #12]
 80087e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80087ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ee:	81a3      	strh	r3, [r4, #12]
 80087f0:	9b01      	ldr	r3, [sp, #4]
 80087f2:	6020      	str	r0, [r4, #0]
 80087f4:	b15b      	cbz	r3, 800880e <__smakebuf_r+0x70>
 80087f6:	4630      	mov	r0, r6
 80087f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087fc:	f000 f81e 	bl	800883c <_isatty_r>
 8008800:	b128      	cbz	r0, 800880e <__smakebuf_r+0x70>
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	f023 0303 	bic.w	r3, r3, #3
 8008808:	f043 0301 	orr.w	r3, r3, #1
 800880c:	81a3      	strh	r3, [r4, #12]
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	431d      	orrs	r5, r3
 8008812:	81a5      	strh	r5, [r4, #12]
 8008814:	e7cf      	b.n	80087b6 <__smakebuf_r+0x18>
	...

08008818 <_fstat_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	2300      	movs	r3, #0
 800881c:	4d06      	ldr	r5, [pc, #24]	@ (8008838 <_fstat_r+0x20>)
 800881e:	4604      	mov	r4, r0
 8008820:	4608      	mov	r0, r1
 8008822:	4611      	mov	r1, r2
 8008824:	602b      	str	r3, [r5, #0]
 8008826:	f7f9 f96b 	bl	8001b00 <_fstat>
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	d102      	bne.n	8008834 <_fstat_r+0x1c>
 800882e:	682b      	ldr	r3, [r5, #0]
 8008830:	b103      	cbz	r3, 8008834 <_fstat_r+0x1c>
 8008832:	6023      	str	r3, [r4, #0]
 8008834:	bd38      	pop	{r3, r4, r5, pc}
 8008836:	bf00      	nop
 8008838:	2000043c 	.word	0x2000043c

0800883c <_isatty_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	2300      	movs	r3, #0
 8008840:	4d05      	ldr	r5, [pc, #20]	@ (8008858 <_isatty_r+0x1c>)
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	602b      	str	r3, [r5, #0]
 8008848:	f7f9 f969 	bl	8001b1e <_isatty>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_isatty_r+0x1a>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_isatty_r+0x1a>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	2000043c 	.word	0x2000043c

0800885c <_init>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	bf00      	nop
 8008860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008862:	bc08      	pop	{r3}
 8008864:	469e      	mov	lr, r3
 8008866:	4770      	bx	lr

08008868 <_fini>:
 8008868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886a:	bf00      	nop
 800886c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800886e:	bc08      	pop	{r3}
 8008870:	469e      	mov	lr, r3
 8008872:	4770      	bx	lr
