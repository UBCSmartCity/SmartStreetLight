
LED_Blink_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033ac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080034b8  080034b8  000044b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003604  08003604  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003604  08003604  00004604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800360c  0800360c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800360c  0800360c  0000460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003610  08003610  00004610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003614  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000005c  08003670  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08003670  0000529c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9b8  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c33  00000000  00000000  00010a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00012670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000983  00000000  00000000  00013290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a07  00000000  00000000  00013c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e72a  00000000  00000000  0002b61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a532  00000000  00000000  00039d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003838  00000000  00000000  000c42bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c7af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080034a0 	.word	0x080034a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080034a0 	.word	0x080034a0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	f5ad 6de8 	sub.w	sp, sp, #1856	@ 0x740
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fe06 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 fb3e 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 fc18 	bl	80009a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000170:	f000 fbf8 	bl	8000964 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000174:	f000 fbcc 	bl	8000910 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000178:	f000 fb72 	bl	8000860 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
   uint8_t rxBuffer[512] = {0};
 800017c:	f507 63e8 	add.w	r3, r7, #1856	@ 0x740
 8000180:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
 8000188:	3304      	adds	r3, #4
 800018a:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 800018e:	2100      	movs	r1, #0
 8000190:	4618      	mov	r0, r3
 8000192:	f002 fcd1 	bl	8002b38 <memset>
   uint8_t ATisOK;
   int channel;
   int onoff;
   int led = 0;
 8000196:	2300      	movs	r3, #0
 8000198:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
   int n=50*24; //no. of leds
 800019c:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80001a0:	f8c7 372c 	str.w	r3, [r7, #1836]	@ 0x72c
   sprintf(ATcommandF,"<p>Light is currently off\
   </p><a class=\"button button-on\" href=\"/lighton\">ON</a>");
   sprintf(ATcommandT,"</body></html>");*/


   sprintf(ATcommandB,"11");
 80001a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80001a8:	49d5      	ldr	r1, [pc, #852]	@ (8000500 <main+0x3a4>)
 80001aa:	4618      	mov	r0, r3
 80001ac:	f002 fca4 	bl	8002af8 <siprintf>
   sprintf(ATcommandN,"22");
 80001b0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80001b4:	49d3      	ldr	r1, [pc, #844]	@ (8000504 <main+0x3a8>)
 80001b6:	4618      	mov	r0, r3
 80001b8:	f002 fc9e 	bl	8002af8 <siprintf>
   sprintf(ATcommandF,"33");
 80001bc:	f107 0314 	add.w	r3, r7, #20
 80001c0:	49d1      	ldr	r1, [pc, #836]	@ (8000508 <main+0x3ac>)
 80001c2:	4618      	mov	r0, r3
 80001c4:	f002 fc98 	bl	8002af8 <siprintf>
   sprintf(ATcommandT,"123");
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	49d0      	ldr	r1, [pc, #832]	@ (800050c <main+0x3b0>)
 80001cc:	4618      	mov	r0, r3
 80001ce:	f002 fc93 	bl	8002af8 <siprintf>


   int countB = strlen(ATcommandB);
 80001d2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80001d6:	4618      	mov	r0, r3
 80001d8:	f7ff ffb8 	bl	800014c <strlen>
 80001dc:	4603      	mov	r3, r0
 80001de:	f8c7 3728 	str.w	r3, [r7, #1832]	@ 0x728
   int countN = strlen(ATcommandN);
 80001e2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80001e6:	4618      	mov	r0, r3
 80001e8:	f7ff ffb0 	bl	800014c <strlen>
 80001ec:	4603      	mov	r3, r0
 80001ee:	f8c7 3724 	str.w	r3, [r7, #1828]	@ 0x724
   int countF = strlen(ATcommandF);
 80001f2:	f107 0314 	add.w	r3, r7, #20
 80001f6:	4618      	mov	r0, r3
 80001f8:	f7ff ffa8 	bl	800014c <strlen>
 80001fc:	4603      	mov	r3, r0
 80001fe:	f8c7 3720 	str.w	r3, [r7, #1824]	@ 0x720
   int countT = strlen(ATcommandT);
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	4618      	mov	r0, r3
 8000206:	f7ff ffa1 	bl	800014c <strlen>
 800020a:	4603      	mov	r3, r0
 800020c:	f8c7 371c 	str.w	r3, [r7, #1820]	@ 0x71c

   sprintf(ATcommand,"AT+RST\r\n");
 8000210:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 8000214:	49be      	ldr	r1, [pc, #760]	@ (8000510 <main+0x3b4>)
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fc6e 	bl	8002af8 <siprintf>
   memset(rxBuffer,0,sizeof(rxBuffer));
 800021c:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 8000220:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fc86 	bl	8002b38 <memset>
   HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800022c:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 8000230:	4618      	mov	r0, r3
 8000232:	f7ff ff8b 	bl	800014c <strlen>
 8000236:	4603      	mov	r3, r0
 8000238:	b29a      	uxth	r2, r3
 800023a:	f207 41dc 	addw	r1, r7, #1244	@ 0x4dc
 800023e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000242:	48b4      	ldr	r0, [pc, #720]	@ (8000514 <main+0x3b8>)
 8000244:	f002 f9ec 	bl	8002620 <HAL_UART_Transmit>
   HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000248:	f207 511c 	addw	r1, r7, #1308	@ 0x51c
 800024c:	2364      	movs	r3, #100	@ 0x64
 800024e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000252:	48b0      	ldr	r0, [pc, #704]	@ (8000514 <main+0x3b8>)
 8000254:	f002 fa6f 	bl	8002736 <HAL_UART_Receive>
   HAL_Delay(500);
 8000258:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800025c:	f000 fdec 	bl	8000e38 <HAL_Delay>

   ATisOK = 0;
 8000260:	2300      	movs	r3, #0
 8000262:	f887 373f 	strb.w	r3, [r7, #1855]	@ 0x73f
       ATisOK = 1;
     }
     HAL_Delay(500);
   }*/

   ATisOK = 0;
 8000266:	2300      	movs	r3, #0
 8000268:	f887 373f 	strb.w	r3, [r7, #1855]	@ 0x73f
   while(!ATisOK){
 800026c:	e034      	b.n	80002d8 <main+0x17c>
     sprintf(ATcommand,"AT+CWJAP=\"Testing\",\"12346789\"\r\n");
 800026e:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 8000272:	49a9      	ldr	r1, [pc, #676]	@ (8000518 <main+0x3bc>)
 8000274:	4618      	mov	r0, r3
 8000276:	f002 fc3f 	bl	8002af8 <siprintf>
     memset(rxBuffer,0,sizeof(rxBuffer));
 800027a:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 800027e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f002 fc57 	bl	8002b38 <memset>
     HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800028a:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ff5c 	bl	800014c <strlen>
 8000294:	4603      	mov	r3, r0
 8000296:	b29a      	uxth	r2, r3
 8000298:	f207 41dc 	addw	r1, r7, #1244	@ 0x4dc
 800029c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002a0:	489c      	ldr	r0, [pc, #624]	@ (8000514 <main+0x3b8>)
 80002a2:	f002 f9bd 	bl	8002620 <HAL_UART_Transmit>
     HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 80002a6:	f207 511c 	addw	r1, r7, #1308	@ 0x51c
 80002aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002b2:	4898      	ldr	r0, [pc, #608]	@ (8000514 <main+0x3b8>)
 80002b4:	f002 fa3f 	bl	8002736 <HAL_UART_Receive>
     if(strstr((char *)rxBuffer,"OK")){
 80002b8:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80002bc:	4997      	ldr	r1, [pc, #604]	@ (800051c <main+0x3c0>)
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 fc4f 	bl	8002b62 <strstr>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d002      	beq.n	80002d0 <main+0x174>
       ATisOK = 1;
 80002ca:	2301      	movs	r3, #1
 80002cc:	f887 373f 	strb.w	r3, [r7, #1855]	@ 0x73f
     }
     HAL_Delay(500);
 80002d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002d4:	f000 fdb0 	bl	8000e38 <HAL_Delay>
   while(!ATisOK){
 80002d8:	f897 373f 	ldrb.w	r3, [r7, #1855]	@ 0x73f
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0c6      	beq.n	800026e <main+0x112>
   }


   ATisOK = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	f887 373f 	strb.w	r3, [r7, #1855]	@ 0x73f
   while(!ATisOK){
 80002e6:	e034      	b.n	8000352 <main+0x1f6>
     sprintf(ATcommand,"AT+CIPMUX=1\r\n");
 80002e8:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 80002ec:	498c      	ldr	r1, [pc, #560]	@ (8000520 <main+0x3c4>)
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 fc02 	bl	8002af8 <siprintf>
       memset(rxBuffer,0,sizeof(rxBuffer));
 80002f4:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80002f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fc1a 	bl	8002b38 <memset>
       HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000304:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ff1f 	bl	800014c <strlen>
 800030e:	4603      	mov	r3, r0
 8000310:	b29a      	uxth	r2, r3
 8000312:	f207 41dc 	addw	r1, r7, #1244	@ 0x4dc
 8000316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800031a:	487e      	ldr	r0, [pc, #504]	@ (8000514 <main+0x3b8>)
 800031c:	f002 f980 	bl	8002620 <HAL_UART_Transmit>
       HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 8000320:	f207 511c 	addw	r1, r7, #1308	@ 0x51c
 8000324:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800032c:	4879      	ldr	r0, [pc, #484]	@ (8000514 <main+0x3b8>)
 800032e:	f002 fa02 	bl	8002736 <HAL_UART_Receive>
       if(strstr((char *)rxBuffer,"OK")){
 8000332:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 8000336:	4979      	ldr	r1, [pc, #484]	@ (800051c <main+0x3c0>)
 8000338:	4618      	mov	r0, r3
 800033a:	f002 fc12 	bl	8002b62 <strstr>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d002      	beq.n	800034a <main+0x1ee>
         ATisOK = 1;
 8000344:	2301      	movs	r3, #1
 8000346:	f887 373f 	strb.w	r3, [r7, #1855]	@ 0x73f
       }
       HAL_Delay(500);
 800034a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800034e:	f000 fd73 	bl	8000e38 <HAL_Delay>
   while(!ATisOK){
 8000352:	f897 373f 	ldrb.w	r3, [r7, #1855]	@ 0x73f
 8000356:	2b00      	cmp	r3, #0
 8000358:	d0c6      	beq.n	80002e8 <main+0x18c>
   }

   ATisOK = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	f887 373f 	strb.w	r3, [r7, #1855]	@ 0x73f
   while(!ATisOK){
 8000360:	e034      	b.n	80003cc <main+0x270>
     sprintf(ATcommand,"AT+CIPSERVER=1,80\r\n");
 8000362:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 8000366:	496f      	ldr	r1, [pc, #444]	@ (8000524 <main+0x3c8>)
 8000368:	4618      	mov	r0, r3
 800036a:	f002 fbc5 	bl	8002af8 <siprintf>
     memset(rxBuffer,0,sizeof(rxBuffer));
 800036e:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 8000372:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000376:	2100      	movs	r1, #0
 8000378:	4618      	mov	r0, r3
 800037a:	f002 fbdd 	bl	8002b38 <memset>
     HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800037e:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff fee2 	bl	800014c <strlen>
 8000388:	4603      	mov	r3, r0
 800038a:	b29a      	uxth	r2, r3
 800038c:	f207 41dc 	addw	r1, r7, #1244	@ 0x4dc
 8000390:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000394:	485f      	ldr	r0, [pc, #380]	@ (8000514 <main+0x3b8>)
 8000396:	f002 f943 	bl	8002620 <HAL_UART_Transmit>
     HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 800039a:	f207 511c 	addw	r1, r7, #1308	@ 0x51c
 800039e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003a6:	485b      	ldr	r0, [pc, #364]	@ (8000514 <main+0x3b8>)
 80003a8:	f002 f9c5 	bl	8002736 <HAL_UART_Receive>
     if(strstr((char *)rxBuffer,"OK")){
 80003ac:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80003b0:	495a      	ldr	r1, [pc, #360]	@ (800051c <main+0x3c0>)
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 fbd5 	bl	8002b62 <strstr>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d002      	beq.n	80003c4 <main+0x268>
         ATisOK = 1;
 80003be:	2301      	movs	r3, #1
 80003c0:	f887 373f 	strb.w	r3, [r7, #1855]	@ 0x73f
     }
     HAL_Delay(500);
 80003c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003c8:	f000 fd36 	bl	8000e38 <HAL_Delay>
   while(!ATisOK){
 80003cc:	f897 373f 	ldrb.w	r3, [r7, #1855]	@ 0x73f
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0c6      	beq.n	8000362 <main+0x206>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  memset(rxBuffer,0,sizeof(rxBuffer));
 80003d4:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80003d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f002 fbaa 	bl	8002b38 <memset>
	      HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 80003e4:	f207 511c 	addw	r1, r7, #1308	@ 0x51c
 80003e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003f0:	4848      	ldr	r0, [pc, #288]	@ (8000514 <main+0x3b8>)
 80003f2:	f002 f9a0 	bl	8002736 <HAL_UART_Receive>
	      if(strstr((char *)rxBuffer,"+IPD,0")) channel = 0;
 80003f6:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80003fa:	494b      	ldr	r1, [pc, #300]	@ (8000528 <main+0x3cc>)
 80003fc:	4618      	mov	r0, r3
 80003fe:	f002 fbb0 	bl	8002b62 <strstr>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d003      	beq.n	8000410 <main+0x2b4>
 8000408:	2300      	movs	r3, #0
 800040a:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
 800040e:	e05d      	b.n	80004cc <main+0x370>
	      else if(strstr((char *)rxBuffer,"+IPD,1")) channel = 1;
 8000410:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 8000414:	4945      	ldr	r1, [pc, #276]	@ (800052c <main+0x3d0>)
 8000416:	4618      	mov	r0, r3
 8000418:	f002 fba3 	bl	8002b62 <strstr>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d003      	beq.n	800042a <main+0x2ce>
 8000422:	2301      	movs	r3, #1
 8000424:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
 8000428:	e050      	b.n	80004cc <main+0x370>
	      else if(strstr((char *)rxBuffer,"+IPD,2")) channel = 2;
 800042a:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 800042e:	4940      	ldr	r1, [pc, #256]	@ (8000530 <main+0x3d4>)
 8000430:	4618      	mov	r0, r3
 8000432:	f002 fb96 	bl	8002b62 <strstr>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d003      	beq.n	8000444 <main+0x2e8>
 800043c:	2302      	movs	r3, #2
 800043e:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
 8000442:	e043      	b.n	80004cc <main+0x370>
	      else if(strstr((char *)rxBuffer,"+IPD,3")) channel = 3;
 8000444:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 8000448:	493a      	ldr	r1, [pc, #232]	@ (8000534 <main+0x3d8>)
 800044a:	4618      	mov	r0, r3
 800044c:	f002 fb89 	bl	8002b62 <strstr>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d003      	beq.n	800045e <main+0x302>
 8000456:	2303      	movs	r3, #3
 8000458:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
 800045c:	e036      	b.n	80004cc <main+0x370>
	      else if(strstr((char *)rxBuffer,"+IPD,4")) channel = 4;
 800045e:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 8000462:	4935      	ldr	r1, [pc, #212]	@ (8000538 <main+0x3dc>)
 8000464:	4618      	mov	r0, r3
 8000466:	f002 fb7c 	bl	8002b62 <strstr>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d003      	beq.n	8000478 <main+0x31c>
 8000470:	2304      	movs	r3, #4
 8000472:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
 8000476:	e029      	b.n	80004cc <main+0x370>
	      else if(strstr((char *)rxBuffer,"+IPD,5")) channel = 5;
 8000478:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 800047c:	492f      	ldr	r1, [pc, #188]	@ (800053c <main+0x3e0>)
 800047e:	4618      	mov	r0, r3
 8000480:	f002 fb6f 	bl	8002b62 <strstr>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d003      	beq.n	8000492 <main+0x336>
 800048a:	2305      	movs	r3, #5
 800048c:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
 8000490:	e01c      	b.n	80004cc <main+0x370>
	      else if(strstr((char *)rxBuffer,"+IPD,6")) channel = 6;
 8000492:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 8000496:	492a      	ldr	r1, [pc, #168]	@ (8000540 <main+0x3e4>)
 8000498:	4618      	mov	r0, r3
 800049a:	f002 fb62 	bl	8002b62 <strstr>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d003      	beq.n	80004ac <main+0x350>
 80004a4:	2306      	movs	r3, #6
 80004a6:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
 80004aa:	e00f      	b.n	80004cc <main+0x370>
	      else if(strstr((char *)rxBuffer,"+IPD,7")) channel = 7;
 80004ac:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80004b0:	4924      	ldr	r1, [pc, #144]	@ (8000544 <main+0x3e8>)
 80004b2:	4618      	mov	r0, r3
 80004b4:	f002 fb55 	bl	8002b62 <strstr>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d003      	beq.n	80004c6 <main+0x36a>
 80004be:	2307      	movs	r3, #7
 80004c0:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
 80004c4:	e002      	b.n	80004cc <main+0x370>
	      else channel = 100;
 80004c6:	2364      	movs	r3, #100	@ 0x64
 80004c8:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738

	      if(strstr((char *)rxBuffer,"GET /lighton")) onoff = 0;
 80004cc:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80004d0:	491d      	ldr	r1, [pc, #116]	@ (8000548 <main+0x3ec>)
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 fb45 	bl	8002b62 <strstr>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d003      	beq.n	80004e6 <main+0x38a>
 80004de:	2300      	movs	r3, #0
 80004e0:	f8c7 3734 	str.w	r3, [r7, #1844]	@ 0x734
 80004e4:	e038      	b.n	8000558 <main+0x3fc>
	      else if(strstr((char *)rxBuffer,"GET /lightoff")) onoff = 1;
 80004e6:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80004ea:	4918      	ldr	r1, [pc, #96]	@ (800054c <main+0x3f0>)
 80004ec:	4618      	mov	r0, r3
 80004ee:	f002 fb38 	bl	8002b62 <strstr>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d02b      	beq.n	8000550 <main+0x3f4>
 80004f8:	2301      	movs	r3, #1
 80004fa:	f8c7 3734 	str.w	r3, [r7, #1844]	@ 0x734
 80004fe:	e02b      	b.n	8000558 <main+0x3fc>
 8000500:	080034b8 	.word	0x080034b8
 8000504:	080034bc 	.word	0x080034bc
 8000508:	080034c0 	.word	0x080034c0
 800050c:	080034c4 	.word	0x080034c4
 8000510:	080034c8 	.word	0x080034c8
 8000514:	20000104 	.word	0x20000104
 8000518:	080034d4 	.word	0x080034d4
 800051c:	080034f4 	.word	0x080034f4
 8000520:	080034f8 	.word	0x080034f8
 8000524:	08003508 	.word	0x08003508
 8000528:	0800351c 	.word	0x0800351c
 800052c:	08003524 	.word	0x08003524
 8000530:	0800352c 	.word	0x0800352c
 8000534:	08003534 	.word	0x08003534
 8000538:	0800353c 	.word	0x0800353c
 800053c:	08003544 	.word	0x08003544
 8000540:	0800354c 	.word	0x0800354c
 8000544:	08003554 	.word	0x08003554
 8000548:	0800355c 	.word	0x0800355c
 800054c:	0800356c 	.word	0x0800356c
	      else onoff = led;
 8000550:	f8d7 3730 	ldr.w	r3, [r7, #1840]	@ 0x730
 8000554:	f8c7 3734 	str.w	r3, [r7, #1844]	@ 0x734

	      if(channel<8 && onoff == 1)
 8000558:	f8d7 3738 	ldr.w	r3, [r7, #1848]	@ 0x738
 800055c:	2b07      	cmp	r3, #7
 800055e:	f300 809b 	bgt.w	8000698 <main+0x53c>
 8000562:	f8d7 3734 	ldr.w	r3, [r7, #1844]	@ 0x734
 8000566:	2b01      	cmp	r3, #1
 8000568:	f040 8096 	bne.w	8000698 <main+0x53c>
	      {
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000572:	4899      	ldr	r0, [pc, #612]	@ (80007d8 <main+0x67c>)
 8000574:	f001 f876 	bl	8001664 <HAL_GPIO_WritePin>
	        led = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
	         ws2812Send();
	         setLED(6, 255, 255, 255); // Specific color
	         ws2812Send();
	         */

	        sprintf(ATcommand,"AT+CIPSEND=%d,%d\r\n",channel,countB+countF+countT);
 800057e:	f8d7 2728 	ldr.w	r2, [r7, #1832]	@ 0x728
 8000582:	f8d7 3720 	ldr.w	r3, [r7, #1824]	@ 0x720
 8000586:	441a      	add	r2, r3
 8000588:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 800058c:	4413      	add	r3, r2
 800058e:	f207 40dc 	addw	r0, r7, #1244	@ 0x4dc
 8000592:	f8d7 2738 	ldr.w	r2, [r7, #1848]	@ 0x738
 8000596:	4991      	ldr	r1, [pc, #580]	@ (80007dc <main+0x680>)
 8000598:	f002 faae 	bl	8002af8 <siprintf>
	        memset(rxBuffer,0,sizeof(rxBuffer));
 800059c:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80005a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fac6 	bl	8002b38 <memset>
	        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80005ac:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fdcb 	bl	800014c <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f207 41dc 	addw	r1, r7, #1244	@ 0x4dc
 80005be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c2:	4887      	ldr	r0, [pc, #540]	@ (80007e0 <main+0x684>)
 80005c4:	f002 f82c 	bl	8002620 <HAL_UART_Transmit>
	        HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 80005c8:	f207 511c 	addw	r1, r7, #1308	@ 0x51c
 80005cc:	2364      	movs	r3, #100	@ 0x64
 80005ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005d2:	4883      	ldr	r0, [pc, #524]	@ (80007e0 <main+0x684>)
 80005d4:	f002 f8af 	bl	8002736 <HAL_UART_Receive>
	        if(strstr((char *)rxBuffer,">"))
 80005d8:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80005dc:	213e      	movs	r1, #62	@ 0x3e
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fab2 	bl	8002b48 <strchr>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d02c      	beq.n	8000644 <main+0x4e8>
	        {
	          memset(rxBuffer,0,sizeof(rxBuffer));
 80005ea:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80005ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 fa9f 	bl	8002b38 <memset>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandB,countB,1000);
 80005fa:	f8d7 3728 	ldr.w	r3, [r7, #1832]	@ 0x728
 80005fe:	b29a      	uxth	r2, r3
 8000600:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 8000604:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000608:	4875      	ldr	r0, [pc, #468]	@ (80007e0 <main+0x684>)
 800060a:	f002 f809 	bl	8002620 <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandF,countF,1000);
 800060e:	f8d7 3720 	ldr.w	r3, [r7, #1824]	@ 0x720
 8000612:	b29a      	uxth	r2, r3
 8000614:	f107 0114 	add.w	r1, r7, #20
 8000618:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800061c:	4870      	ldr	r0, [pc, #448]	@ (80007e0 <main+0x684>)
 800061e:	f001 ffff 	bl	8002620 <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandT,countT,1000);
 8000622:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8000626:	b29a      	uxth	r2, r3
 8000628:	1d39      	adds	r1, r7, #4
 800062a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800062e:	486c      	ldr	r0, [pc, #432]	@ (80007e0 <main+0x684>)
 8000630:	f001 fff6 	bl	8002620 <HAL_UART_Transmit>
	           HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000634:	f207 511c 	addw	r1, r7, #1308	@ 0x51c
 8000638:	2364      	movs	r3, #100	@ 0x64
 800063a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800063e:	4868      	ldr	r0, [pc, #416]	@ (80007e0 <main+0x684>)
 8000640:	f002 f879 	bl	8002736 <HAL_UART_Receive>
	        }
	        sprintf(ATcommand,"AT+CIPCLOSE=%d\r\n",channel);
 8000644:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 8000648:	f8d7 2738 	ldr.w	r2, [r7, #1848]	@ 0x738
 800064c:	4965      	ldr	r1, [pc, #404]	@ (80007e4 <main+0x688>)
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fa52 	bl	8002af8 <siprintf>
	        memset(rxBuffer,0,sizeof(rxBuffer));
 8000654:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 8000658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fa6a 	bl	8002b38 <memset>
	        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000664:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff fd6f 	bl	800014c <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	f207 41dc 	addw	r1, r7, #1244	@ 0x4dc
 8000676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800067a:	4859      	ldr	r0, [pc, #356]	@ (80007e0 <main+0x684>)
 800067c:	f001 ffd0 	bl	8002620 <HAL_UART_Transmit>
	        HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000680:	f207 511c 	addw	r1, r7, #1308	@ 0x51c
 8000684:	2364      	movs	r3, #100	@ 0x64
 8000686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800068a:	4855      	ldr	r0, [pc, #340]	@ (80007e0 <main+0x684>)
 800068c:	f002 f853 	bl	8002736 <HAL_UART_Receive>
	        channel=100;
 8000690:	2364      	movs	r3, #100	@ 0x64
 8000692:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
 8000696:	e09e      	b.n	80007d6 <main+0x67a>
	      }
	      else if(channel<8 && onoff == 0)
 8000698:	f8d7 3738 	ldr.w	r3, [r7, #1848]	@ 0x738
 800069c:	2b07      	cmp	r3, #7
 800069e:	f73f ae99 	bgt.w	80003d4 <main+0x278>
 80006a2:	f8d7 3734 	ldr.w	r3, [r7, #1844]	@ 0x734
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f47f ae94 	bne.w	80003d4 <main+0x278>
	      {
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b2:	4849      	ldr	r0, [pc, #292]	@ (80007d8 <main+0x67c>)
 80006b4:	f000 ffd6 	bl	8001664 <HAL_GPIO_WritePin>
	        led = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
	        HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
	        HAL_Delay (500);*/



	        sprintf(ATcommand,"AT+CIPSEND=%d,%d\r\n",channel,countB+countN+countT);
 80006be:	f8d7 2728 	ldr.w	r2, [r7, #1832]	@ 0x728
 80006c2:	f8d7 3724 	ldr.w	r3, [r7, #1828]	@ 0x724
 80006c6:	441a      	add	r2, r3
 80006c8:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80006cc:	4413      	add	r3, r2
 80006ce:	f207 40dc 	addw	r0, r7, #1244	@ 0x4dc
 80006d2:	f8d7 2738 	ldr.w	r2, [r7, #1848]	@ 0x738
 80006d6:	4941      	ldr	r1, [pc, #260]	@ (80007dc <main+0x680>)
 80006d8:	f002 fa0e 	bl	8002af8 <siprintf>
	        memset(rxBuffer,0,sizeof(rxBuffer));
 80006dc:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80006e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fa26 	bl	8002b38 <memset>
	        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80006ec:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd2b 	bl	800014c <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	f207 41dc 	addw	r1, r7, #1244	@ 0x4dc
 80006fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000702:	4837      	ldr	r0, [pc, #220]	@ (80007e0 <main+0x684>)
 8000704:	f001 ff8c 	bl	8002620 <HAL_UART_Transmit>
	        HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000708:	f207 511c 	addw	r1, r7, #1308	@ 0x51c
 800070c:	2364      	movs	r3, #100	@ 0x64
 800070e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000712:	4833      	ldr	r0, [pc, #204]	@ (80007e0 <main+0x684>)
 8000714:	f002 f80f 	bl	8002736 <HAL_UART_Receive>
	        if(strstr((char *)rxBuffer,">"))
 8000718:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 800071c:	213e      	movs	r1, #62	@ 0x3e
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fa12 	bl	8002b48 <strchr>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d02c      	beq.n	8000784 <main+0x628>
	        {
	          memset(rxBuffer,0,sizeof(rxBuffer));
 800072a:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 800072e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f002 f9ff 	bl	8002b38 <memset>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandB,countB,1000);
 800073a:	f8d7 3728 	ldr.w	r3, [r7, #1832]	@ 0x728
 800073e:	b29a      	uxth	r2, r3
 8000740:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 8000744:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000748:	4825      	ldr	r0, [pc, #148]	@ (80007e0 <main+0x684>)
 800074a:	f001 ff69 	bl	8002620 <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandN,countN,1000);
 800074e:	f8d7 3724 	ldr.w	r3, [r7, #1828]	@ 0x724
 8000752:	b29a      	uxth	r2, r3
 8000754:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8000758:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075c:	4820      	ldr	r0, [pc, #128]	@ (80007e0 <main+0x684>)
 800075e:	f001 ff5f 	bl	8002620 <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandT,countT,1000);
 8000762:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8000766:	b29a      	uxth	r2, r3
 8000768:	1d39      	adds	r1, r7, #4
 800076a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076e:	481c      	ldr	r0, [pc, #112]	@ (80007e0 <main+0x684>)
 8000770:	f001 ff56 	bl	8002620 <HAL_UART_Transmit>
	            HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000774:	f207 511c 	addw	r1, r7, #1308	@ 0x51c
 8000778:	2364      	movs	r3, #100	@ 0x64
 800077a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800077e:	4818      	ldr	r0, [pc, #96]	@ (80007e0 <main+0x684>)
 8000780:	f001 ffd9 	bl	8002736 <HAL_UART_Receive>
	        }
	        sprintf(ATcommand,"AT+CIPCLOSE=%d\r\n",channel);
 8000784:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 8000788:	f8d7 2738 	ldr.w	r2, [r7, #1848]	@ 0x738
 800078c:	4915      	ldr	r1, [pc, #84]	@ (80007e4 <main+0x688>)
 800078e:	4618      	mov	r0, r3
 8000790:	f002 f9b2 	bl	8002af8 <siprintf>
	        memset(rxBuffer,0,sizeof(rxBuffer));
 8000794:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 8000798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 f9ca 	bl	8002b38 <memset>
	        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80007a4:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fccf 	bl	800014c <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	f207 41dc 	addw	r1, r7, #1244	@ 0x4dc
 80007b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ba:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <main+0x684>)
 80007bc:	f001 ff30 	bl	8002620 <HAL_UART_Transmit>
	        HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 80007c0:	f207 511c 	addw	r1, r7, #1308	@ 0x51c
 80007c4:	2364      	movs	r3, #100	@ 0x64
 80007c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <main+0x684>)
 80007cc:	f001 ffb3 	bl	8002736 <HAL_UART_Receive>
	        channel=100;
 80007d0:	2364      	movs	r3, #100	@ 0x64
 80007d2:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
	  memset(rxBuffer,0,sizeof(rxBuffer));
 80007d6:	e5fd      	b.n	80003d4 <main+0x278>
 80007d8:	40011000 	.word	0x40011000
 80007dc:	0800357c 	.word	0x0800357c
 80007e0:	20000104 	.word	0x20000104
 80007e4:	08003590 	.word	0x08003590

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b090      	sub	sp, #64	@ 0x40
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	2228      	movs	r2, #40	@ 0x28
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 f99e 	bl	8002b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080a:	2302      	movs	r3, #2
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080e:	2301      	movs	r3, #1
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000812:	2310      	movs	r3, #16
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000816:	2300      	movs	r3, #0
 8000818:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	4618      	mov	r0, r3
 8000820:	f000 ff38 	bl	8001694 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800082a:	f000 f905 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f001 f9a6 	bl	8001b98 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000852:	f000 f8f1 	bl	8000a38 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3740      	adds	r7, #64	@ 0x40
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000882:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <MX_TIM3_Init+0xa8>)
 8000884:	4a21      	ldr	r2, [pc, #132]	@ (800090c <MX_TIM3_Init+0xac>)
 8000886:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 30-1;
 8000888:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <MX_TIM3_Init+0xa8>)
 800088a:	221d      	movs	r2, #29
 800088c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <MX_TIM3_Init+0xa8>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3-1;
 8000894:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <MX_TIM3_Init+0xa8>)
 8000896:	2202      	movs	r2, #2
 8000898:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089a:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_TIM3_Init+0xa8>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <MX_TIM3_Init+0xa8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008a6:	4818      	ldr	r0, [pc, #96]	@ (8000908 <MX_TIM3_Init+0xa8>)
 80008a8:	f001 fb04 	bl	8001eb4 <HAL_TIM_PWM_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80008b2:	f000 f8c1 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	4619      	mov	r1, r3
 80008c4:	4810      	ldr	r0, [pc, #64]	@ (8000908 <MX_TIM3_Init+0xa8>)
 80008c6:	f001 fdfd 	bl	80024c4 <HAL_TIMEx_MasterConfigSynchronization>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80008d0:	f000 f8b2 	bl	8000a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d4:	2360      	movs	r3, #96	@ 0x60
 80008d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	4619      	mov	r1, r3
 80008ea:	4807      	ldr	r0, [pc, #28]	@ (8000908 <MX_TIM3_Init+0xa8>)
 80008ec:	f001 fb32 	bl	8001f54 <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80008f6:	f000 f89f 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008fa:	4803      	ldr	r0, [pc, #12]	@ (8000908 <MX_TIM3_Init+0xa8>)
 80008fc:	f000 f924 	bl	8000b48 <HAL_TIM_MspPostInit>

}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	@ 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000078 	.word	0x20000078
 800090c:	40000400 	.word	0x40000400

08000910 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000914:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_USART1_UART_Init+0x4c>)
 8000916:	4a12      	ldr	r2, [pc, #72]	@ (8000960 <MX_USART1_UART_Init+0x50>)
 8000918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800091a:	4b10      	ldr	r3, [pc, #64]	@ (800095c <MX_USART1_UART_Init+0x4c>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <MX_USART1_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_USART1_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <MX_USART1_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_USART1_UART_Init+0x4c>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <MX_USART1_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_USART1_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_USART1_UART_Init+0x4c>)
 8000948:	f001 fe1a 	bl	8002580 <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000952:	f000 f871 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000104 	.word	0x20000104
 8000960:	40013800 	.word	0x40013800

08000964 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_DMA_Init+0x38>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a0b      	ldr	r2, [pc, #44]	@ (800099c <MX_DMA_Init+0x38>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6153      	str	r3, [r2, #20]
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_DMA_Init+0x38>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2010      	movs	r0, #16
 8000988:	f000 fb51 	bl	800102e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800098c:	2010      	movs	r0, #16
 800098e:	f000 fb6a 	bl	8001066 <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <MX_GPIO_Init+0x90>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a30 <MX_GPIO_Init+0x90>)
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <MX_GPIO_Init+0x90>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009cc:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <MX_GPIO_Init+0x90>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <MX_GPIO_Init+0x90>)
 80009d2:	f043 0320 	orr.w	r3, r3, #32
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <MX_GPIO_Init+0x90>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0320 	and.w	r3, r3, #32
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <MX_GPIO_Init+0x90>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a11      	ldr	r2, [pc, #68]	@ (8000a30 <MX_GPIO_Init+0x90>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_GPIO_Init+0x90>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a02:	480c      	ldr	r0, [pc, #48]	@ (8000a34 <MX_GPIO_Init+0x94>)
 8000a04:	f000 fe2e 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_GPIO_Init+0x94>)
 8000a22:	f000 fc9b 	bl	800135c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a26:	bf00      	nop
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40011000 	.word	0x40011000

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <Error_Handler+0x8>

08000a44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_MspInit+0x5c>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a14      	ldr	r2, [pc, #80]	@ (8000aa0 <HAL_MspInit+0x5c>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <HAL_MspInit+0x5c>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <HAL_MspInit+0x5c>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <HAL_MspInit+0x5c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <HAL_MspInit+0x5c>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <HAL_MspInit+0x60>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <HAL_MspInit+0x60>)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010000 	.word	0x40010000

08000aa8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a20      	ldr	r2, [pc, #128]	@ (8000b38 <HAL_TIM_PWM_MspInit+0x90>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d139      	bne.n	8000b2e <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aba:	4b20      	ldr	r3, [pc, #128]	@ (8000b3c <HAL_TIM_PWM_MspInit+0x94>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b3c <HAL_TIM_PWM_MspInit+0x94>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	61d3      	str	r3, [r2, #28]
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <HAL_TIM_PWM_MspInit+0x94>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x98>)
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b44 <HAL_TIM_PWM_MspInit+0x9c>)
 8000ad6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x98>)
 8000ada:	2210      	movs	r2, #16
 8000adc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x98>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x98>)
 8000ae6:	2280      	movs	r2, #128	@ 0x80
 8000ae8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x98>)
 8000aec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000af0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000af2:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x98>)
 8000af4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000af8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x98>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x98>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000b06:	480e      	ldr	r0, [pc, #56]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x98>)
 8000b08:	f000 fac8 	bl	800109c <HAL_DMA_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8000b12:	f7ff ff91 	bl	8000a38 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a09      	ldr	r2, [pc, #36]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x98>)
 8000b1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000b1c:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x98>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a06      	ldr	r2, [pc, #24]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x98>)
 8000b26:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b28:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x98>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40000400 	.word	0x40000400
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	200000c0 	.word	0x200000c0
 8000b44:	4002006c 	.word	0x4002006c

08000b48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba0 <HAL_TIM_MspPostInit+0x58>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d117      	bne.n	8000b98 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <HAL_TIM_MspPostInit+0x5c>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba4 <HAL_TIM_MspPostInit+0x5c>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <HAL_TIM_MspPostInit+0x5c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b80:	2340      	movs	r3, #64	@ 0x40
 8000b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4619      	mov	r1, r3
 8000b92:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <HAL_TIM_MspPostInit+0x60>)
 8000b94:	f000 fbe2 	bl	800135c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40000400 	.word	0x40000400
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010800 	.word	0x40010800

08000bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c38 <HAL_UART_MspInit+0x8c>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d131      	bne.n	8000c30 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <HAL_UART_MspInit+0x90>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c3c <HAL_UART_MspInit+0x90>)
 8000bd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <HAL_UART_MspInit+0x90>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <HAL_UART_MspInit+0x90>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <HAL_UART_MspInit+0x90>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <HAL_UART_MspInit+0x90>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <HAL_UART_MspInit+0x94>)
 8000c12:	f000 fba3 	bl	800135c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <HAL_UART_MspInit+0x94>)
 8000c2c:	f000 fb96 	bl	800135c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40013800 	.word	0x40013800
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010800 	.word	0x40010800

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <NMI_Handler+0x4>

08000c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f8b4 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <DMA1_Channel6_IRQHandler+0x10>)
 8000ca2:	f000 fa55 	bl	8001150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000c0 	.word	0x200000c0

08000cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb8:	4a14      	ldr	r2, [pc, #80]	@ (8000d0c <_sbrk+0x5c>)
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <_sbrk+0x60>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <_sbrk+0x64>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	@ (8000d18 <_sbrk+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d207      	bcs.n	8000cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce0:	f001 ff56 	bl	8002b90 <__errno>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	e009      	b.n	8000d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	@ (8000d14 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a05      	ldr	r2, [pc, #20]	@ (8000d14 <_sbrk+0x64>)
 8000d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20005000 	.word	0x20005000
 8000d10:	00000400 	.word	0x00000400
 8000d14:	2000014c 	.word	0x2000014c
 8000d18:	200002a0 	.word	0x200002a0

08000d1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d28:	f7ff fff8 	bl	8000d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d2c:	480b      	ldr	r0, [pc, #44]	@ (8000d5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d2e:	490c      	ldr	r1, [pc, #48]	@ (8000d60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d30:	4a0c      	ldr	r2, [pc, #48]	@ (8000d64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a09      	ldr	r2, [pc, #36]	@ (8000d68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d44:	4c09      	ldr	r4, [pc, #36]	@ (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d52:	f001 ff23 	bl	8002b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d56:	f7ff fa01 	bl	800015c <main>
  bx lr
 8000d5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d64:	08003614 	.word	0x08003614
  ldr r2, =_sbss
 8000d68:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d6c:	2000029c 	.word	0x2000029c

08000d70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC1_2_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <HAL_Init+0x28>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	@ (8000d9c <HAL_Init+0x28>)
 8000d7e:	f043 0310 	orr.w	r3, r3, #16
 8000d82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f947 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 f808 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fe58 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40022000 	.word	0x40022000

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <HAL_InitTick+0x54>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x58>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f95f 	bl	8001082 <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f000 f927 	bl	800102e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	@ (8000dfc <HAL_InitTick+0x5c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <HAL_IncTick+0x1c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <HAL_IncTick+0x20>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a03      	ldr	r2, [pc, #12]	@ (8000e20 <HAL_IncTick+0x20>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000150 	.word	0x20000150

08000e24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b02      	ldr	r3, [pc, #8]	@ (8000e34 <HAL_GetTick+0x10>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	20000150 	.word	0x20000150

08000e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e40:	f7ff fff0 	bl	8000e24 <HAL_GetTick>
 8000e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e50:	d005      	beq.n	8000e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_Delay+0x44>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e5e:	bf00      	nop
 8000e60:	f7ff ffe0 	bl	8000e24 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d8f7      	bhi.n	8000e60 <HAL_Delay+0x28>
  {
  }
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4906      	ldr	r1, [pc, #24]	@ (8000f18 <__NVIC_EnableIRQ+0x34>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	@ (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	@ (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	@ 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f1c3 0307 	rsb	r3, r3, #7
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	bf28      	it	cs
 8000f8e:	2304      	movcs	r3, #4
 8000f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3304      	adds	r3, #4
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d902      	bls.n	8000fa0 <NVIC_EncodePriority+0x30>
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3b03      	subs	r3, #3
 8000f9e:	e000      	b.n	8000fa2 <NVIC_EncodePriority+0x32>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	4313      	orrs	r3, r2
         );
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	@ 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f7ff ff90 	bl	8000f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff2d 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001040:	f7ff ff42 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 8001044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f7ff ff90 	bl	8000f70 <NVIC_EncodePriority>
 8001050:	4602      	mov	r2, r0
 8001052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff5f 	bl	8000f1c <__NVIC_SetPriority>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff35 	bl	8000ee4 <__NVIC_EnableIRQ>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffa2 	bl	8000fd4 <SysTick_Config>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e043      	b.n	800113a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <HAL_DMA_Init+0xa8>)
 80010ba:	4413      	add	r3, r2
 80010bc:	4a22      	ldr	r2, [pc, #136]	@ (8001148 <HAL_DMA_Init+0xac>)
 80010be:	fba2 2303 	umull	r2, r3, r2, r3
 80010c2:	091b      	lsrs	r3, r3, #4
 80010c4:	009a      	lsls	r2, r3, #2
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a1f      	ldr	r2, [pc, #124]	@ (800114c <HAL_DMA_Init+0xb0>)
 80010ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2202      	movs	r2, #2
 80010d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80010e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80010ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800110c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	bffdfff8 	.word	0xbffdfff8
 8001148:	cccccccd 	.word	0xcccccccd
 800114c:	40020000 	.word	0x40020000

08001150 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	2204      	movs	r2, #4
 800116e:	409a      	lsls	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4013      	ands	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d04f      	beq.n	8001218 <HAL_DMA_IRQHandler+0xc8>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	2b00      	cmp	r3, #0
 8001180:	d04a      	beq.n	8001218 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0320 	and.w	r3, r3, #32
 800118c:	2b00      	cmp	r3, #0
 800118e:	d107      	bne.n	80011a0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0204 	bic.w	r2, r2, #4
 800119e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a66      	ldr	r2, [pc, #408]	@ (8001340 <HAL_DMA_IRQHandler+0x1f0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d029      	beq.n	80011fe <HAL_DMA_IRQHandler+0xae>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a65      	ldr	r2, [pc, #404]	@ (8001344 <HAL_DMA_IRQHandler+0x1f4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d022      	beq.n	80011fa <HAL_DMA_IRQHandler+0xaa>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a63      	ldr	r2, [pc, #396]	@ (8001348 <HAL_DMA_IRQHandler+0x1f8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d01a      	beq.n	80011f4 <HAL_DMA_IRQHandler+0xa4>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a62      	ldr	r2, [pc, #392]	@ (800134c <HAL_DMA_IRQHandler+0x1fc>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d012      	beq.n	80011ee <HAL_DMA_IRQHandler+0x9e>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a60      	ldr	r2, [pc, #384]	@ (8001350 <HAL_DMA_IRQHandler+0x200>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00a      	beq.n	80011e8 <HAL_DMA_IRQHandler+0x98>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a5f      	ldr	r2, [pc, #380]	@ (8001354 <HAL_DMA_IRQHandler+0x204>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d102      	bne.n	80011e2 <HAL_DMA_IRQHandler+0x92>
 80011dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011e0:	e00e      	b.n	8001200 <HAL_DMA_IRQHandler+0xb0>
 80011e2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80011e6:	e00b      	b.n	8001200 <HAL_DMA_IRQHandler+0xb0>
 80011e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80011ec:	e008      	b.n	8001200 <HAL_DMA_IRQHandler+0xb0>
 80011ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011f2:	e005      	b.n	8001200 <HAL_DMA_IRQHandler+0xb0>
 80011f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011f8:	e002      	b.n	8001200 <HAL_DMA_IRQHandler+0xb0>
 80011fa:	2340      	movs	r3, #64	@ 0x40
 80011fc:	e000      	b.n	8001200 <HAL_DMA_IRQHandler+0xb0>
 80011fe:	2304      	movs	r3, #4
 8001200:	4a55      	ldr	r2, [pc, #340]	@ (8001358 <HAL_DMA_IRQHandler+0x208>)
 8001202:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 8094 	beq.w	8001336 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001216:	e08e      	b.n	8001336 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	2202      	movs	r2, #2
 800121e:	409a      	lsls	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d056      	beq.n	80012d6 <HAL_DMA_IRQHandler+0x186>
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d051      	beq.n	80012d6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10b      	bne.n	8001258 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 020a 	bic.w	r2, r2, #10
 800124e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a38      	ldr	r2, [pc, #224]	@ (8001340 <HAL_DMA_IRQHandler+0x1f0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d029      	beq.n	80012b6 <HAL_DMA_IRQHandler+0x166>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a37      	ldr	r2, [pc, #220]	@ (8001344 <HAL_DMA_IRQHandler+0x1f4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d022      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x162>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a35      	ldr	r2, [pc, #212]	@ (8001348 <HAL_DMA_IRQHandler+0x1f8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01a      	beq.n	80012ac <HAL_DMA_IRQHandler+0x15c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a34      	ldr	r2, [pc, #208]	@ (800134c <HAL_DMA_IRQHandler+0x1fc>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d012      	beq.n	80012a6 <HAL_DMA_IRQHandler+0x156>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a32      	ldr	r2, [pc, #200]	@ (8001350 <HAL_DMA_IRQHandler+0x200>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00a      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x150>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a31      	ldr	r2, [pc, #196]	@ (8001354 <HAL_DMA_IRQHandler+0x204>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d102      	bne.n	800129a <HAL_DMA_IRQHandler+0x14a>
 8001294:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001298:	e00e      	b.n	80012b8 <HAL_DMA_IRQHandler+0x168>
 800129a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800129e:	e00b      	b.n	80012b8 <HAL_DMA_IRQHandler+0x168>
 80012a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012a4:	e008      	b.n	80012b8 <HAL_DMA_IRQHandler+0x168>
 80012a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012aa:	e005      	b.n	80012b8 <HAL_DMA_IRQHandler+0x168>
 80012ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012b0:	e002      	b.n	80012b8 <HAL_DMA_IRQHandler+0x168>
 80012b2:	2320      	movs	r3, #32
 80012b4:	e000      	b.n	80012b8 <HAL_DMA_IRQHandler+0x168>
 80012b6:	2302      	movs	r3, #2
 80012b8:	4a27      	ldr	r2, [pc, #156]	@ (8001358 <HAL_DMA_IRQHandler+0x208>)
 80012ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d034      	beq.n	8001336 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80012d4:	e02f      	b.n	8001336 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	2208      	movs	r2, #8
 80012dc:	409a      	lsls	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d028      	beq.n	8001338 <HAL_DMA_IRQHandler+0x1e8>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d023      	beq.n	8001338 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 020e 	bic.w	r2, r2, #14
 80012fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001308:	2101      	movs	r1, #1
 800130a:	fa01 f202 	lsl.w	r2, r1, r2
 800130e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	2b00      	cmp	r3, #0
 800132c:	d004      	beq.n	8001338 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	4798      	blx	r3
    }
  }
  return;
 8001336:	bf00      	nop
 8001338:	bf00      	nop
}
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40020008 	.word	0x40020008
 8001344:	4002001c 	.word	0x4002001c
 8001348:	40020030 	.word	0x40020030
 800134c:	40020044 	.word	0x40020044
 8001350:	40020058 	.word	0x40020058
 8001354:	4002006c 	.word	0x4002006c
 8001358:	40020000 	.word	0x40020000

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b08b      	sub	sp, #44	@ 0x2c
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136e:	e169      	b.n	8001644 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001370:	2201      	movs	r2, #1
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	429a      	cmp	r2, r3
 800138a:	f040 8158 	bne.w	800163e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4a9a      	ldr	r2, [pc, #616]	@ (80015fc <HAL_GPIO_Init+0x2a0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d05e      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 8001398:	4a98      	ldr	r2, [pc, #608]	@ (80015fc <HAL_GPIO_Init+0x2a0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d875      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 800139e:	4a98      	ldr	r2, [pc, #608]	@ (8001600 <HAL_GPIO_Init+0x2a4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d058      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013a4:	4a96      	ldr	r2, [pc, #600]	@ (8001600 <HAL_GPIO_Init+0x2a4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d86f      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013aa:	4a96      	ldr	r2, [pc, #600]	@ (8001604 <HAL_GPIO_Init+0x2a8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d052      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013b0:	4a94      	ldr	r2, [pc, #592]	@ (8001604 <HAL_GPIO_Init+0x2a8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d869      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013b6:	4a94      	ldr	r2, [pc, #592]	@ (8001608 <HAL_GPIO_Init+0x2ac>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d04c      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013bc:	4a92      	ldr	r2, [pc, #584]	@ (8001608 <HAL_GPIO_Init+0x2ac>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d863      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013c2:	4a92      	ldr	r2, [pc, #584]	@ (800160c <HAL_GPIO_Init+0x2b0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d046      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013c8:	4a90      	ldr	r2, [pc, #576]	@ (800160c <HAL_GPIO_Init+0x2b0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d85d      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013ce:	2b12      	cmp	r3, #18
 80013d0:	d82a      	bhi.n	8001428 <HAL_GPIO_Init+0xcc>
 80013d2:	2b12      	cmp	r3, #18
 80013d4:	d859      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013d6:	a201      	add	r2, pc, #4	@ (adr r2, 80013dc <HAL_GPIO_Init+0x80>)
 80013d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013dc:	08001457 	.word	0x08001457
 80013e0:	08001431 	.word	0x08001431
 80013e4:	08001443 	.word	0x08001443
 80013e8:	08001485 	.word	0x08001485
 80013ec:	0800148b 	.word	0x0800148b
 80013f0:	0800148b 	.word	0x0800148b
 80013f4:	0800148b 	.word	0x0800148b
 80013f8:	0800148b 	.word	0x0800148b
 80013fc:	0800148b 	.word	0x0800148b
 8001400:	0800148b 	.word	0x0800148b
 8001404:	0800148b 	.word	0x0800148b
 8001408:	0800148b 	.word	0x0800148b
 800140c:	0800148b 	.word	0x0800148b
 8001410:	0800148b 	.word	0x0800148b
 8001414:	0800148b 	.word	0x0800148b
 8001418:	0800148b 	.word	0x0800148b
 800141c:	0800148b 	.word	0x0800148b
 8001420:	08001439 	.word	0x08001439
 8001424:	0800144d 	.word	0x0800144d
 8001428:	4a79      	ldr	r2, [pc, #484]	@ (8001610 <HAL_GPIO_Init+0x2b4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d013      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800142e:	e02c      	b.n	800148a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e029      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	3304      	adds	r3, #4
 800143e:	623b      	str	r3, [r7, #32]
          break;
 8001440:	e024      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	3308      	adds	r3, #8
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e01f      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	330c      	adds	r3, #12
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e01a      	b.n	800148c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800145e:	2304      	movs	r3, #4
 8001460:	623b      	str	r3, [r7, #32]
          break;
 8001462:	e013      	b.n	800148c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d105      	bne.n	8001478 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800146c:	2308      	movs	r3, #8
 800146e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	611a      	str	r2, [r3, #16]
          break;
 8001476:	e009      	b.n	800148c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001478:	2308      	movs	r3, #8
 800147a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	615a      	str	r2, [r3, #20]
          break;
 8001482:	e003      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
          break;
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x130>
          break;
 800148a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2bff      	cmp	r3, #255	@ 0xff
 8001490:	d801      	bhi.n	8001496 <HAL_GPIO_Init+0x13a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	e001      	b.n	800149a <HAL_GPIO_Init+0x13e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3304      	adds	r3, #4
 800149a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2bff      	cmp	r3, #255	@ 0xff
 80014a0:	d802      	bhi.n	80014a8 <HAL_GPIO_Init+0x14c>
 80014a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	e002      	b.n	80014ae <HAL_GPIO_Init+0x152>
 80014a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014aa:	3b08      	subs	r3, #8
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	210f      	movs	r1, #15
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	6a39      	ldr	r1, [r7, #32]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	431a      	orrs	r2, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80b1 	beq.w	800163e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001614 <HAL_GPIO_Init+0x2b8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001614 <HAL_GPIO_Init+0x2b8>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001614 <HAL_GPIO_Init+0x2b8>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014f4:	4a48      	ldr	r2, [pc, #288]	@ (8001618 <HAL_GPIO_Init+0x2bc>)
 80014f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a40      	ldr	r2, [pc, #256]	@ (800161c <HAL_GPIO_Init+0x2c0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d013      	beq.n	8001548 <HAL_GPIO_Init+0x1ec>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a3f      	ldr	r2, [pc, #252]	@ (8001620 <HAL_GPIO_Init+0x2c4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d00d      	beq.n	8001544 <HAL_GPIO_Init+0x1e8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a3e      	ldr	r2, [pc, #248]	@ (8001624 <HAL_GPIO_Init+0x2c8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d007      	beq.n	8001540 <HAL_GPIO_Init+0x1e4>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3d      	ldr	r2, [pc, #244]	@ (8001628 <HAL_GPIO_Init+0x2cc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d101      	bne.n	800153c <HAL_GPIO_Init+0x1e0>
 8001538:	2303      	movs	r3, #3
 800153a:	e006      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 800153c:	2304      	movs	r3, #4
 800153e:	e004      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001540:	2302      	movs	r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001548:	2300      	movs	r3, #0
 800154a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800154c:	f002 0203 	and.w	r2, r2, #3
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	4093      	lsls	r3, r2
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800155a:	492f      	ldr	r1, [pc, #188]	@ (8001618 <HAL_GPIO_Init+0x2bc>)
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001574:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <HAL_GPIO_Init+0x2d0>)
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	492c      	ldr	r1, [pc, #176]	@ (800162c <HAL_GPIO_Init+0x2d0>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	608b      	str	r3, [r1, #8]
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001582:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <HAL_GPIO_Init+0x2d0>)
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	43db      	mvns	r3, r3
 800158a:	4928      	ldr	r1, [pc, #160]	@ (800162c <HAL_GPIO_Init+0x2d0>)
 800158c:	4013      	ands	r3, r2
 800158e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800159c:	4b23      	ldr	r3, [pc, #140]	@ (800162c <HAL_GPIO_Init+0x2d0>)
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	4922      	ldr	r1, [pc, #136]	@ (800162c <HAL_GPIO_Init+0x2d0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	60cb      	str	r3, [r1, #12]
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015aa:	4b20      	ldr	r3, [pc, #128]	@ (800162c <HAL_GPIO_Init+0x2d0>)
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	491e      	ldr	r1, [pc, #120]	@ (800162c <HAL_GPIO_Init+0x2d0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015c4:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_GPIO_Init+0x2d0>)
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4918      	ldr	r1, [pc, #96]	@ (800162c <HAL_GPIO_Init+0x2d0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015d2:	4b16      	ldr	r3, [pc, #88]	@ (800162c <HAL_GPIO_Init+0x2d0>)
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	43db      	mvns	r3, r3
 80015da:	4914      	ldr	r1, [pc, #80]	@ (800162c <HAL_GPIO_Init+0x2d0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d021      	beq.n	8001630 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <HAL_GPIO_Init+0x2d0>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	490e      	ldr	r1, [pc, #56]	@ (800162c <HAL_GPIO_Init+0x2d0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]
 80015f8:	e021      	b.n	800163e <HAL_GPIO_Init+0x2e2>
 80015fa:	bf00      	nop
 80015fc:	10320000 	.word	0x10320000
 8001600:	10310000 	.word	0x10310000
 8001604:	10220000 	.word	0x10220000
 8001608:	10210000 	.word	0x10210000
 800160c:	10120000 	.word	0x10120000
 8001610:	10110000 	.word	0x10110000
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000
 800161c:	40010800 	.word	0x40010800
 8001620:	40010c00 	.word	0x40010c00
 8001624:	40011000 	.word	0x40011000
 8001628:	40011400 	.word	0x40011400
 800162c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <HAL_GPIO_Init+0x304>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	43db      	mvns	r3, r3
 8001638:	4909      	ldr	r1, [pc, #36]	@ (8001660 <HAL_GPIO_Init+0x304>)
 800163a:	4013      	ands	r3, r2
 800163c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	3301      	adds	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164a:	fa22 f303 	lsr.w	r3, r2, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	f47f ae8e 	bne.w	8001370 <HAL_GPIO_Init+0x14>
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	372c      	adds	r7, #44	@ 0x2c
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001680:	e003      	b.n	800168a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	041a      	lsls	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	611a      	str	r2, [r3, #16]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e272      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 8087 	beq.w	80017c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b4:	4b92      	ldr	r3, [pc, #584]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d00c      	beq.n	80016da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016c0:	4b8f      	ldr	r3, [pc, #572]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d112      	bne.n	80016f2 <HAL_RCC_OscConfig+0x5e>
 80016cc:	4b8c      	ldr	r3, [pc, #560]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016d8:	d10b      	bne.n	80016f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016da:	4b89      	ldr	r3, [pc, #548]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d06c      	beq.n	80017c0 <HAL_RCC_OscConfig+0x12c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d168      	bne.n	80017c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e24c      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x76>
 80016fc:	4b80      	ldr	r3, [pc, #512]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a7f      	ldr	r2, [pc, #508]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	e02e      	b.n	8001768 <HAL_RCC_OscConfig+0xd4>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x98>
 8001712:	4b7b      	ldr	r3, [pc, #492]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a7a      	ldr	r2, [pc, #488]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b78      	ldr	r3, [pc, #480]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a77      	ldr	r2, [pc, #476]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001724:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e01d      	b.n	8001768 <HAL_RCC_OscConfig+0xd4>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0xbc>
 8001736:	4b72      	ldr	r3, [pc, #456]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a71      	ldr	r2, [pc, #452]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 800173c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b6f      	ldr	r3, [pc, #444]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a6e      	ldr	r2, [pc, #440]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e00b      	b.n	8001768 <HAL_RCC_OscConfig+0xd4>
 8001750:	4b6b      	ldr	r3, [pc, #428]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a6a      	ldr	r2, [pc, #424]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b68      	ldr	r3, [pc, #416]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a67      	ldr	r2, [pc, #412]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001766:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d013      	beq.n	8001798 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fb58 	bl	8000e24 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fb54 	bl	8000e24 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	@ 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e200      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	4b5d      	ldr	r3, [pc, #372]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0xe4>
 8001796:	e014      	b.n	80017c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fb44 	bl	8000e24 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fb40 	bl	8000e24 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	@ 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e1ec      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b2:	4b53      	ldr	r3, [pc, #332]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x10c>
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d063      	beq.n	8001896 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00b      	beq.n	80017f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017da:	4b49      	ldr	r3, [pc, #292]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d11c      	bne.n	8001820 <HAL_RCC_OscConfig+0x18c>
 80017e6:	4b46      	ldr	r3, [pc, #280]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d116      	bne.n	8001820 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f2:	4b43      	ldr	r3, [pc, #268]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d005      	beq.n	800180a <HAL_RCC_OscConfig+0x176>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d001      	beq.n	800180a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e1c0      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180a:	4b3d      	ldr	r3, [pc, #244]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4939      	ldr	r1, [pc, #228]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181e:	e03a      	b.n	8001896 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d020      	beq.n	800186a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001828:	4b36      	ldr	r3, [pc, #216]	@ (8001904 <HAL_RCC_OscConfig+0x270>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff faf9 	bl	8000e24 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001836:	f7ff faf5 	bl	8000e24 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e1a1      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001848:	4b2d      	ldr	r3, [pc, #180]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001854:	4b2a      	ldr	r3, [pc, #168]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4927      	ldr	r1, [pc, #156]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001864:	4313      	orrs	r3, r2
 8001866:	600b      	str	r3, [r1, #0]
 8001868:	e015      	b.n	8001896 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186a:	4b26      	ldr	r3, [pc, #152]	@ (8001904 <HAL_RCC_OscConfig+0x270>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fad8 	bl	8000e24 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001878:	f7ff fad4 	bl	8000e24 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e180      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d03a      	beq.n	8001918 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d019      	beq.n	80018de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018aa:	4b17      	ldr	r3, [pc, #92]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b0:	f7ff fab8 	bl	8000e24 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff fab4 	bl	8000e24 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e160      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018d6:	2001      	movs	r0, #1
 80018d8:	f000 face 	bl	8001e78 <RCC_Delay>
 80018dc:	e01c      	b.n	8001918 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018de:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <HAL_RCC_OscConfig+0x274>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7ff fa9e 	bl	8000e24 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ea:	e00f      	b.n	800190c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ec:	f7ff fa9a 	bl	8000e24 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d908      	bls.n	800190c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e146      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	42420000 	.word	0x42420000
 8001908:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	4b92      	ldr	r3, [pc, #584]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 800190e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1e9      	bne.n	80018ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a6 	beq.w	8001a72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10d      	bne.n	8001952 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b88      	ldr	r3, [pc, #544]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a87      	ldr	r2, [pc, #540]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b85      	ldr	r3, [pc, #532]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194e:	2301      	movs	r3, #1
 8001950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001952:	4b82      	ldr	r3, [pc, #520]	@ (8001b5c <HAL_RCC_OscConfig+0x4c8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d118      	bne.n	8001990 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b5c <HAL_RCC_OscConfig+0x4c8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a7e      	ldr	r2, [pc, #504]	@ (8001b5c <HAL_RCC_OscConfig+0x4c8>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196a:	f7ff fa5b 	bl	8000e24 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001972:	f7ff fa57 	bl	8000e24 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b64      	cmp	r3, #100	@ 0x64
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e103      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	4b75      	ldr	r3, [pc, #468]	@ (8001b5c <HAL_RCC_OscConfig+0x4c8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x312>
 8001998:	4b6f      	ldr	r3, [pc, #444]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4a6e      	ldr	r2, [pc, #440]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6213      	str	r3, [r2, #32]
 80019a4:	e02d      	b.n	8001a02 <HAL_RCC_OscConfig+0x36e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x334>
 80019ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4a69      	ldr	r2, [pc, #420]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	6213      	str	r3, [r2, #32]
 80019ba:	4b67      	ldr	r3, [pc, #412]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	4a66      	ldr	r2, [pc, #408]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	f023 0304 	bic.w	r3, r3, #4
 80019c4:	6213      	str	r3, [r2, #32]
 80019c6:	e01c      	b.n	8001a02 <HAL_RCC_OscConfig+0x36e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d10c      	bne.n	80019ea <HAL_RCC_OscConfig+0x356>
 80019d0:	4b61      	ldr	r3, [pc, #388]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4a60      	ldr	r2, [pc, #384]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6213      	str	r3, [r2, #32]
 80019dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a5d      	ldr	r2, [pc, #372]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	e00b      	b.n	8001a02 <HAL_RCC_OscConfig+0x36e>
 80019ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	4b58      	ldr	r3, [pc, #352]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a57      	ldr	r2, [pc, #348]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d015      	beq.n	8001a36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fa0b 	bl	8000e24 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff fa07 	bl	8000e24 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e0b1      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a28:	4b4b      	ldr	r3, [pc, #300]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0ee      	beq.n	8001a12 <HAL_RCC_OscConfig+0x37e>
 8001a34:	e014      	b.n	8001a60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7ff f9f5 	bl	8000e24 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff f9f1 	bl	8000e24 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e09b      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a54:	4b40      	ldr	r3, [pc, #256]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1ee      	bne.n	8001a3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d105      	bne.n	8001a72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a66:	4b3c      	ldr	r3, [pc, #240]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a3b      	ldr	r2, [pc, #236]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8087 	beq.w	8001b8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7c:	4b36      	ldr	r3, [pc, #216]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d061      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d146      	bne.n	8001b1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a90:	4b33      	ldr	r3, [pc, #204]	@ (8001b60 <HAL_RCC_OscConfig+0x4cc>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7ff f9c5 	bl	8000e24 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff f9c1 	bl	8000e24 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e06d      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab0:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac4:	d108      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ac6:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	4921      	ldr	r1, [pc, #132]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a19      	ldr	r1, [r3, #32]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	491b      	ldr	r1, [pc, #108]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <HAL_RCC_OscConfig+0x4cc>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff f995 	bl	8000e24 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff f991 	bl	8000e24 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e03d      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b10:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x46a>
 8001b1c:	e035      	b.n	8001b8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <HAL_RCC_OscConfig+0x4cc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff f97e 	bl	8000e24 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f97a 	bl	8000e24 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e026      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x498>
 8001b4a:	e01e      	b.n	8001b8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e019      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b64:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <HAL_RCC_OscConfig+0x500>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000

08001b98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0d0      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bac:	4b6a      	ldr	r3, [pc, #424]	@ (8001d58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d910      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b67      	ldr	r3, [pc, #412]	@ (8001d58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 0207 	bic.w	r2, r3, #7
 8001bc2:	4965      	ldr	r1, [pc, #404]	@ (8001d58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b63      	ldr	r3, [pc, #396]	@ (8001d58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0b8      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d020      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf4:	4b59      	ldr	r3, [pc, #356]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4a58      	ldr	r2, [pc, #352]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c0c:	4b53      	ldr	r3, [pc, #332]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4a52      	ldr	r2, [pc, #328]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c18:	4b50      	ldr	r3, [pc, #320]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	494d      	ldr	r1, [pc, #308]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d040      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	4b47      	ldr	r3, [pc, #284]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d115      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e07f      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c56:	4b41      	ldr	r3, [pc, #260]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d109      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e073      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c66:	4b3d      	ldr	r3, [pc, #244]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e06b      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c76:	4b39      	ldr	r3, [pc, #228]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f023 0203 	bic.w	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4936      	ldr	r1, [pc, #216]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c88:	f7ff f8cc 	bl	8000e24 <HAL_GetTick>
 8001c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c90:	f7ff f8c8 	bl	8000e24 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e053      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 020c 	and.w	r2, r3, #12
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d1eb      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b27      	ldr	r3, [pc, #156]	@ (8001d58 <HAL_RCC_ClockConfig+0x1c0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d210      	bcs.n	8001ce8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b24      	ldr	r3, [pc, #144]	@ (8001d58 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 0207 	bic.w	r2, r3, #7
 8001cce:	4922      	ldr	r1, [pc, #136]	@ (8001d58 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b20      	ldr	r3, [pc, #128]	@ (8001d58 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e032      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf4:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4916      	ldr	r1, [pc, #88]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d12:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	490e      	ldr	r1, [pc, #56]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d26:	f000 f821 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	490a      	ldr	r1, [pc, #40]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c8>)
 8001d38:	5ccb      	ldrb	r3, [r1, r3]
 8001d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3e:	4a09      	ldr	r2, [pc, #36]	@ (8001d64 <HAL_RCC_ClockConfig+0x1cc>)
 8001d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d42:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <HAL_RCC_ClockConfig+0x1d0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff f82a 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40022000 	.word	0x40022000
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	080035a4 	.word	0x080035a4
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000004 	.word	0x20000004

08001d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d86:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d002      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x30>
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d003      	beq.n	8001da2 <HAL_RCC_GetSysClockFreq+0x36>
 8001d9a:	e027      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d9c:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d9e:	613b      	str	r3, [r7, #16]
      break;
 8001da0:	e027      	b.n	8001df2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	0c9b      	lsrs	r3, r3, #18
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	4a17      	ldr	r2, [pc, #92]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dac:	5cd3      	ldrb	r3, [r2, r3]
 8001dae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d010      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dba:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	0c5b      	lsrs	r3, r3, #17
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	4a11      	ldr	r2, [pc, #68]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dce:	fb03 f202 	mul.w	r2, r3, r2
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	e004      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a0c      	ldr	r2, [pc, #48]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001de0:	fb02 f303 	mul.w	r3, r2, r3
 8001de4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	613b      	str	r3, [r7, #16]
      break;
 8001dea:	e002      	b.n	8001df2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dee:	613b      	str	r3, [r7, #16]
      break;
 8001df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001df2:	693b      	ldr	r3, [r7, #16]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	371c      	adds	r7, #28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000
 8001e04:	007a1200 	.word	0x007a1200
 8001e08:	080035bc 	.word	0x080035bc
 8001e0c:	080035cc 	.word	0x080035cc
 8001e10:	003d0900 	.word	0x003d0900

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b02      	ldr	r3, [pc, #8]	@ (8001e24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	20000000 	.word	0x20000000

08001e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e2c:	f7ff fff2 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	4903      	ldr	r1, [pc, #12]	@ (8001e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	080035b4 	.word	0x080035b4

08001e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e54:	f7ff ffde 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	0adb      	lsrs	r3, r3, #11
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4903      	ldr	r1, [pc, #12]	@ (8001e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	080035b4 	.word	0x080035b4

08001e78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e80:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <RCC_Delay+0x34>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <RCC_Delay+0x38>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	0a5b      	lsrs	r3, r3, #9
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e94:	bf00      	nop
  }
  while (Delay --);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1e5a      	subs	r2, r3, #1
 8001e9a:	60fa      	str	r2, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f9      	bne.n	8001e94 <RCC_Delay+0x1c>
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	10624dd3 	.word	0x10624dd3

08001eb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e041      	b.n	8001f4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fde4 	bl	8000aa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f000 f8f0 	bl	80020d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e0ae      	b.n	80020d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b0c      	cmp	r3, #12
 8001f7e:	f200 809f 	bhi.w	80020c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f82:	a201      	add	r2, pc, #4	@ (adr r2, 8001f88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f88:	08001fbd 	.word	0x08001fbd
 8001f8c:	080020c1 	.word	0x080020c1
 8001f90:	080020c1 	.word	0x080020c1
 8001f94:	080020c1 	.word	0x080020c1
 8001f98:	08001ffd 	.word	0x08001ffd
 8001f9c:	080020c1 	.word	0x080020c1
 8001fa0:	080020c1 	.word	0x080020c1
 8001fa4:	080020c1 	.word	0x080020c1
 8001fa8:	0800203f 	.word	0x0800203f
 8001fac:	080020c1 	.word	0x080020c1
 8001fb0:	080020c1 	.word	0x080020c1
 8001fb4:	080020c1 	.word	0x080020c1
 8001fb8:	0800207f 	.word	0x0800207f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f8f6 	bl	80021b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699a      	ldr	r2, [r3, #24]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0208 	orr.w	r2, r2, #8
 8001fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0204 	bic.w	r2, r2, #4
 8001fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6999      	ldr	r1, [r3, #24]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	619a      	str	r2, [r3, #24]
      break;
 8001ffa:	e064      	b.n	80020c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f93c 	bl	8002280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6999      	ldr	r1, [r3, #24]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	021a      	lsls	r2, r3, #8
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	619a      	str	r2, [r3, #24]
      break;
 800203c:	e043      	b.n	80020c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f985 	bl	8002354 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69da      	ldr	r2, [r3, #28]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0208 	orr.w	r2, r2, #8
 8002058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0204 	bic.w	r2, r2, #4
 8002068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69d9      	ldr	r1, [r3, #28]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	61da      	str	r2, [r3, #28]
      break;
 800207c:	e023      	b.n	80020c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f9cf 	bl	8002428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69da      	ldr	r2, [r3, #28]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69da      	ldr	r2, [r3, #28]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	69d9      	ldr	r1, [r3, #28]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	021a      	lsls	r2, r3, #8
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	61da      	str	r2, [r3, #28]
      break;
 80020be:	e002      	b.n	80020c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	75fb      	strb	r3, [r7, #23]
      break;
 80020c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a2f      	ldr	r2, [pc, #188]	@ (80021a8 <TIM_Base_SetConfig+0xd0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00b      	beq.n	8002108 <TIM_Base_SetConfig+0x30>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020f6:	d007      	beq.n	8002108 <TIM_Base_SetConfig+0x30>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a2c      	ldr	r2, [pc, #176]	@ (80021ac <TIM_Base_SetConfig+0xd4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d003      	beq.n	8002108 <TIM_Base_SetConfig+0x30>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a2b      	ldr	r2, [pc, #172]	@ (80021b0 <TIM_Base_SetConfig+0xd8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d108      	bne.n	800211a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800210e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a22      	ldr	r2, [pc, #136]	@ (80021a8 <TIM_Base_SetConfig+0xd0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00b      	beq.n	800213a <TIM_Base_SetConfig+0x62>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002128:	d007      	beq.n	800213a <TIM_Base_SetConfig+0x62>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a1f      	ldr	r2, [pc, #124]	@ (80021ac <TIM_Base_SetConfig+0xd4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d003      	beq.n	800213a <TIM_Base_SetConfig+0x62>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a1e      	ldr	r2, [pc, #120]	@ (80021b0 <TIM_Base_SetConfig+0xd8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d108      	bne.n	800214c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a0d      	ldr	r2, [pc, #52]	@ (80021a8 <TIM_Base_SetConfig+0xd0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f023 0201 	bic.w	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]
  }
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	40012c00 	.word	0x40012c00
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40000800 	.word	0x40000800

080021b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f023 0201 	bic.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0303 	bic.w	r3, r3, #3
 80021ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f023 0302 	bic.w	r3, r3, #2
 80021fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a1c      	ldr	r2, [pc, #112]	@ (800227c <TIM_OC1_SetConfig+0xc8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d10c      	bne.n	800222a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f023 0308 	bic.w	r3, r3, #8
 8002216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a13      	ldr	r2, [pc, #76]	@ (800227c <TIM_OC1_SetConfig+0xc8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d111      	bne.n	8002256 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	621a      	str	r2, [r3, #32]
}
 8002270:	bf00      	nop
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40012c00 	.word	0x40012c00

08002280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f023 0210 	bic.w	r2, r3, #16
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f023 0320 	bic.w	r3, r3, #32
 80022ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a1d      	ldr	r2, [pc, #116]	@ (8002350 <TIM_OC2_SetConfig+0xd0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d10d      	bne.n	80022fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a14      	ldr	r2, [pc, #80]	@ (8002350 <TIM_OC2_SetConfig+0xd0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d113      	bne.n	800232c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800230a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	621a      	str	r2, [r3, #32]
}
 8002346:	bf00      	nop
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	40012c00 	.word	0x40012c00

08002354 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f023 0303 	bic.w	r3, r3, #3
 800238a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800239c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002424 <TIM_OC3_SetConfig+0xd0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10d      	bne.n	80023ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a14      	ldr	r2, [pc, #80]	@ (8002424 <TIM_OC3_SetConfig+0xd0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d113      	bne.n	80023fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80023e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	621a      	str	r2, [r3, #32]
}
 8002418:	bf00      	nop
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40012c00 	.word	0x40012c00

08002428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800245e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	031b      	lsls	r3, r3, #12
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a0f      	ldr	r2, [pc, #60]	@ (80024c0 <TIM_OC4_SetConfig+0x98>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d109      	bne.n	800249c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800248e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	019b      	lsls	r3, r3, #6
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	621a      	str	r2, [r3, #32]
}
 80024b6:	bf00      	nop
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	40012c00 	.word	0x40012c00

080024c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024d8:	2302      	movs	r3, #2
 80024da:	e046      	b.n	800256a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a16      	ldr	r2, [pc, #88]	@ (8002574 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00e      	beq.n	800253e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002528:	d009      	beq.n	800253e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a12      	ldr	r2, [pc, #72]	@ (8002578 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d004      	beq.n	800253e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a10      	ldr	r2, [pc, #64]	@ (800257c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10c      	bne.n	8002558 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	4313      	orrs	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	40012c00 	.word	0x40012c00
 8002578:	40000400 	.word	0x40000400
 800257c:	40000800 	.word	0x40000800

08002580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e042      	b.n	8002618 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe fb00 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2224      	movs	r2, #36	@ 0x24
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 fa09 	bl	80029dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695a      	ldr	r2, [r3, #20]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	@ 0x28
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b20      	cmp	r3, #32
 800263e:	d175      	bne.n	800272c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_UART_Transmit+0x2c>
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e06e      	b.n	800272e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2221      	movs	r2, #33	@ 0x21
 800265a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800265e:	f7fe fbe1 	bl	8000e24 <HAL_GetTick>
 8002662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	88fa      	ldrh	r2, [r7, #6]
 8002668:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	88fa      	ldrh	r2, [r7, #6]
 800266e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002678:	d108      	bne.n	800268c <HAL_UART_Transmit+0x6c>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d104      	bne.n	800268c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	e003      	b.n	8002694 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002690:	2300      	movs	r3, #0
 8002692:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002694:	e02e      	b.n	80026f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2200      	movs	r2, #0
 800269e:	2180      	movs	r1, #128	@ 0x80
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f8df 	bl	8002864 <UART_WaitOnFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e03a      	b.n	800272e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10b      	bne.n	80026d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	3302      	adds	r3, #2
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	e007      	b.n	80026e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	3301      	adds	r3, #1
 80026e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1cb      	bne.n	8002696 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2200      	movs	r2, #0
 8002706:	2140      	movs	r1, #64	@ 0x40
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f8ab 	bl	8002864 <UART_WaitOnFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e006      	b.n	800272e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
  }
}
 800272e:	4618      	mov	r0, r3
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b08a      	sub	sp, #40	@ 0x28
 800273a:	af02      	add	r7, sp, #8
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	4613      	mov	r3, r2
 8002744:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b20      	cmp	r3, #32
 8002754:	f040 8081 	bne.w	800285a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_UART_Receive+0x2e>
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e079      	b.n	800285c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2222      	movs	r2, #34	@ 0x22
 8002772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800277c:	f7fe fb52 	bl	8000e24 <HAL_GetTick>
 8002780:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	88fa      	ldrh	r2, [r7, #6]
 8002786:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	88fa      	ldrh	r2, [r7, #6]
 800278c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002796:	d108      	bne.n	80027aa <HAL_UART_Receive+0x74>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d104      	bne.n	80027aa <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	61bb      	str	r3, [r7, #24]
 80027a8:	e003      	b.n	80027b2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80027b2:	e047      	b.n	8002844 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2200      	movs	r2, #0
 80027bc:	2120      	movs	r1, #32
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f850 	bl	8002864 <UART_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e042      	b.n	800285c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10c      	bne.n	80027f6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	3302      	adds	r3, #2
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	e01f      	b.n	8002836 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027fe:	d007      	beq.n	8002810 <HAL_UART_Receive+0xda>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10a      	bne.n	800281e <HAL_UART_Receive+0xe8>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	b2da      	uxtb	r2, r3
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	701a      	strb	r2, [r3, #0]
 800281c:	e008      	b.n	8002830 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800282a:	b2da      	uxtb	r2, r3
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	3301      	adds	r3, #1
 8002834:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1b2      	bne.n	80027b4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e000      	b.n	800285c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800285a:	2302      	movs	r3, #2
  }
}
 800285c:	4618      	mov	r0, r3
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002874:	e03b      	b.n	80028ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d037      	beq.n	80028ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287e:	f7fe fad1 	bl	8000e24 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	6a3a      	ldr	r2, [r7, #32]
 800288a:	429a      	cmp	r2, r3
 800288c:	d302      	bcc.n	8002894 <UART_WaitOnFlagUntilTimeout+0x30>
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e03a      	b.n	800290e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d023      	beq.n	80028ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b80      	cmp	r3, #128	@ 0x80
 80028aa:	d020      	beq.n	80028ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b40      	cmp	r3, #64	@ 0x40
 80028b0:	d01d      	beq.n	80028ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d116      	bne.n	80028ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f81d 	bl	8002916 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2208      	movs	r2, #8
 80028e0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00f      	b.n	800290e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4013      	ands	r3, r2
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	bf0c      	ite	eq
 80028fe:	2301      	moveq	r3, #1
 8002900:	2300      	movne	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	429a      	cmp	r2, r3
 800290a:	d0b4      	beq.n	8002876 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002916:	b480      	push	{r7}
 8002918:	b095      	sub	sp, #84	@ 0x54
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	330c      	adds	r3, #12
 8002924:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002928:	e853 3f00 	ldrex	r3, [r3]
 800292c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800292e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002930:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002934:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	330c      	adds	r3, #12
 800293c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800293e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002942:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002944:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002946:	e841 2300 	strex	r3, r2, [r1]
 800294a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800294c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1e5      	bne.n	800291e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3314      	adds	r3, #20
 8002958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	e853 3f00 	ldrex	r3, [r3]
 8002960:	61fb      	str	r3, [r7, #28]
   return(result);
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	64bb      	str	r3, [r7, #72]	@ 0x48
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3314      	adds	r3, #20
 8002970:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002972:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002974:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002976:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800297a:	e841 2300 	strex	r3, r2, [r1]
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1e5      	bne.n	8002952 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	2b01      	cmp	r3, #1
 800298c:	d119      	bne.n	80029c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	330c      	adds	r3, #12
 8002994:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	e853 3f00 	ldrex	r3, [r3]
 800299c:	60bb      	str	r3, [r7, #8]
   return(result);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f023 0310 	bic.w	r3, r3, #16
 80029a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	330c      	adds	r3, #12
 80029ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029ae:	61ba      	str	r2, [r7, #24]
 80029b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b2:	6979      	ldr	r1, [r7, #20]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	e841 2300 	strex	r3, r2, [r1]
 80029ba:	613b      	str	r3, [r7, #16]
   return(result);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e5      	bne.n	800298e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029d0:	bf00      	nop
 80029d2:	3754      	adds	r7, #84	@ 0x54
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
	...

080029dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a16:	f023 030c 	bic.w	r3, r3, #12
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002af0 <UART_SetConfig+0x114>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d103      	bne.n	8002a4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a44:	f7ff fa04 	bl	8001e50 <HAL_RCC_GetPCLK2Freq>
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	e002      	b.n	8002a52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a4c:	f7ff f9ec 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8002a50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	009a      	lsls	r2, r3, #2
 8002a5c:	441a      	add	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a68:	4a22      	ldr	r2, [pc, #136]	@ (8002af4 <UART_SetConfig+0x118>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	0119      	lsls	r1, r3, #4
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	009a      	lsls	r2, r3, #2
 8002a7c:	441a      	add	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a88:	4b1a      	ldr	r3, [pc, #104]	@ (8002af4 <UART_SetConfig+0x118>)
 8002a8a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2064      	movs	r0, #100	@ 0x64
 8002a92:	fb00 f303 	mul.w	r3, r0, r3
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	3332      	adds	r3, #50	@ 0x32
 8002a9c:	4a15      	ldr	r2, [pc, #84]	@ (8002af4 <UART_SetConfig+0x118>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aa8:	4419      	add	r1, r3
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	441a      	add	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <UART_SetConfig+0x118>)
 8002ac2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2064      	movs	r0, #100	@ 0x64
 8002aca:	fb00 f303 	mul.w	r3, r0, r3
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	3332      	adds	r3, #50	@ 0x32
 8002ad4:	4a07      	ldr	r2, [pc, #28]	@ (8002af4 <UART_SetConfig+0x118>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	f003 020f 	and.w	r2, r3, #15
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	440a      	add	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40013800 	.word	0x40013800
 8002af4:	51eb851f 	.word	0x51eb851f

08002af8 <siprintf>:
 8002af8:	b40e      	push	{r1, r2, r3}
 8002afa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002afe:	b500      	push	{lr}
 8002b00:	b09c      	sub	sp, #112	@ 0x70
 8002b02:	ab1d      	add	r3, sp, #116	@ 0x74
 8002b04:	9002      	str	r0, [sp, #8]
 8002b06:	9006      	str	r0, [sp, #24]
 8002b08:	9107      	str	r1, [sp, #28]
 8002b0a:	9104      	str	r1, [sp, #16]
 8002b0c:	4808      	ldr	r0, [pc, #32]	@ (8002b30 <siprintf+0x38>)
 8002b0e:	4909      	ldr	r1, [pc, #36]	@ (8002b34 <siprintf+0x3c>)
 8002b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b14:	9105      	str	r1, [sp, #20]
 8002b16:	6800      	ldr	r0, [r0, #0]
 8002b18:	a902      	add	r1, sp, #8
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	f000 f9b6 	bl	8002e8c <_svfiprintf_r>
 8002b20:	2200      	movs	r2, #0
 8002b22:	9b02      	ldr	r3, [sp, #8]
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	b01c      	add	sp, #112	@ 0x70
 8002b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b2c:	b003      	add	sp, #12
 8002b2e:	4770      	bx	lr
 8002b30:	2000000c 	.word	0x2000000c
 8002b34:	ffff0208 	.word	0xffff0208

08002b38 <memset>:
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4402      	add	r2, r0
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d100      	bne.n	8002b42 <memset+0xa>
 8002b40:	4770      	bx	lr
 8002b42:	f803 1b01 	strb.w	r1, [r3], #1
 8002b46:	e7f9      	b.n	8002b3c <memset+0x4>

08002b48 <strchr>:
 8002b48:	4603      	mov	r3, r0
 8002b4a:	b2c9      	uxtb	r1, r1
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b52:	b112      	cbz	r2, 8002b5a <strchr+0x12>
 8002b54:	428a      	cmp	r2, r1
 8002b56:	d1f9      	bne.n	8002b4c <strchr+0x4>
 8002b58:	4770      	bx	lr
 8002b5a:	2900      	cmp	r1, #0
 8002b5c:	bf18      	it	ne
 8002b5e:	2000      	movne	r0, #0
 8002b60:	4770      	bx	lr

08002b62 <strstr>:
 8002b62:	780a      	ldrb	r2, [r1, #0]
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	b96a      	cbnz	r2, 8002b84 <strstr+0x22>
 8002b68:	bd70      	pop	{r4, r5, r6, pc}
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d109      	bne.n	8002b82 <strstr+0x20>
 8002b6e:	460c      	mov	r4, r1
 8002b70:	4605      	mov	r5, r0
 8002b72:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f6      	beq.n	8002b68 <strstr+0x6>
 8002b7a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002b7e:	429e      	cmp	r6, r3
 8002b80:	d0f7      	beq.n	8002b72 <strstr+0x10>
 8002b82:	3001      	adds	r0, #1
 8002b84:	7803      	ldrb	r3, [r0, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ef      	bne.n	8002b6a <strstr+0x8>
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	e7ec      	b.n	8002b68 <strstr+0x6>
	...

08002b90 <__errno>:
 8002b90:	4b01      	ldr	r3, [pc, #4]	@ (8002b98 <__errno+0x8>)
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	2000000c 	.word	0x2000000c

08002b9c <__libc_init_array>:
 8002b9c:	b570      	push	{r4, r5, r6, lr}
 8002b9e:	2600      	movs	r6, #0
 8002ba0:	4d0c      	ldr	r5, [pc, #48]	@ (8002bd4 <__libc_init_array+0x38>)
 8002ba2:	4c0d      	ldr	r4, [pc, #52]	@ (8002bd8 <__libc_init_array+0x3c>)
 8002ba4:	1b64      	subs	r4, r4, r5
 8002ba6:	10a4      	asrs	r4, r4, #2
 8002ba8:	42a6      	cmp	r6, r4
 8002baa:	d109      	bne.n	8002bc0 <__libc_init_array+0x24>
 8002bac:	f000 fc78 	bl	80034a0 <_init>
 8002bb0:	2600      	movs	r6, #0
 8002bb2:	4d0a      	ldr	r5, [pc, #40]	@ (8002bdc <__libc_init_array+0x40>)
 8002bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8002be0 <__libc_init_array+0x44>)
 8002bb6:	1b64      	subs	r4, r4, r5
 8002bb8:	10a4      	asrs	r4, r4, #2
 8002bba:	42a6      	cmp	r6, r4
 8002bbc:	d105      	bne.n	8002bca <__libc_init_array+0x2e>
 8002bbe:	bd70      	pop	{r4, r5, r6, pc}
 8002bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc4:	4798      	blx	r3
 8002bc6:	3601      	adds	r6, #1
 8002bc8:	e7ee      	b.n	8002ba8 <__libc_init_array+0xc>
 8002bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bce:	4798      	blx	r3
 8002bd0:	3601      	adds	r6, #1
 8002bd2:	e7f2      	b.n	8002bba <__libc_init_array+0x1e>
 8002bd4:	0800360c 	.word	0x0800360c
 8002bd8:	0800360c 	.word	0x0800360c
 8002bdc:	0800360c 	.word	0x0800360c
 8002be0:	08003610 	.word	0x08003610

08002be4 <__retarget_lock_acquire_recursive>:
 8002be4:	4770      	bx	lr

08002be6 <__retarget_lock_release_recursive>:
 8002be6:	4770      	bx	lr

08002be8 <_free_r>:
 8002be8:	b538      	push	{r3, r4, r5, lr}
 8002bea:	4605      	mov	r5, r0
 8002bec:	2900      	cmp	r1, #0
 8002bee:	d040      	beq.n	8002c72 <_free_r+0x8a>
 8002bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bf4:	1f0c      	subs	r4, r1, #4
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bfb8      	it	lt
 8002bfa:	18e4      	addlt	r4, r4, r3
 8002bfc:	f000 f8de 	bl	8002dbc <__malloc_lock>
 8002c00:	4a1c      	ldr	r2, [pc, #112]	@ (8002c74 <_free_r+0x8c>)
 8002c02:	6813      	ldr	r3, [r2, #0]
 8002c04:	b933      	cbnz	r3, 8002c14 <_free_r+0x2c>
 8002c06:	6063      	str	r3, [r4, #4]
 8002c08:	6014      	str	r4, [r2, #0]
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c10:	f000 b8da 	b.w	8002dc8 <__malloc_unlock>
 8002c14:	42a3      	cmp	r3, r4
 8002c16:	d908      	bls.n	8002c2a <_free_r+0x42>
 8002c18:	6820      	ldr	r0, [r4, #0]
 8002c1a:	1821      	adds	r1, r4, r0
 8002c1c:	428b      	cmp	r3, r1
 8002c1e:	bf01      	itttt	eq
 8002c20:	6819      	ldreq	r1, [r3, #0]
 8002c22:	685b      	ldreq	r3, [r3, #4]
 8002c24:	1809      	addeq	r1, r1, r0
 8002c26:	6021      	streq	r1, [r4, #0]
 8002c28:	e7ed      	b.n	8002c06 <_free_r+0x1e>
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	b10b      	cbz	r3, 8002c34 <_free_r+0x4c>
 8002c30:	42a3      	cmp	r3, r4
 8002c32:	d9fa      	bls.n	8002c2a <_free_r+0x42>
 8002c34:	6811      	ldr	r1, [r2, #0]
 8002c36:	1850      	adds	r0, r2, r1
 8002c38:	42a0      	cmp	r0, r4
 8002c3a:	d10b      	bne.n	8002c54 <_free_r+0x6c>
 8002c3c:	6820      	ldr	r0, [r4, #0]
 8002c3e:	4401      	add	r1, r0
 8002c40:	1850      	adds	r0, r2, r1
 8002c42:	4283      	cmp	r3, r0
 8002c44:	6011      	str	r1, [r2, #0]
 8002c46:	d1e0      	bne.n	8002c0a <_free_r+0x22>
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4408      	add	r0, r1
 8002c4e:	6010      	str	r0, [r2, #0]
 8002c50:	6053      	str	r3, [r2, #4]
 8002c52:	e7da      	b.n	8002c0a <_free_r+0x22>
 8002c54:	d902      	bls.n	8002c5c <_free_r+0x74>
 8002c56:	230c      	movs	r3, #12
 8002c58:	602b      	str	r3, [r5, #0]
 8002c5a:	e7d6      	b.n	8002c0a <_free_r+0x22>
 8002c5c:	6820      	ldr	r0, [r4, #0]
 8002c5e:	1821      	adds	r1, r4, r0
 8002c60:	428b      	cmp	r3, r1
 8002c62:	bf01      	itttt	eq
 8002c64:	6819      	ldreq	r1, [r3, #0]
 8002c66:	685b      	ldreq	r3, [r3, #4]
 8002c68:	1809      	addeq	r1, r1, r0
 8002c6a:	6021      	streq	r1, [r4, #0]
 8002c6c:	6063      	str	r3, [r4, #4]
 8002c6e:	6054      	str	r4, [r2, #4]
 8002c70:	e7cb      	b.n	8002c0a <_free_r+0x22>
 8002c72:	bd38      	pop	{r3, r4, r5, pc}
 8002c74:	20000298 	.word	0x20000298

08002c78 <sbrk_aligned>:
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	4e0f      	ldr	r6, [pc, #60]	@ (8002cb8 <sbrk_aligned+0x40>)
 8002c7c:	460c      	mov	r4, r1
 8002c7e:	6831      	ldr	r1, [r6, #0]
 8002c80:	4605      	mov	r5, r0
 8002c82:	b911      	cbnz	r1, 8002c8a <sbrk_aligned+0x12>
 8002c84:	f000 fbaa 	bl	80033dc <_sbrk_r>
 8002c88:	6030      	str	r0, [r6, #0]
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	f000 fba5 	bl	80033dc <_sbrk_r>
 8002c92:	1c43      	adds	r3, r0, #1
 8002c94:	d103      	bne.n	8002c9e <sbrk_aligned+0x26>
 8002c96:	f04f 34ff 	mov.w	r4, #4294967295
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	bd70      	pop	{r4, r5, r6, pc}
 8002c9e:	1cc4      	adds	r4, r0, #3
 8002ca0:	f024 0403 	bic.w	r4, r4, #3
 8002ca4:	42a0      	cmp	r0, r4
 8002ca6:	d0f8      	beq.n	8002c9a <sbrk_aligned+0x22>
 8002ca8:	1a21      	subs	r1, r4, r0
 8002caa:	4628      	mov	r0, r5
 8002cac:	f000 fb96 	bl	80033dc <_sbrk_r>
 8002cb0:	3001      	adds	r0, #1
 8002cb2:	d1f2      	bne.n	8002c9a <sbrk_aligned+0x22>
 8002cb4:	e7ef      	b.n	8002c96 <sbrk_aligned+0x1e>
 8002cb6:	bf00      	nop
 8002cb8:	20000294 	.word	0x20000294

08002cbc <_malloc_r>:
 8002cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cc0:	1ccd      	adds	r5, r1, #3
 8002cc2:	f025 0503 	bic.w	r5, r5, #3
 8002cc6:	3508      	adds	r5, #8
 8002cc8:	2d0c      	cmp	r5, #12
 8002cca:	bf38      	it	cc
 8002ccc:	250c      	movcc	r5, #12
 8002cce:	2d00      	cmp	r5, #0
 8002cd0:	4606      	mov	r6, r0
 8002cd2:	db01      	blt.n	8002cd8 <_malloc_r+0x1c>
 8002cd4:	42a9      	cmp	r1, r5
 8002cd6:	d904      	bls.n	8002ce2 <_malloc_r+0x26>
 8002cd8:	230c      	movs	r3, #12
 8002cda:	6033      	str	r3, [r6, #0]
 8002cdc:	2000      	movs	r0, #0
 8002cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ce2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002db8 <_malloc_r+0xfc>
 8002ce6:	f000 f869 	bl	8002dbc <__malloc_lock>
 8002cea:	f8d8 3000 	ldr.w	r3, [r8]
 8002cee:	461c      	mov	r4, r3
 8002cf0:	bb44      	cbnz	r4, 8002d44 <_malloc_r+0x88>
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	4630      	mov	r0, r6
 8002cf6:	f7ff ffbf 	bl	8002c78 <sbrk_aligned>
 8002cfa:	1c43      	adds	r3, r0, #1
 8002cfc:	4604      	mov	r4, r0
 8002cfe:	d158      	bne.n	8002db2 <_malloc_r+0xf6>
 8002d00:	f8d8 4000 	ldr.w	r4, [r8]
 8002d04:	4627      	mov	r7, r4
 8002d06:	2f00      	cmp	r7, #0
 8002d08:	d143      	bne.n	8002d92 <_malloc_r+0xd6>
 8002d0a:	2c00      	cmp	r4, #0
 8002d0c:	d04b      	beq.n	8002da6 <_malloc_r+0xea>
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	4639      	mov	r1, r7
 8002d12:	4630      	mov	r0, r6
 8002d14:	eb04 0903 	add.w	r9, r4, r3
 8002d18:	f000 fb60 	bl	80033dc <_sbrk_r>
 8002d1c:	4581      	cmp	r9, r0
 8002d1e:	d142      	bne.n	8002da6 <_malloc_r+0xea>
 8002d20:	6821      	ldr	r1, [r4, #0]
 8002d22:	4630      	mov	r0, r6
 8002d24:	1a6d      	subs	r5, r5, r1
 8002d26:	4629      	mov	r1, r5
 8002d28:	f7ff ffa6 	bl	8002c78 <sbrk_aligned>
 8002d2c:	3001      	adds	r0, #1
 8002d2e:	d03a      	beq.n	8002da6 <_malloc_r+0xea>
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	442b      	add	r3, r5
 8002d34:	6023      	str	r3, [r4, #0]
 8002d36:	f8d8 3000 	ldr.w	r3, [r8]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	bb62      	cbnz	r2, 8002d98 <_malloc_r+0xdc>
 8002d3e:	f8c8 7000 	str.w	r7, [r8]
 8002d42:	e00f      	b.n	8002d64 <_malloc_r+0xa8>
 8002d44:	6822      	ldr	r2, [r4, #0]
 8002d46:	1b52      	subs	r2, r2, r5
 8002d48:	d420      	bmi.n	8002d8c <_malloc_r+0xd0>
 8002d4a:	2a0b      	cmp	r2, #11
 8002d4c:	d917      	bls.n	8002d7e <_malloc_r+0xc2>
 8002d4e:	1961      	adds	r1, r4, r5
 8002d50:	42a3      	cmp	r3, r4
 8002d52:	6025      	str	r5, [r4, #0]
 8002d54:	bf18      	it	ne
 8002d56:	6059      	strne	r1, [r3, #4]
 8002d58:	6863      	ldr	r3, [r4, #4]
 8002d5a:	bf08      	it	eq
 8002d5c:	f8c8 1000 	streq.w	r1, [r8]
 8002d60:	5162      	str	r2, [r4, r5]
 8002d62:	604b      	str	r3, [r1, #4]
 8002d64:	4630      	mov	r0, r6
 8002d66:	f000 f82f 	bl	8002dc8 <__malloc_unlock>
 8002d6a:	f104 000b 	add.w	r0, r4, #11
 8002d6e:	1d23      	adds	r3, r4, #4
 8002d70:	f020 0007 	bic.w	r0, r0, #7
 8002d74:	1ac2      	subs	r2, r0, r3
 8002d76:	bf1c      	itt	ne
 8002d78:	1a1b      	subne	r3, r3, r0
 8002d7a:	50a3      	strne	r3, [r4, r2]
 8002d7c:	e7af      	b.n	8002cde <_malloc_r+0x22>
 8002d7e:	6862      	ldr	r2, [r4, #4]
 8002d80:	42a3      	cmp	r3, r4
 8002d82:	bf0c      	ite	eq
 8002d84:	f8c8 2000 	streq.w	r2, [r8]
 8002d88:	605a      	strne	r2, [r3, #4]
 8002d8a:	e7eb      	b.n	8002d64 <_malloc_r+0xa8>
 8002d8c:	4623      	mov	r3, r4
 8002d8e:	6864      	ldr	r4, [r4, #4]
 8002d90:	e7ae      	b.n	8002cf0 <_malloc_r+0x34>
 8002d92:	463c      	mov	r4, r7
 8002d94:	687f      	ldr	r7, [r7, #4]
 8002d96:	e7b6      	b.n	8002d06 <_malloc_r+0x4a>
 8002d98:	461a      	mov	r2, r3
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	42a3      	cmp	r3, r4
 8002d9e:	d1fb      	bne.n	8002d98 <_malloc_r+0xdc>
 8002da0:	2300      	movs	r3, #0
 8002da2:	6053      	str	r3, [r2, #4]
 8002da4:	e7de      	b.n	8002d64 <_malloc_r+0xa8>
 8002da6:	230c      	movs	r3, #12
 8002da8:	4630      	mov	r0, r6
 8002daa:	6033      	str	r3, [r6, #0]
 8002dac:	f000 f80c 	bl	8002dc8 <__malloc_unlock>
 8002db0:	e794      	b.n	8002cdc <_malloc_r+0x20>
 8002db2:	6005      	str	r5, [r0, #0]
 8002db4:	e7d6      	b.n	8002d64 <_malloc_r+0xa8>
 8002db6:	bf00      	nop
 8002db8:	20000298 	.word	0x20000298

08002dbc <__malloc_lock>:
 8002dbc:	4801      	ldr	r0, [pc, #4]	@ (8002dc4 <__malloc_lock+0x8>)
 8002dbe:	f7ff bf11 	b.w	8002be4 <__retarget_lock_acquire_recursive>
 8002dc2:	bf00      	nop
 8002dc4:	20000290 	.word	0x20000290

08002dc8 <__malloc_unlock>:
 8002dc8:	4801      	ldr	r0, [pc, #4]	@ (8002dd0 <__malloc_unlock+0x8>)
 8002dca:	f7ff bf0c 	b.w	8002be6 <__retarget_lock_release_recursive>
 8002dce:	bf00      	nop
 8002dd0:	20000290 	.word	0x20000290

08002dd4 <__ssputs_r>:
 8002dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd8:	461f      	mov	r7, r3
 8002dda:	688e      	ldr	r6, [r1, #8]
 8002ddc:	4682      	mov	sl, r0
 8002dde:	42be      	cmp	r6, r7
 8002de0:	460c      	mov	r4, r1
 8002de2:	4690      	mov	r8, r2
 8002de4:	680b      	ldr	r3, [r1, #0]
 8002de6:	d82d      	bhi.n	8002e44 <__ssputs_r+0x70>
 8002de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002dec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002df0:	d026      	beq.n	8002e40 <__ssputs_r+0x6c>
 8002df2:	6965      	ldr	r5, [r4, #20]
 8002df4:	6909      	ldr	r1, [r1, #16]
 8002df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002dfa:	eba3 0901 	sub.w	r9, r3, r1
 8002dfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e02:	1c7b      	adds	r3, r7, #1
 8002e04:	444b      	add	r3, r9
 8002e06:	106d      	asrs	r5, r5, #1
 8002e08:	429d      	cmp	r5, r3
 8002e0a:	bf38      	it	cc
 8002e0c:	461d      	movcc	r5, r3
 8002e0e:	0553      	lsls	r3, r2, #21
 8002e10:	d527      	bpl.n	8002e62 <__ssputs_r+0x8e>
 8002e12:	4629      	mov	r1, r5
 8002e14:	f7ff ff52 	bl	8002cbc <_malloc_r>
 8002e18:	4606      	mov	r6, r0
 8002e1a:	b360      	cbz	r0, 8002e76 <__ssputs_r+0xa2>
 8002e1c:	464a      	mov	r2, r9
 8002e1e:	6921      	ldr	r1, [r4, #16]
 8002e20:	f000 fafa 	bl	8003418 <memcpy>
 8002e24:	89a3      	ldrh	r3, [r4, #12]
 8002e26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e2e:	81a3      	strh	r3, [r4, #12]
 8002e30:	6126      	str	r6, [r4, #16]
 8002e32:	444e      	add	r6, r9
 8002e34:	6026      	str	r6, [r4, #0]
 8002e36:	463e      	mov	r6, r7
 8002e38:	6165      	str	r5, [r4, #20]
 8002e3a:	eba5 0509 	sub.w	r5, r5, r9
 8002e3e:	60a5      	str	r5, [r4, #8]
 8002e40:	42be      	cmp	r6, r7
 8002e42:	d900      	bls.n	8002e46 <__ssputs_r+0x72>
 8002e44:	463e      	mov	r6, r7
 8002e46:	4632      	mov	r2, r6
 8002e48:	4641      	mov	r1, r8
 8002e4a:	6820      	ldr	r0, [r4, #0]
 8002e4c:	f000 faac 	bl	80033a8 <memmove>
 8002e50:	2000      	movs	r0, #0
 8002e52:	68a3      	ldr	r3, [r4, #8]
 8002e54:	1b9b      	subs	r3, r3, r6
 8002e56:	60a3      	str	r3, [r4, #8]
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	4433      	add	r3, r6
 8002e5c:	6023      	str	r3, [r4, #0]
 8002e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e62:	462a      	mov	r2, r5
 8002e64:	f000 fae6 	bl	8003434 <_realloc_r>
 8002e68:	4606      	mov	r6, r0
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	d1e0      	bne.n	8002e30 <__ssputs_r+0x5c>
 8002e6e:	4650      	mov	r0, sl
 8002e70:	6921      	ldr	r1, [r4, #16]
 8002e72:	f7ff feb9 	bl	8002be8 <_free_r>
 8002e76:	230c      	movs	r3, #12
 8002e78:	f8ca 3000 	str.w	r3, [sl]
 8002e7c:	89a3      	ldrh	r3, [r4, #12]
 8002e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e86:	81a3      	strh	r3, [r4, #12]
 8002e88:	e7e9      	b.n	8002e5e <__ssputs_r+0x8a>
	...

08002e8c <_svfiprintf_r>:
 8002e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e90:	4698      	mov	r8, r3
 8002e92:	898b      	ldrh	r3, [r1, #12]
 8002e94:	4607      	mov	r7, r0
 8002e96:	061b      	lsls	r3, r3, #24
 8002e98:	460d      	mov	r5, r1
 8002e9a:	4614      	mov	r4, r2
 8002e9c:	b09d      	sub	sp, #116	@ 0x74
 8002e9e:	d510      	bpl.n	8002ec2 <_svfiprintf_r+0x36>
 8002ea0:	690b      	ldr	r3, [r1, #16]
 8002ea2:	b973      	cbnz	r3, 8002ec2 <_svfiprintf_r+0x36>
 8002ea4:	2140      	movs	r1, #64	@ 0x40
 8002ea6:	f7ff ff09 	bl	8002cbc <_malloc_r>
 8002eaa:	6028      	str	r0, [r5, #0]
 8002eac:	6128      	str	r0, [r5, #16]
 8002eae:	b930      	cbnz	r0, 8002ebe <_svfiprintf_r+0x32>
 8002eb0:	230c      	movs	r3, #12
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb8:	b01d      	add	sp, #116	@ 0x74
 8002eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ebe:	2340      	movs	r3, #64	@ 0x40
 8002ec0:	616b      	str	r3, [r5, #20]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ecc:	2330      	movs	r3, #48	@ 0x30
 8002ece:	f04f 0901 	mov.w	r9, #1
 8002ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ed6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003070 <_svfiprintf_r+0x1e4>
 8002eda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ede:	4623      	mov	r3, r4
 8002ee0:	469a      	mov	sl, r3
 8002ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ee6:	b10a      	cbz	r2, 8002eec <_svfiprintf_r+0x60>
 8002ee8:	2a25      	cmp	r2, #37	@ 0x25
 8002eea:	d1f9      	bne.n	8002ee0 <_svfiprintf_r+0x54>
 8002eec:	ebba 0b04 	subs.w	fp, sl, r4
 8002ef0:	d00b      	beq.n	8002f0a <_svfiprintf_r+0x7e>
 8002ef2:	465b      	mov	r3, fp
 8002ef4:	4622      	mov	r2, r4
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	4638      	mov	r0, r7
 8002efa:	f7ff ff6b 	bl	8002dd4 <__ssputs_r>
 8002efe:	3001      	adds	r0, #1
 8002f00:	f000 80a7 	beq.w	8003052 <_svfiprintf_r+0x1c6>
 8002f04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f06:	445a      	add	r2, fp
 8002f08:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 809f 	beq.w	8003052 <_svfiprintf_r+0x1c6>
 8002f14:	2300      	movs	r3, #0
 8002f16:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f1e:	f10a 0a01 	add.w	sl, sl, #1
 8002f22:	9304      	str	r3, [sp, #16]
 8002f24:	9307      	str	r3, [sp, #28]
 8002f26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f2c:	4654      	mov	r4, sl
 8002f2e:	2205      	movs	r2, #5
 8002f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f34:	484e      	ldr	r0, [pc, #312]	@ (8003070 <_svfiprintf_r+0x1e4>)
 8002f36:	f000 fa61 	bl	80033fc <memchr>
 8002f3a:	9a04      	ldr	r2, [sp, #16]
 8002f3c:	b9d8      	cbnz	r0, 8002f76 <_svfiprintf_r+0xea>
 8002f3e:	06d0      	lsls	r0, r2, #27
 8002f40:	bf44      	itt	mi
 8002f42:	2320      	movmi	r3, #32
 8002f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f48:	0711      	lsls	r1, r2, #28
 8002f4a:	bf44      	itt	mi
 8002f4c:	232b      	movmi	r3, #43	@ 0x2b
 8002f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f52:	f89a 3000 	ldrb.w	r3, [sl]
 8002f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f58:	d015      	beq.n	8002f86 <_svfiprintf_r+0xfa>
 8002f5a:	4654      	mov	r4, sl
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f04f 0c0a 	mov.w	ip, #10
 8002f62:	9a07      	ldr	r2, [sp, #28]
 8002f64:	4621      	mov	r1, r4
 8002f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f6a:	3b30      	subs	r3, #48	@ 0x30
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	d94b      	bls.n	8003008 <_svfiprintf_r+0x17c>
 8002f70:	b1b0      	cbz	r0, 8002fa0 <_svfiprintf_r+0x114>
 8002f72:	9207      	str	r2, [sp, #28]
 8002f74:	e014      	b.n	8002fa0 <_svfiprintf_r+0x114>
 8002f76:	eba0 0308 	sub.w	r3, r0, r8
 8002f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	46a2      	mov	sl, r4
 8002f82:	9304      	str	r3, [sp, #16]
 8002f84:	e7d2      	b.n	8002f2c <_svfiprintf_r+0xa0>
 8002f86:	9b03      	ldr	r3, [sp, #12]
 8002f88:	1d19      	adds	r1, r3, #4
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	9103      	str	r1, [sp, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bfbb      	ittet	lt
 8002f92:	425b      	neglt	r3, r3
 8002f94:	f042 0202 	orrlt.w	r2, r2, #2
 8002f98:	9307      	strge	r3, [sp, #28]
 8002f9a:	9307      	strlt	r3, [sp, #28]
 8002f9c:	bfb8      	it	lt
 8002f9e:	9204      	strlt	r2, [sp, #16]
 8002fa0:	7823      	ldrb	r3, [r4, #0]
 8002fa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fa4:	d10a      	bne.n	8002fbc <_svfiprintf_r+0x130>
 8002fa6:	7863      	ldrb	r3, [r4, #1]
 8002fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002faa:	d132      	bne.n	8003012 <_svfiprintf_r+0x186>
 8002fac:	9b03      	ldr	r3, [sp, #12]
 8002fae:	3402      	adds	r4, #2
 8002fb0:	1d1a      	adds	r2, r3, #4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	9203      	str	r2, [sp, #12]
 8002fb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002fba:	9305      	str	r3, [sp, #20]
 8002fbc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003074 <_svfiprintf_r+0x1e8>
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	4650      	mov	r0, sl
 8002fc4:	7821      	ldrb	r1, [r4, #0]
 8002fc6:	f000 fa19 	bl	80033fc <memchr>
 8002fca:	b138      	cbz	r0, 8002fdc <_svfiprintf_r+0x150>
 8002fcc:	2240      	movs	r2, #64	@ 0x40
 8002fce:	9b04      	ldr	r3, [sp, #16]
 8002fd0:	eba0 000a 	sub.w	r0, r0, sl
 8002fd4:	4082      	lsls	r2, r0
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	3401      	adds	r4, #1
 8002fda:	9304      	str	r3, [sp, #16]
 8002fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fe0:	2206      	movs	r2, #6
 8002fe2:	4825      	ldr	r0, [pc, #148]	@ (8003078 <_svfiprintf_r+0x1ec>)
 8002fe4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002fe8:	f000 fa08 	bl	80033fc <memchr>
 8002fec:	2800      	cmp	r0, #0
 8002fee:	d036      	beq.n	800305e <_svfiprintf_r+0x1d2>
 8002ff0:	4b22      	ldr	r3, [pc, #136]	@ (800307c <_svfiprintf_r+0x1f0>)
 8002ff2:	bb1b      	cbnz	r3, 800303c <_svfiprintf_r+0x1b0>
 8002ff4:	9b03      	ldr	r3, [sp, #12]
 8002ff6:	3307      	adds	r3, #7
 8002ff8:	f023 0307 	bic.w	r3, r3, #7
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	9303      	str	r3, [sp, #12]
 8003000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003002:	4433      	add	r3, r6
 8003004:	9309      	str	r3, [sp, #36]	@ 0x24
 8003006:	e76a      	b.n	8002ede <_svfiprintf_r+0x52>
 8003008:	460c      	mov	r4, r1
 800300a:	2001      	movs	r0, #1
 800300c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003010:	e7a8      	b.n	8002f64 <_svfiprintf_r+0xd8>
 8003012:	2300      	movs	r3, #0
 8003014:	f04f 0c0a 	mov.w	ip, #10
 8003018:	4619      	mov	r1, r3
 800301a:	3401      	adds	r4, #1
 800301c:	9305      	str	r3, [sp, #20]
 800301e:	4620      	mov	r0, r4
 8003020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003024:	3a30      	subs	r2, #48	@ 0x30
 8003026:	2a09      	cmp	r2, #9
 8003028:	d903      	bls.n	8003032 <_svfiprintf_r+0x1a6>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0c6      	beq.n	8002fbc <_svfiprintf_r+0x130>
 800302e:	9105      	str	r1, [sp, #20]
 8003030:	e7c4      	b.n	8002fbc <_svfiprintf_r+0x130>
 8003032:	4604      	mov	r4, r0
 8003034:	2301      	movs	r3, #1
 8003036:	fb0c 2101 	mla	r1, ip, r1, r2
 800303a:	e7f0      	b.n	800301e <_svfiprintf_r+0x192>
 800303c:	ab03      	add	r3, sp, #12
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	462a      	mov	r2, r5
 8003042:	4638      	mov	r0, r7
 8003044:	4b0e      	ldr	r3, [pc, #56]	@ (8003080 <_svfiprintf_r+0x1f4>)
 8003046:	a904      	add	r1, sp, #16
 8003048:	f3af 8000 	nop.w
 800304c:	1c42      	adds	r2, r0, #1
 800304e:	4606      	mov	r6, r0
 8003050:	d1d6      	bne.n	8003000 <_svfiprintf_r+0x174>
 8003052:	89ab      	ldrh	r3, [r5, #12]
 8003054:	065b      	lsls	r3, r3, #25
 8003056:	f53f af2d 	bmi.w	8002eb4 <_svfiprintf_r+0x28>
 800305a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800305c:	e72c      	b.n	8002eb8 <_svfiprintf_r+0x2c>
 800305e:	ab03      	add	r3, sp, #12
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	462a      	mov	r2, r5
 8003064:	4638      	mov	r0, r7
 8003066:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <_svfiprintf_r+0x1f4>)
 8003068:	a904      	add	r1, sp, #16
 800306a:	f000 f87d 	bl	8003168 <_printf_i>
 800306e:	e7ed      	b.n	800304c <_svfiprintf_r+0x1c0>
 8003070:	080035ce 	.word	0x080035ce
 8003074:	080035d4 	.word	0x080035d4
 8003078:	080035d8 	.word	0x080035d8
 800307c:	00000000 	.word	0x00000000
 8003080:	08002dd5 	.word	0x08002dd5

08003084 <_printf_common>:
 8003084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003088:	4616      	mov	r6, r2
 800308a:	4698      	mov	r8, r3
 800308c:	688a      	ldr	r2, [r1, #8]
 800308e:	690b      	ldr	r3, [r1, #16]
 8003090:	4607      	mov	r7, r0
 8003092:	4293      	cmp	r3, r2
 8003094:	bfb8      	it	lt
 8003096:	4613      	movlt	r3, r2
 8003098:	6033      	str	r3, [r6, #0]
 800309a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800309e:	460c      	mov	r4, r1
 80030a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80030a4:	b10a      	cbz	r2, 80030aa <_printf_common+0x26>
 80030a6:	3301      	adds	r3, #1
 80030a8:	6033      	str	r3, [r6, #0]
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	0699      	lsls	r1, r3, #26
 80030ae:	bf42      	ittt	mi
 80030b0:	6833      	ldrmi	r3, [r6, #0]
 80030b2:	3302      	addmi	r3, #2
 80030b4:	6033      	strmi	r3, [r6, #0]
 80030b6:	6825      	ldr	r5, [r4, #0]
 80030b8:	f015 0506 	ands.w	r5, r5, #6
 80030bc:	d106      	bne.n	80030cc <_printf_common+0x48>
 80030be:	f104 0a19 	add.w	sl, r4, #25
 80030c2:	68e3      	ldr	r3, [r4, #12]
 80030c4:	6832      	ldr	r2, [r6, #0]
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	42ab      	cmp	r3, r5
 80030ca:	dc2b      	bgt.n	8003124 <_printf_common+0xa0>
 80030cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030d0:	6822      	ldr	r2, [r4, #0]
 80030d2:	3b00      	subs	r3, #0
 80030d4:	bf18      	it	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	0692      	lsls	r2, r2, #26
 80030da:	d430      	bmi.n	800313e <_printf_common+0xba>
 80030dc:	4641      	mov	r1, r8
 80030de:	4638      	mov	r0, r7
 80030e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030e4:	47c8      	blx	r9
 80030e6:	3001      	adds	r0, #1
 80030e8:	d023      	beq.n	8003132 <_printf_common+0xae>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	6922      	ldr	r2, [r4, #16]
 80030ee:	f003 0306 	and.w	r3, r3, #6
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	bf14      	ite	ne
 80030f6:	2500      	movne	r5, #0
 80030f8:	6833      	ldreq	r3, [r6, #0]
 80030fa:	f04f 0600 	mov.w	r6, #0
 80030fe:	bf08      	it	eq
 8003100:	68e5      	ldreq	r5, [r4, #12]
 8003102:	f104 041a 	add.w	r4, r4, #26
 8003106:	bf08      	it	eq
 8003108:	1aed      	subeq	r5, r5, r3
 800310a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800310e:	bf08      	it	eq
 8003110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003114:	4293      	cmp	r3, r2
 8003116:	bfc4      	itt	gt
 8003118:	1a9b      	subgt	r3, r3, r2
 800311a:	18ed      	addgt	r5, r5, r3
 800311c:	42b5      	cmp	r5, r6
 800311e:	d11a      	bne.n	8003156 <_printf_common+0xd2>
 8003120:	2000      	movs	r0, #0
 8003122:	e008      	b.n	8003136 <_printf_common+0xb2>
 8003124:	2301      	movs	r3, #1
 8003126:	4652      	mov	r2, sl
 8003128:	4641      	mov	r1, r8
 800312a:	4638      	mov	r0, r7
 800312c:	47c8      	blx	r9
 800312e:	3001      	adds	r0, #1
 8003130:	d103      	bne.n	800313a <_printf_common+0xb6>
 8003132:	f04f 30ff 	mov.w	r0, #4294967295
 8003136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800313a:	3501      	adds	r5, #1
 800313c:	e7c1      	b.n	80030c2 <_printf_common+0x3e>
 800313e:	2030      	movs	r0, #48	@ 0x30
 8003140:	18e1      	adds	r1, r4, r3
 8003142:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800314c:	4422      	add	r2, r4
 800314e:	3302      	adds	r3, #2
 8003150:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003154:	e7c2      	b.n	80030dc <_printf_common+0x58>
 8003156:	2301      	movs	r3, #1
 8003158:	4622      	mov	r2, r4
 800315a:	4641      	mov	r1, r8
 800315c:	4638      	mov	r0, r7
 800315e:	47c8      	blx	r9
 8003160:	3001      	adds	r0, #1
 8003162:	d0e6      	beq.n	8003132 <_printf_common+0xae>
 8003164:	3601      	adds	r6, #1
 8003166:	e7d9      	b.n	800311c <_printf_common+0x98>

08003168 <_printf_i>:
 8003168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800316c:	7e0f      	ldrb	r7, [r1, #24]
 800316e:	4691      	mov	r9, r2
 8003170:	2f78      	cmp	r7, #120	@ 0x78
 8003172:	4680      	mov	r8, r0
 8003174:	460c      	mov	r4, r1
 8003176:	469a      	mov	sl, r3
 8003178:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800317a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800317e:	d807      	bhi.n	8003190 <_printf_i+0x28>
 8003180:	2f62      	cmp	r7, #98	@ 0x62
 8003182:	d80a      	bhi.n	800319a <_printf_i+0x32>
 8003184:	2f00      	cmp	r7, #0
 8003186:	f000 80d3 	beq.w	8003330 <_printf_i+0x1c8>
 800318a:	2f58      	cmp	r7, #88	@ 0x58
 800318c:	f000 80ba 	beq.w	8003304 <_printf_i+0x19c>
 8003190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003194:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003198:	e03a      	b.n	8003210 <_printf_i+0xa8>
 800319a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800319e:	2b15      	cmp	r3, #21
 80031a0:	d8f6      	bhi.n	8003190 <_printf_i+0x28>
 80031a2:	a101      	add	r1, pc, #4	@ (adr r1, 80031a8 <_printf_i+0x40>)
 80031a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031a8:	08003201 	.word	0x08003201
 80031ac:	08003215 	.word	0x08003215
 80031b0:	08003191 	.word	0x08003191
 80031b4:	08003191 	.word	0x08003191
 80031b8:	08003191 	.word	0x08003191
 80031bc:	08003191 	.word	0x08003191
 80031c0:	08003215 	.word	0x08003215
 80031c4:	08003191 	.word	0x08003191
 80031c8:	08003191 	.word	0x08003191
 80031cc:	08003191 	.word	0x08003191
 80031d0:	08003191 	.word	0x08003191
 80031d4:	08003317 	.word	0x08003317
 80031d8:	0800323f 	.word	0x0800323f
 80031dc:	080032d1 	.word	0x080032d1
 80031e0:	08003191 	.word	0x08003191
 80031e4:	08003191 	.word	0x08003191
 80031e8:	08003339 	.word	0x08003339
 80031ec:	08003191 	.word	0x08003191
 80031f0:	0800323f 	.word	0x0800323f
 80031f4:	08003191 	.word	0x08003191
 80031f8:	08003191 	.word	0x08003191
 80031fc:	080032d9 	.word	0x080032d9
 8003200:	6833      	ldr	r3, [r6, #0]
 8003202:	1d1a      	adds	r2, r3, #4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6032      	str	r2, [r6, #0]
 8003208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800320c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003210:	2301      	movs	r3, #1
 8003212:	e09e      	b.n	8003352 <_printf_i+0x1ea>
 8003214:	6833      	ldr	r3, [r6, #0]
 8003216:	6820      	ldr	r0, [r4, #0]
 8003218:	1d19      	adds	r1, r3, #4
 800321a:	6031      	str	r1, [r6, #0]
 800321c:	0606      	lsls	r6, r0, #24
 800321e:	d501      	bpl.n	8003224 <_printf_i+0xbc>
 8003220:	681d      	ldr	r5, [r3, #0]
 8003222:	e003      	b.n	800322c <_printf_i+0xc4>
 8003224:	0645      	lsls	r5, r0, #25
 8003226:	d5fb      	bpl.n	8003220 <_printf_i+0xb8>
 8003228:	f9b3 5000 	ldrsh.w	r5, [r3]
 800322c:	2d00      	cmp	r5, #0
 800322e:	da03      	bge.n	8003238 <_printf_i+0xd0>
 8003230:	232d      	movs	r3, #45	@ 0x2d
 8003232:	426d      	negs	r5, r5
 8003234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003238:	230a      	movs	r3, #10
 800323a:	4859      	ldr	r0, [pc, #356]	@ (80033a0 <_printf_i+0x238>)
 800323c:	e011      	b.n	8003262 <_printf_i+0xfa>
 800323e:	6821      	ldr	r1, [r4, #0]
 8003240:	6833      	ldr	r3, [r6, #0]
 8003242:	0608      	lsls	r0, r1, #24
 8003244:	f853 5b04 	ldr.w	r5, [r3], #4
 8003248:	d402      	bmi.n	8003250 <_printf_i+0xe8>
 800324a:	0649      	lsls	r1, r1, #25
 800324c:	bf48      	it	mi
 800324e:	b2ad      	uxthmi	r5, r5
 8003250:	2f6f      	cmp	r7, #111	@ 0x6f
 8003252:	6033      	str	r3, [r6, #0]
 8003254:	bf14      	ite	ne
 8003256:	230a      	movne	r3, #10
 8003258:	2308      	moveq	r3, #8
 800325a:	4851      	ldr	r0, [pc, #324]	@ (80033a0 <_printf_i+0x238>)
 800325c:	2100      	movs	r1, #0
 800325e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003262:	6866      	ldr	r6, [r4, #4]
 8003264:	2e00      	cmp	r6, #0
 8003266:	bfa8      	it	ge
 8003268:	6821      	ldrge	r1, [r4, #0]
 800326a:	60a6      	str	r6, [r4, #8]
 800326c:	bfa4      	itt	ge
 800326e:	f021 0104 	bicge.w	r1, r1, #4
 8003272:	6021      	strge	r1, [r4, #0]
 8003274:	b90d      	cbnz	r5, 800327a <_printf_i+0x112>
 8003276:	2e00      	cmp	r6, #0
 8003278:	d04b      	beq.n	8003312 <_printf_i+0x1aa>
 800327a:	4616      	mov	r6, r2
 800327c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003280:	fb03 5711 	mls	r7, r3, r1, r5
 8003284:	5dc7      	ldrb	r7, [r0, r7]
 8003286:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800328a:	462f      	mov	r7, r5
 800328c:	42bb      	cmp	r3, r7
 800328e:	460d      	mov	r5, r1
 8003290:	d9f4      	bls.n	800327c <_printf_i+0x114>
 8003292:	2b08      	cmp	r3, #8
 8003294:	d10b      	bne.n	80032ae <_printf_i+0x146>
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	07df      	lsls	r7, r3, #31
 800329a:	d508      	bpl.n	80032ae <_printf_i+0x146>
 800329c:	6923      	ldr	r3, [r4, #16]
 800329e:	6861      	ldr	r1, [r4, #4]
 80032a0:	4299      	cmp	r1, r3
 80032a2:	bfde      	ittt	le
 80032a4:	2330      	movle	r3, #48	@ 0x30
 80032a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80032ae:	1b92      	subs	r2, r2, r6
 80032b0:	6122      	str	r2, [r4, #16]
 80032b2:	464b      	mov	r3, r9
 80032b4:	4621      	mov	r1, r4
 80032b6:	4640      	mov	r0, r8
 80032b8:	f8cd a000 	str.w	sl, [sp]
 80032bc:	aa03      	add	r2, sp, #12
 80032be:	f7ff fee1 	bl	8003084 <_printf_common>
 80032c2:	3001      	adds	r0, #1
 80032c4:	d14a      	bne.n	800335c <_printf_i+0x1f4>
 80032c6:	f04f 30ff 	mov.w	r0, #4294967295
 80032ca:	b004      	add	sp, #16
 80032cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	f043 0320 	orr.w	r3, r3, #32
 80032d6:	6023      	str	r3, [r4, #0]
 80032d8:	2778      	movs	r7, #120	@ 0x78
 80032da:	4832      	ldr	r0, [pc, #200]	@ (80033a4 <_printf_i+0x23c>)
 80032dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	6831      	ldr	r1, [r6, #0]
 80032e4:	061f      	lsls	r7, r3, #24
 80032e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80032ea:	d402      	bmi.n	80032f2 <_printf_i+0x18a>
 80032ec:	065f      	lsls	r7, r3, #25
 80032ee:	bf48      	it	mi
 80032f0:	b2ad      	uxthmi	r5, r5
 80032f2:	6031      	str	r1, [r6, #0]
 80032f4:	07d9      	lsls	r1, r3, #31
 80032f6:	bf44      	itt	mi
 80032f8:	f043 0320 	orrmi.w	r3, r3, #32
 80032fc:	6023      	strmi	r3, [r4, #0]
 80032fe:	b11d      	cbz	r5, 8003308 <_printf_i+0x1a0>
 8003300:	2310      	movs	r3, #16
 8003302:	e7ab      	b.n	800325c <_printf_i+0xf4>
 8003304:	4826      	ldr	r0, [pc, #152]	@ (80033a0 <_printf_i+0x238>)
 8003306:	e7e9      	b.n	80032dc <_printf_i+0x174>
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	f023 0320 	bic.w	r3, r3, #32
 800330e:	6023      	str	r3, [r4, #0]
 8003310:	e7f6      	b.n	8003300 <_printf_i+0x198>
 8003312:	4616      	mov	r6, r2
 8003314:	e7bd      	b.n	8003292 <_printf_i+0x12a>
 8003316:	6833      	ldr	r3, [r6, #0]
 8003318:	6825      	ldr	r5, [r4, #0]
 800331a:	1d18      	adds	r0, r3, #4
 800331c:	6961      	ldr	r1, [r4, #20]
 800331e:	6030      	str	r0, [r6, #0]
 8003320:	062e      	lsls	r6, r5, #24
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	d501      	bpl.n	800332a <_printf_i+0x1c2>
 8003326:	6019      	str	r1, [r3, #0]
 8003328:	e002      	b.n	8003330 <_printf_i+0x1c8>
 800332a:	0668      	lsls	r0, r5, #25
 800332c:	d5fb      	bpl.n	8003326 <_printf_i+0x1be>
 800332e:	8019      	strh	r1, [r3, #0]
 8003330:	2300      	movs	r3, #0
 8003332:	4616      	mov	r6, r2
 8003334:	6123      	str	r3, [r4, #16]
 8003336:	e7bc      	b.n	80032b2 <_printf_i+0x14a>
 8003338:	6833      	ldr	r3, [r6, #0]
 800333a:	2100      	movs	r1, #0
 800333c:	1d1a      	adds	r2, r3, #4
 800333e:	6032      	str	r2, [r6, #0]
 8003340:	681e      	ldr	r6, [r3, #0]
 8003342:	6862      	ldr	r2, [r4, #4]
 8003344:	4630      	mov	r0, r6
 8003346:	f000 f859 	bl	80033fc <memchr>
 800334a:	b108      	cbz	r0, 8003350 <_printf_i+0x1e8>
 800334c:	1b80      	subs	r0, r0, r6
 800334e:	6060      	str	r0, [r4, #4]
 8003350:	6863      	ldr	r3, [r4, #4]
 8003352:	6123      	str	r3, [r4, #16]
 8003354:	2300      	movs	r3, #0
 8003356:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800335a:	e7aa      	b.n	80032b2 <_printf_i+0x14a>
 800335c:	4632      	mov	r2, r6
 800335e:	4649      	mov	r1, r9
 8003360:	4640      	mov	r0, r8
 8003362:	6923      	ldr	r3, [r4, #16]
 8003364:	47d0      	blx	sl
 8003366:	3001      	adds	r0, #1
 8003368:	d0ad      	beq.n	80032c6 <_printf_i+0x15e>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	079b      	lsls	r3, r3, #30
 800336e:	d413      	bmi.n	8003398 <_printf_i+0x230>
 8003370:	68e0      	ldr	r0, [r4, #12]
 8003372:	9b03      	ldr	r3, [sp, #12]
 8003374:	4298      	cmp	r0, r3
 8003376:	bfb8      	it	lt
 8003378:	4618      	movlt	r0, r3
 800337a:	e7a6      	b.n	80032ca <_printf_i+0x162>
 800337c:	2301      	movs	r3, #1
 800337e:	4632      	mov	r2, r6
 8003380:	4649      	mov	r1, r9
 8003382:	4640      	mov	r0, r8
 8003384:	47d0      	blx	sl
 8003386:	3001      	adds	r0, #1
 8003388:	d09d      	beq.n	80032c6 <_printf_i+0x15e>
 800338a:	3501      	adds	r5, #1
 800338c:	68e3      	ldr	r3, [r4, #12]
 800338e:	9903      	ldr	r1, [sp, #12]
 8003390:	1a5b      	subs	r3, r3, r1
 8003392:	42ab      	cmp	r3, r5
 8003394:	dcf2      	bgt.n	800337c <_printf_i+0x214>
 8003396:	e7eb      	b.n	8003370 <_printf_i+0x208>
 8003398:	2500      	movs	r5, #0
 800339a:	f104 0619 	add.w	r6, r4, #25
 800339e:	e7f5      	b.n	800338c <_printf_i+0x224>
 80033a0:	080035df 	.word	0x080035df
 80033a4:	080035f0 	.word	0x080035f0

080033a8 <memmove>:
 80033a8:	4288      	cmp	r0, r1
 80033aa:	b510      	push	{r4, lr}
 80033ac:	eb01 0402 	add.w	r4, r1, r2
 80033b0:	d902      	bls.n	80033b8 <memmove+0x10>
 80033b2:	4284      	cmp	r4, r0
 80033b4:	4623      	mov	r3, r4
 80033b6:	d807      	bhi.n	80033c8 <memmove+0x20>
 80033b8:	1e43      	subs	r3, r0, #1
 80033ba:	42a1      	cmp	r1, r4
 80033bc:	d008      	beq.n	80033d0 <memmove+0x28>
 80033be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033c6:	e7f8      	b.n	80033ba <memmove+0x12>
 80033c8:	4601      	mov	r1, r0
 80033ca:	4402      	add	r2, r0
 80033cc:	428a      	cmp	r2, r1
 80033ce:	d100      	bne.n	80033d2 <memmove+0x2a>
 80033d0:	bd10      	pop	{r4, pc}
 80033d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033da:	e7f7      	b.n	80033cc <memmove+0x24>

080033dc <_sbrk_r>:
 80033dc:	b538      	push	{r3, r4, r5, lr}
 80033de:	2300      	movs	r3, #0
 80033e0:	4d05      	ldr	r5, [pc, #20]	@ (80033f8 <_sbrk_r+0x1c>)
 80033e2:	4604      	mov	r4, r0
 80033e4:	4608      	mov	r0, r1
 80033e6:	602b      	str	r3, [r5, #0]
 80033e8:	f7fd fc62 	bl	8000cb0 <_sbrk>
 80033ec:	1c43      	adds	r3, r0, #1
 80033ee:	d102      	bne.n	80033f6 <_sbrk_r+0x1a>
 80033f0:	682b      	ldr	r3, [r5, #0]
 80033f2:	b103      	cbz	r3, 80033f6 <_sbrk_r+0x1a>
 80033f4:	6023      	str	r3, [r4, #0]
 80033f6:	bd38      	pop	{r3, r4, r5, pc}
 80033f8:	2000028c 	.word	0x2000028c

080033fc <memchr>:
 80033fc:	4603      	mov	r3, r0
 80033fe:	b510      	push	{r4, lr}
 8003400:	b2c9      	uxtb	r1, r1
 8003402:	4402      	add	r2, r0
 8003404:	4293      	cmp	r3, r2
 8003406:	4618      	mov	r0, r3
 8003408:	d101      	bne.n	800340e <memchr+0x12>
 800340a:	2000      	movs	r0, #0
 800340c:	e003      	b.n	8003416 <memchr+0x1a>
 800340e:	7804      	ldrb	r4, [r0, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	428c      	cmp	r4, r1
 8003414:	d1f6      	bne.n	8003404 <memchr+0x8>
 8003416:	bd10      	pop	{r4, pc}

08003418 <memcpy>:
 8003418:	440a      	add	r2, r1
 800341a:	4291      	cmp	r1, r2
 800341c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003420:	d100      	bne.n	8003424 <memcpy+0xc>
 8003422:	4770      	bx	lr
 8003424:	b510      	push	{r4, lr}
 8003426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800342a:	4291      	cmp	r1, r2
 800342c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003430:	d1f9      	bne.n	8003426 <memcpy+0xe>
 8003432:	bd10      	pop	{r4, pc}

08003434 <_realloc_r>:
 8003434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003438:	4680      	mov	r8, r0
 800343a:	4615      	mov	r5, r2
 800343c:	460c      	mov	r4, r1
 800343e:	b921      	cbnz	r1, 800344a <_realloc_r+0x16>
 8003440:	4611      	mov	r1, r2
 8003442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003446:	f7ff bc39 	b.w	8002cbc <_malloc_r>
 800344a:	b92a      	cbnz	r2, 8003458 <_realloc_r+0x24>
 800344c:	f7ff fbcc 	bl	8002be8 <_free_r>
 8003450:	2400      	movs	r4, #0
 8003452:	4620      	mov	r0, r4
 8003454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003458:	f000 f81a 	bl	8003490 <_malloc_usable_size_r>
 800345c:	4285      	cmp	r5, r0
 800345e:	4606      	mov	r6, r0
 8003460:	d802      	bhi.n	8003468 <_realloc_r+0x34>
 8003462:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003466:	d8f4      	bhi.n	8003452 <_realloc_r+0x1e>
 8003468:	4629      	mov	r1, r5
 800346a:	4640      	mov	r0, r8
 800346c:	f7ff fc26 	bl	8002cbc <_malloc_r>
 8003470:	4607      	mov	r7, r0
 8003472:	2800      	cmp	r0, #0
 8003474:	d0ec      	beq.n	8003450 <_realloc_r+0x1c>
 8003476:	42b5      	cmp	r5, r6
 8003478:	462a      	mov	r2, r5
 800347a:	4621      	mov	r1, r4
 800347c:	bf28      	it	cs
 800347e:	4632      	movcs	r2, r6
 8003480:	f7ff ffca 	bl	8003418 <memcpy>
 8003484:	4621      	mov	r1, r4
 8003486:	4640      	mov	r0, r8
 8003488:	f7ff fbae 	bl	8002be8 <_free_r>
 800348c:	463c      	mov	r4, r7
 800348e:	e7e0      	b.n	8003452 <_realloc_r+0x1e>

08003490 <_malloc_usable_size_r>:
 8003490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003494:	1f18      	subs	r0, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	bfbc      	itt	lt
 800349a:	580b      	ldrlt	r3, [r1, r0]
 800349c:	18c0      	addlt	r0, r0, r3
 800349e:	4770      	bx	lr

080034a0 <_init>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	bf00      	nop
 80034a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	469e      	mov	lr, r3
 80034aa:	4770      	bx	lr

080034ac <_fini>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	bf00      	nop
 80034b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b2:	bc08      	pop	{r3}
 80034b4:	469e      	mov	lr, r3
 80034b6:	4770      	bx	lr
