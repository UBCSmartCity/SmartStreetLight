generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model StreetlightReading {
  id                String      @id @default(uuid())
  energy_usage      Float?
  brightness_level  Float?
  reading_time      DateTime?   @default(now()) @db.Timestamp(6)
  light_status      String?     @default("OFF") @db.VarChar(10)
  power_consumption Float?
  battery_status    Float?
  sensor_health     String?     @db.VarChar(20)
  streetlight       Streetlight @relation(fields: [light_id], references: [id])
  light_id          Int

  @@map("streetlight_reading")
}

model Streetlight {
  id         Int                  @id
  name       String
  location   String?
  start_date DateTime?
  readings   StreetlightReading[]

  @@map("streetlight")
}

model EngineerEmail {
  id          String  @id @default(uuid())
  email       String  @unique
  admin       Boolean @default(false)
  super_admin Boolean @default(false)

  @@map("engineer_email")
}

// for sign in logging 

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}
