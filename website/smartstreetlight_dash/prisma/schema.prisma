// generates prismaclient for js 
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// specify datasource - tentative, many are experimental for learning purposes
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// models for data - tent
model LangaraData {
  id                Int      @id @default(autoincrement())
  reading_time      DateTime
  energy_usage      Int
  light_status      String
  brightness_level  Int
  power_consumption Int
  battery_status    Int
  sensor_health     String
  location          String
}

model BigWayData {
  id                Int      @id @default(autoincrement())
  reading_time      DateTime
  energy_usage      Int
  light_status      String
  brightness_level  Int
  power_consumption Int
  battery_status    Int
  sensor_health     String
  location          String
}

model MoreData {
  id                Int      @id @default(autoincrement())
  reading_time      DateTime
  energy_usage      Int
  light_status      String
  brightness_level  Int
  power_consumption Int
  battery_status    Int
  sensor_health     String
  location          String
}

model MoreData2 {
  id                Int      @id @default(autoincrement())
  reading_time      DateTime
  energy_usage      Int
  light_status      String
  brightness_level  Int
  power_consumption Int
  battery_status    Int
  sensor_health     String
  location          String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AllowedEmails {
  id    Int    @id @default(autoincrement())
  email String @unique
}

model AdminEmails {
  id    Int    @id @default(autoincrement())
  email String @unique
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
